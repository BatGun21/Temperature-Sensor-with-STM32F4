
Temperature_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006544  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  080066e8  080066e8  000166e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006adc  08006adc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08006adc  08006adc  00016adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ae4  08006ae4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ae4  08006ae4  00016ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ae8  08006ae8  00016ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08006aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  200001ec  08006cd8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08006cd8  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000085a2  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001608  00000000  00000000  00028801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a0  00000000  00000000  00029e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005cb  00000000  00000000  0002a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001644c  00000000  00000000  0002ab7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008e6d  00000000  00000000  00040fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087c77  00000000  00000000  00049e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000031b4  00000000  00000000  000d1aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000d4c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080066cc 	.word	0x080066cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	080066cc 	.word	0x080066cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	; (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fac:	f000 fe64 	bl	8001c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb0:	f000 f83a 	bl	8001028 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Init(Clock_Frequency);
 8000fb4:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8000fb8:	f000 fb18 	bl	80015ec <SysTick_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fbc:	f000 f8bc 	bl	8001138 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fc0:	f000 f890 	bl	80010e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LED_init();
 8000fc4:	f000 fa52 	bl	800146c <LED_init>
  adc_init();
 8000fc8:	f000 fa96 	bl	80014f8 <adc_init>
  ConfigureVoltageSourcePin();
 8000fcc:	f000 fa2a 	bl	8001424 <ConfigureVoltageSourcePin>
  Timer3_Init();
 8000fd0:	f000 f9d2 	bl	8001378 <Timer3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SetWaitPidLoopUpdate();
 8000fd4:	f000 f8ca 	bl	800116c <SetWaitPidLoopUpdate>

	  if (time_expired(pidLoopUpdateWait.delayTime, pidLoopUpdateWait.currentTime)){
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <main+0x78>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	4a10      	ldr	r2, [pc, #64]	; (8001020 <main+0x78>)
 8000fde:	6812      	ldr	r2, [r2, #0]
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 fa6c 	bl	80014c0 <time_expired>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d004      	beq.n	8000ff8 <main+0x50>
		  PIDControlLoop();
 8000fee:	f000 f90d 	bl	800120c <PIDControlLoop>
		  pidLoopUpdateWait.activeFlag = 0;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <main+0x78>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
	  }

	  SetWaitOneSec();
 8000ff8:	f000 f8ce 	bl	8001198 <SetWaitOneSec>

	  if (time_expired(OneSec.delayTime, OneSec.currentTime)){
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <main+0x7c>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	4a08      	ldr	r2, [pc, #32]	; (8001024 <main+0x7c>)
 8001002:	6812      	ldr	r2, [r2, #0]
 8001004:	4611      	mov	r1, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f000 fa5a 	bl	80014c0 <time_expired>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0e0      	beq.n	8000fd4 <main+0x2c>
		  TemperaturePrint();
 8001012:	f000 fb7b 	bl	800170c <TemperaturePrint>
		  OneSec.activeFlag = 0;
 8001016:	4b03      	ldr	r3, [pc, #12]	; (8001024 <main+0x7c>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
	  SetWaitPidLoopUpdate();
 800101c:	e7da      	b.n	8000fd4 <main+0x2c>
 800101e:	bf00      	nop
 8001020:	20000000 	.word	0x20000000
 8001024:	2000000c 	.word	0x2000000c

08001028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b094      	sub	sp, #80	; 0x50
 800102c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102e:	f107 0320 	add.w	r3, r7, #32
 8001032:	2230      	movs	r2, #48	; 0x30
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f002 fe8b 	bl	8003d52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	4b22      	ldr	r3, [pc, #136]	; (80010dc <SystemClock_Config+0xb4>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	4a21      	ldr	r2, [pc, #132]	; (80010dc <SystemClock_Config+0xb4>)
 8001056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105a:	6413      	str	r3, [r2, #64]	; 0x40
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <SystemClock_Config+0xb4>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <SystemClock_Config+0xb8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a1b      	ldr	r2, [pc, #108]	; (80010e0 <SystemClock_Config+0xb8>)
 8001072:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <SystemClock_Config+0xb8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001084:	2302      	movs	r3, #2
 8001086:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001088:	2301      	movs	r3, #1
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800108c:	2310      	movs	r3, #16
 800108e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001090:	2300      	movs	r3, #0
 8001092:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001094:	f107 0320 	add.w	r3, r7, #32
 8001098:	4618      	mov	r0, r3
 800109a:	f001 f8b5 	bl	8002208 <HAL_RCC_OscConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010a4:	f000 fc4c 	bl	8001940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a8:	230f      	movs	r3, #15
 80010aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010ac:	2300      	movs	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f001 fb18 	bl	80026f8 <HAL_RCC_ClockConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010ce:	f000 fc37 	bl	8001940 <Error_Handler>
  }
}
 80010d2:	bf00      	nop
 80010d4:	3750      	adds	r7, #80	; 0x50
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40007000 	.word	0x40007000

080010e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_USART2_UART_Init+0x4c>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	; (8001134 <MX_USART2_UART_Init+0x50>)
 80010ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <MX_USART2_UART_Init+0x4c>)
 80010f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_USART2_UART_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <MX_USART2_UART_Init+0x4c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <MX_USART2_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_USART2_UART_Init+0x4c>)
 800110a:	220c      	movs	r2, #12
 800110c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <MX_USART2_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_USART2_UART_Init+0x4c>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_USART2_UART_Init+0x4c>)
 800111c:	f001 fccc 	bl	8002ab8 <HAL_UART_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001126:	f000 fc0b 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000208 	.word	0x20000208
 8001134:	40004400 	.word	0x40004400

08001138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_GPIO_Init+0x30>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a08      	ldr	r2, [pc, #32]	; (8001168 <MX_GPIO_Init+0x30>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_GPIO_Init+0x30>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800

0800116c <SetWaitPidLoopUpdate>:
void print_pidOutpuVal(void){ // Debug
	sprintf(msg4, " PID Output = %f ", pidOutput);
	HAL_UART_Transmit(&huart2, (uint8_t*)(msg4), strlen(msg4), 200);
}

void SetWaitPidLoopUpdate(void){
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
	  if (!pidLoopUpdateWait.activeFlag){
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <SetWaitPidLoopUpdate+0x24>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d106      	bne.n	8001186 <SetWaitPidLoopUpdate+0x1a>
		  pidLoopUpdateWait.currentTime = counter;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <SetWaitPidLoopUpdate+0x28>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <SetWaitPidLoopUpdate+0x24>)
 800117e:	6013      	str	r3, [r2, #0]
		  pidLoopUpdateWait.activeFlag = 1;
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <SetWaitPidLoopUpdate+0x24>)
 8001182:	2201      	movs	r2, #1
 8001184:	609a      	str	r2, [r3, #8]
	  }
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	20000000 	.word	0x20000000
 8001194:	20000260 	.word	0x20000260

08001198 <SetWaitOneSec>:

void SetWaitOneSec(void){
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
	  if (!OneSec.activeFlag){
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <SetWaitOneSec+0x24>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d106      	bne.n	80011b2 <SetWaitOneSec+0x1a>
		  OneSec.currentTime = counter;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <SetWaitOneSec+0x28>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <SetWaitOneSec+0x24>)
 80011aa:	6013      	str	r3, [r2, #0]
		  OneSec.activeFlag = 1;
 80011ac:	4b03      	ldr	r3, [pc, #12]	; (80011bc <SetWaitOneSec+0x24>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	609a      	str	r2, [r3, #8]
	  }
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	2000000c 	.word	0x2000000c
 80011c0:	20000260 	.word	0x20000260

080011c4 <ControlRelay>:

void ControlRelay(float dutycycle) {
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	ed87 0a01 	vstr	s0, [r7, #4]

    uint32_t dutyValue = (uint32_t)((100-dutycycle) * (PWM_PERIOD/ 100)); // NPN Transistor to relay
 80011ce:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001200 <ControlRelay+0x3c>
 80011d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011da:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001204 <ControlRelay+0x40>
 80011de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011e6:	ee17 3a90 	vmov	r3, s15
 80011ea:	60fb      	str	r3, [r7, #12]

    // Set the duty cycle
    TIM3->CCR1 = dutyValue;
 80011ec:	4a06      	ldr	r2, [pc, #24]	; (8001208 <ControlRelay+0x44>)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6353      	str	r3, [r2, #52]	; 0x34
}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	42c80000 	.word	0x42c80000
 8001204:	44160000 	.word	0x44160000
 8001208:	40000400 	.word	0x40000400

0800120c <PIDControlLoop>:

void PIDControlLoop(void) {
 800120c:	b5b0      	push	{r4, r5, r7, lr}
 800120e:	af00      	add	r7, sp, #0
    currentTemperature = readTemperature();
 8001210:	f000 faa0 	bl	8001754 <readTemperature>
 8001214:	eef0 7a40 	vmov.f32	s15, s0
 8001218:	4b4d      	ldr	r3, [pc, #308]	; (8001350 <PIDControlLoop+0x144>)
 800121a:	edc3 7a00 	vstr	s15, [r3]

    error = TARGET_TEMPERATURE - currentTemperature;
 800121e:	4b4c      	ldr	r3, [pc, #304]	; (8001350 <PIDControlLoop+0x144>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f998 	bl	8000558 <__aeabi_f2d>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	f04f 0000 	mov.w	r0, #0
 8001230:	4948      	ldr	r1, [pc, #288]	; (8001354 <PIDControlLoop+0x148>)
 8001232:	f7ff f831 	bl	8000298 <__aeabi_dsub>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f7ff fcbb 	bl	8000bb8 <__aeabi_d2f>
 8001242:	4603      	mov	r3, r0
 8001244:	4a44      	ldr	r2, [pc, #272]	; (8001358 <PIDControlLoop+0x14c>)
 8001246:	6013      	str	r3, [r2, #0]

    integral += error;
 8001248:	4b43      	ldr	r3, [pc, #268]	; (8001358 <PIDControlLoop+0x14c>)
 800124a:	ed93 7a00 	vldr	s14, [r3]
 800124e:	4b43      	ldr	r3, [pc, #268]	; (800135c <PIDControlLoop+0x150>)
 8001250:	edd3 7a00 	vldr	s15, [r3]
 8001254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001258:	4b40      	ldr	r3, [pc, #256]	; (800135c <PIDControlLoop+0x150>)
 800125a:	edc3 7a00 	vstr	s15, [r3]

    derivative = error - derivative;
 800125e:	4b3e      	ldr	r3, [pc, #248]	; (8001358 <PIDControlLoop+0x14c>)
 8001260:	ed93 7a00 	vldr	s14, [r3]
 8001264:	4b3e      	ldr	r3, [pc, #248]	; (8001360 <PIDControlLoop+0x154>)
 8001266:	edd3 7a00 	vldr	s15, [r3]
 800126a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800126e:	4b3c      	ldr	r3, [pc, #240]	; (8001360 <PIDControlLoop+0x154>)
 8001270:	edc3 7a00 	vstr	s15, [r3]

    pidOutput = (KP * error + KI * integral + KD * derivative);
 8001274:	4b38      	ldr	r3, [pc, #224]	; (8001358 <PIDControlLoop+0x14c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f96d 	bl	8000558 <__aeabi_f2d>
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	4b38      	ldr	r3, [pc, #224]	; (8001364 <PIDControlLoop+0x158>)
 8001284:	f7ff f9c0 	bl	8000608 <__aeabi_dmul>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4614      	mov	r4, r2
 800128e:	461d      	mov	r5, r3
 8001290:	4b32      	ldr	r3, [pc, #200]	; (800135c <PIDControlLoop+0x150>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f95f 	bl	8000558 <__aeabi_f2d>
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	4b32      	ldr	r3, [pc, #200]	; (8001368 <PIDControlLoop+0x15c>)
 80012a0:	f7ff f9b2 	bl	8000608 <__aeabi_dmul>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4620      	mov	r0, r4
 80012aa:	4629      	mov	r1, r5
 80012ac:	f7fe fff6 	bl	800029c <__adddf3>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4614      	mov	r4, r2
 80012b6:	461d      	mov	r5, r3
 80012b8:	4b29      	ldr	r3, [pc, #164]	; (8001360 <PIDControlLoop+0x154>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f94b 	bl	8000558 <__aeabi_f2d>
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	f04f 0300 	mov.w	r3, #0
 80012ca:	f7ff f99d 	bl	8000608 <__aeabi_dmul>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4620      	mov	r0, r4
 80012d4:	4629      	mov	r1, r5
 80012d6:	f7fe ffe1 	bl	800029c <__adddf3>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fc69 	bl	8000bb8 <__aeabi_d2f>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4a20      	ldr	r2, [pc, #128]	; (800136c <PIDControlLoop+0x160>)
 80012ea:	6013      	str	r3, [r2, #0]

    // Limit the PWM output to the maximum value
    if (pidOutput > PID_MAX_VALUE) {
 80012ec:	4b1f      	ldr	r3, [pc, #124]	; (800136c <PIDControlLoop+0x160>)
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001370 <PIDControlLoop+0x164>
 80012f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fe:	dd02      	ble.n	8001306 <PIDControlLoop+0xfa>
        pidOutput = PID_MAX_VALUE;
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <PIDControlLoop+0x160>)
 8001302:	4a1c      	ldr	r2, [pc, #112]	; (8001374 <PIDControlLoop+0x168>)
 8001304:	601a      	str	r2, [r3, #0]
    }
    // If too low value set to 0
    if (pidOutput < PID_MIN_VALUE) {
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <PIDControlLoop+0x160>)
 8001308:	edd3 7a00 	vldr	s15, [r3]
 800130c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d503      	bpl.n	8001322 <PIDControlLoop+0x116>
        pidOutput = PID_MIN_VALUE;
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <PIDControlLoop+0x160>)
 800131c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001320:	601a      	str	r2, [r3, #0]
    }
    pidOutput = Percentage(pidOutput, PID_MAX_VALUE);
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <PIDControlLoop+0x160>)
 8001324:	edd3 7a00 	vldr	s15, [r3]
 8001328:	eddf 0a11 	vldr	s1, [pc, #68]	; 8001370 <PIDControlLoop+0x164>
 800132c:	eeb0 0a67 	vmov.f32	s0, s15
 8001330:	f000 fadc 	bl	80018ec <Percentage>
 8001334:	eef0 7a40 	vmov.f32	s15, s0
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <PIDControlLoop+0x160>)
 800133a:	edc3 7a00 	vstr	s15, [r3]

    // Control the relay using PWM
    ControlRelay(pidOutput);
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <PIDControlLoop+0x160>)
 8001340:	edd3 7a00 	vldr	s15, [r3]
 8001344:	eeb0 0a67 	vmov.f32	s0, s15
 8001348:	f7ff ff3c 	bl	80011c4 <ControlRelay>
}
 800134c:	bf00      	nop
 800134e:	bdb0      	pop	{r4, r5, r7, pc}
 8001350:	2000024c 	.word	0x2000024c
 8001354:	40440000 	.word	0x40440000
 8001358:	20000250 	.word	0x20000250
 800135c:	20000254 	.word	0x20000254
 8001360:	20000258 	.word	0x20000258
 8001364:	402e0000 	.word	0x402e0000
 8001368:	40080000 	.word	0x40080000
 800136c:	2000025c 	.word	0x2000025c
 8001370:	42c80000 	.word	0x42c80000
 8001374:	42c80000 	.word	0x42c80000

08001378 <Timer3_Init>:
    TIM2->EGR |= TIM_EGR_UG;

    TIM2->CR1 |= TIM_CR1_CEN; // Enable TIM2
}

void Timer3_Init(void) {
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800137c:	4b26      	ldr	r3, [pc, #152]	; (8001418 <Timer3_Init+0xa0>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	4a25      	ldr	r2, [pc, #148]	; (8001418 <Timer3_Init+0xa0>)
 8001382:	f043 0302 	orr.w	r3, r3, #2
 8001386:	6413      	str	r3, [r2, #64]	; 0x40

    // PC6 as alternate function (TIM3 CH1)
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8001388:	4b23      	ldr	r3, [pc, #140]	; (8001418 <Timer3_Init+0xa0>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138c:	4a22      	ldr	r2, [pc, #136]	; (8001418 <Timer3_Init+0xa0>)
 800138e:	f043 0304 	orr.w	r3, r3, #4
 8001392:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOC->MODER |= GPIO_MODER_MODER6_1;  // Alternate function mode
 8001394:	4b21      	ldr	r3, [pc, #132]	; (800141c <Timer3_Init+0xa4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a20      	ldr	r2, [pc, #128]	; (800141c <Timer3_Init+0xa4>)
 800139a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800139e:	6013      	str	r3, [r2, #0]
    GPIOC->AFR[0] |= 0x02000000;  // AF02 for PC6 (TIM3 CH1)
 80013a0:	4b1e      	ldr	r3, [pc, #120]	; (800141c <Timer3_Init+0xa4>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4a1d      	ldr	r2, [pc, #116]	; (800141c <Timer3_Init+0xa4>)
 80013a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013aa:	6213      	str	r3, [r2, #32]
    GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6;  // High speed
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <Timer3_Init+0xa4>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	4a1a      	ldr	r2, [pc, #104]	; (800141c <Timer3_Init+0xa4>)
 80013b2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80013b6:	6093      	str	r3, [r2, #8]
    GPIOC->OTYPER |= 0x0040; // Open Drain
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <Timer3_Init+0xa4>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	4a17      	ldr	r2, [pc, #92]	; (800141c <Timer3_Init+0xa4>)
 80013be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013c2:	6053      	str	r3, [r2, #4]

    // TIM3
    TIM3->PSC = Clock_Frequency - 1;  // Prescaler to achieve 1ms tick with 16MHz clock
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <Timer3_Init+0xa8>)
 80013c6:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = PWM_PERIOD - 1;  // Auto-reload value
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <Timer3_Init+0xa8>)
 80013ce:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80013d2:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM3->CCR1 = (uint16_t) (MIN_DUTY_CYCLE * PWM_PERIOD / 100);  // Initial duty cycle
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <Timer3_Init+0xa8>)
 80013d6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80013da:	635a      	str	r2, [r3, #52]	; 0x34

    // Configure TIM3 CH1 for PWM mode 1
    TIM3->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 80013dc:	4b10      	ldr	r3, [pc, #64]	; (8001420 <Timer3_Init+0xa8>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <Timer3_Init+0xa8>)
 80013e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013e6:	6193      	str	r3, [r2, #24]
    TIM3->CCER |= TIM_CCER_CC1E;  // Enable capture/compare channel 1
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <Timer3_Init+0xa8>)
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	4a0c      	ldr	r2, [pc, #48]	; (8001420 <Timer3_Init+0xa8>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6213      	str	r3, [r2, #32]

    // Trigger an update event to load new values
    TIM3->EGR |= TIM_EGR_UG;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <Timer3_Init+0xa8>)
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	4a09      	ldr	r2, [pc, #36]	; (8001420 <Timer3_Init+0xa8>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6153      	str	r3, [r2, #20]

    TIM3->CR1 |= TIM_CR1_CEN; // Enable TIM3
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <Timer3_Init+0xa8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a06      	ldr	r2, [pc, #24]	; (8001420 <Timer3_Init+0xa8>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6013      	str	r3, [r2, #0]
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	40020800 	.word	0x40020800
 8001420:	40000400 	.word	0x40000400

08001424 <ConfigureVoltageSourcePin>:
        return 0.0;
    }
    return sum / count;
}

void ConfigureVoltageSourcePin(void) {
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
    // Enable the GPIO port clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <ConfigureVoltageSourcePin+0x40>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	4a0d      	ldr	r2, [pc, #52]	; (8001464 <ConfigureVoltageSourcePin+0x40>)
 800142e:	f043 0304 	orr.w	r3, r3, #4
 8001432:	6313      	str	r3, [r2, #48]	; 0x30

    // Configure PC1 as general purpose output
    GPIO_PORT_RELAY->MODER |= GPIO_MODER_MODER1_0;
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <ConfigureVoltageSourcePin+0x44>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0b      	ldr	r2, [pc, #44]	; (8001468 <ConfigureVoltageSourcePin+0x44>)
 800143a:	f043 0304 	orr.w	r3, r3, #4
 800143e:	6013      	str	r3, [r2, #0]

    // Configure PC1 as open drain
    GPIO_PORT_RELAY->OTYPER |= GPIO_OTYPER_OT_1;
 8001440:	4b09      	ldr	r3, [pc, #36]	; (8001468 <ConfigureVoltageSourcePin+0x44>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	4a08      	ldr	r2, [pc, #32]	; (8001468 <ConfigureVoltageSourcePin+0x44>)
 8001446:	f043 0302 	orr.w	r3, r3, #2
 800144a:	6053      	str	r3, [r2, #4]

    // Configure PC1 to high speed
    GPIO_PORT_RELAY->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR1;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <ConfigureVoltageSourcePin+0x44>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	4a05      	ldr	r2, [pc, #20]	; (8001468 <ConfigureVoltageSourcePin+0x44>)
 8001452:	f043 030c 	orr.w	r3, r3, #12
 8001456:	6093      	str	r3, [r2, #8]
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40020800 	.word	0x40020800

0800146c <LED_init>:
	}else{
		GPIO_PORT_RELAY->ODR |= (GPIO_PIN_HEATER_RELAY);
	}
}

void LED_init(void){
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; // Enabling Clock for GPIOD
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <LED_init+0x4c>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	4a10      	ldr	r2, [pc, #64]	; (80014b8 <LED_init+0x4c>)
 8001476:	f043 0308 	orr.w	r3, r3, #8
 800147a:	6313      	str	r3, [r2, #48]	; 0x30
	GPIO_PORT_LEDS->MODER |= GPIO_MODER_MODER14_0; //Set bit 0 to 1 Red
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <LED_init+0x50>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <LED_init+0x50>)
 8001482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001486:	6013      	str	r3, [r2, #0]
	GPIO_PORT_LEDS->MODER |= GPIO_MODER_MODER15_0; //Set bit 0 to 1 Blue
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <LED_init+0x50>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <LED_init+0x50>)
 800148e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001492:	6013      	str	r3, [r2, #0]
	GPIO_PORT_LEDS->MODER |= GPIO_MODER_MODER13_0; //Set bit 0 to 1 Orange
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <LED_init+0x50>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a08      	ldr	r2, [pc, #32]	; (80014bc <LED_init+0x50>)
 800149a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800149e:	6013      	str	r3, [r2, #0]
	GPIO_PORT_LEDS->MODER |= GPIO_MODER_MODER12_0; //Set bit 0 to 1 Green
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <LED_init+0x50>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a05      	ldr	r2, [pc, #20]	; (80014bc <LED_init+0x50>)
 80014a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020c00 	.word	0x40020c00

080014c0 <time_expired>:

int time_expired (int delayTime, int currentTime){
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
	int timeExpiredFlag = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
	if (counter> currentTime+delayTime){
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	441a      	add	r2, r3
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <time_expired+0x34>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	da02      	bge.n	80014e2 <time_expired+0x22>
		timeExpiredFlag = 1;
 80014dc:	2301      	movs	r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	e001      	b.n	80014e6 <time_expired+0x26>
	}else{
		timeExpiredFlag = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
	}
	return timeExpiredFlag;
 80014e6:	68fb      	ldr	r3, [r7, #12]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	20000260 	.word	0x20000260

080014f8 <adc_init>:

void adc_init(void) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
    // Enable the ADC1 clock
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80014fc:	4b26      	ldr	r3, [pc, #152]	; (8001598 <adc_init+0xa0>)
 80014fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001500:	4a25      	ldr	r2, [pc, #148]	; (8001598 <adc_init+0xa0>)
 8001502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001506:	6453      	str	r3, [r2, #68]	; 0x44

    // Enable the GPIOB clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8001508:	4b23      	ldr	r3, [pc, #140]	; (8001598 <adc_init+0xa0>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150c:	4a22      	ldr	r2, [pc, #136]	; (8001598 <adc_init+0xa0>)
 800150e:	f043 0302 	orr.w	r3, r3, #2
 8001512:	6313      	str	r3, [r2, #48]	; 0x30

    // Configure PB1 as analog input
    GPIO_PORT_ADC->MODER |= GPIO_MODER_MODER1; // Analog mode
 8001514:	4b21      	ldr	r3, [pc, #132]	; (800159c <adc_init+0xa4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a20      	ldr	r2, [pc, #128]	; (800159c <adc_init+0xa4>)
 800151a:	f043 030c 	orr.w	r3, r3, #12
 800151e:	6013      	str	r3, [r2, #0]
    GPIO_PORT_ADC->OTYPER |= GPIO_OTYPER_OT1; // Open Drain PB1
 8001520:	4b1e      	ldr	r3, [pc, #120]	; (800159c <adc_init+0xa4>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	4a1d      	ldr	r2, [pc, #116]	; (800159c <adc_init+0xa4>)
 8001526:	f043 0302 	orr.w	r3, r3, #2
 800152a:	6053      	str	r3, [r2, #4]

    // Configure ADC settings
    ADC1->CR1 &= ~ADC_CR1_RES; // Clear the RES bits for 12-bit resolution
 800152c:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <adc_init+0xa8>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <adc_init+0xa8>)
 8001532:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001536:	6053      	str	r3, [r2, #4]
    ADC1->CR2 &= ~ADC_CR2_ALIGN; // Data right-aligned
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <adc_init+0xa8>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	4a18      	ldr	r2, [pc, #96]	; (80015a0 <adc_init+0xa8>)
 800153e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001542:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= ADC_CR2_CONT; // Continuous conversion mode
 8001544:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <adc_init+0xa8>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	4a15      	ldr	r2, [pc, #84]	; (80015a0 <adc_init+0xa8>)
 800154a:	f043 0302 	orr.w	r3, r3, #2
 800154e:	6093      	str	r3, [r2, #8]
    ADC1->SQR3 &= ~ADC_SQR3_SQ1; // Clear the SQ1 bits
 8001550:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <adc_init+0xa8>)
 8001552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001554:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <adc_init+0xa8>)
 8001556:	f023 031f 	bic.w	r3, r3, #31
 800155a:	6353      	str	r3, [r2, #52]	; 0x34
    ADC1->SQR3 |= 9 << ADC_SQR3_SQ1_Pos; // Set the channel number in SQ1 bits (Channel 9 for PB1)
 800155c:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <adc_init+0xa8>)
 800155e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001560:	4a0f      	ldr	r2, [pc, #60]	; (80015a0 <adc_init+0xa8>)
 8001562:	f043 0309 	orr.w	r3, r3, #9
 8001566:	6353      	str	r3, [r2, #52]	; 0x34
    ADC1->SQR3 |= 8 << ADC_SQR3_SQ1_Pos; // Set the channel number in SQ1 bits (Channel 8 for PB0)
 8001568:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <adc_init+0xa8>)
 800156a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156c:	4a0c      	ldr	r2, [pc, #48]	; (80015a0 <adc_init+0xa8>)
 800156e:	f043 0308 	orr.w	r3, r3, #8
 8001572:	6353      	str	r3, [r2, #52]	; 0x34
    // Enable the ADC
    ADC1->CR2 |= ADC_CR2_ADON;
 8001574:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <adc_init+0xa8>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	4a09      	ldr	r2, [pc, #36]	; (80015a0 <adc_init+0xa8>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6093      	str	r3, [r2, #8]

    // Wait for ADC to be ready
    DelayMSW(100);
 8001580:	2064      	movs	r0, #100	; 0x64
 8001582:	f000 f85f 	bl	8001644 <DelayMSW>

    // Start the conversion
    ADC1->CR2 |= ADC_CR2_SWSTART;
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <adc_init+0xa8>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <adc_init+0xa8>)
 800158c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001590:	6093      	str	r3, [r2, #8]
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	40020400 	.word	0x40020400
 80015a0:	40012000 	.word	0x40012000

080015a4 <read_adc>:

uint16_t read_adc(uint8_t channel) {
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
    ADC1->SQR3 = (channel & 0x1F);  // Assuming channel is less than 16
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <read_adc+0x44>)
 80015b2:	f003 031f 	and.w	r3, r3, #31
 80015b6:	6353      	str	r3, [r2, #52]	; 0x34

    // Start the conversion
    ADC1->CR2 |= ADC_CR2_SWSTART;
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <read_adc+0x44>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <read_adc+0x44>)
 80015be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80015c2:	6093      	str	r3, [r2, #8]

    // Wait for the end of conversion
    while (!((ADC1->SR & ADC_SR_EOC) == ADC_SR_EOC)) {}
 80015c4:	bf00      	nop
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <read_adc+0x44>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d1f9      	bne.n	80015c6 <read_adc+0x22>

    // Read the converted value
    uint16_t result = ADC1->DR;
 80015d2:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <read_adc+0x44>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	81fb      	strh	r3, [r7, #14]

    return result;
 80015d8:	89fb      	ldrh	r3, [r7, #14]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40012000 	.word	0x40012000

080015ec <SysTick_Init>:

void SysTick_Init(uint32_t ticks){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

	SysTick->CTRL = 0; // Disable SysTick
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <SysTick_Init+0x54>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]

	SysTick->LOAD = ticks-1; // Set Reload Register
 80015fa:	4a11      	ldr	r2, [pc, #68]	; (8001640 <SysTick_Init+0x54>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	6053      	str	r3, [r2, #4]

	// Setting Interrupt Priority to the highest
	NVIC_SetPriority(SysTick_IRQn, (1<<__NVIC_PRIO_BITS)-1);
 8001602:	210f      	movs	r1, #15
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f7ff fca4 	bl	8000f54 <__NVIC_SetPriority>

	SysTick->VAL = 0; // Reset the SysTick counter value
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <SysTick_Init+0x54>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]

	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; // Selecting internal clock source
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <SysTick_Init+0x54>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <SysTick_Init+0x54>)
 8001618:	f043 0304 	orr.w	r3, r3, #4
 800161c:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk; // Enabling SysTick exception Request when 0
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <SysTick_Init+0x54>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a07      	ldr	r2, [pc, #28]	; (8001640 <SysTick_Init+0x54>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	6013      	str	r3, [r2, #0]


	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk; // Enable SysTick
 800162a:	4b05      	ldr	r3, [pc, #20]	; (8001640 <SysTick_Init+0x54>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a04      	ldr	r2, [pc, #16]	; (8001640 <SysTick_Init+0x54>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6013      	str	r3, [r2, #0]
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	e000e010 	.word	0xe000e010

08001644 <DelayMSW>:

void DelayMSW(unsigned int time){
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	for(int i=0; i<=time; i++){
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	e009      	b.n	8001666 <DelayMSW+0x22>
		while ((SysTick->CTRL & 0x00010000) == 0){
 8001652:	bf00      	nop
 8001654:	4b09      	ldr	r3, [pc, #36]	; (800167c <DelayMSW+0x38>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f9      	beq.n	8001654 <DelayMSW+0x10>
	for(int i=0; i<=time; i++){
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	3301      	adds	r3, #1
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	429a      	cmp	r2, r3
 800166c:	d2f1      	bcs.n	8001652 <DelayMSW+0xe>
				//Wait for 1 millisec.
		}
	}
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000e010 	.word	0xe000e010

08001680 <SysTick_Handler>:

void SysTick_Handler(void) {
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

	if (counter == 0xffffffff) {
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <SysTick_Handler+0x2c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800168c:	d103      	bne.n	8001696 <SysTick_Handler+0x16>
        counter = 0; // Reset the counter if the maximum value is reached
 800168e:	4b07      	ldr	r3, [pc, #28]	; (80016ac <SysTick_Handler+0x2c>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
    } else {
        counter++; // Increment the counter
    }
}
 8001694:	e004      	b.n	80016a0 <SysTick_Handler+0x20>
        counter++; // Increment the counter
 8001696:	4b05      	ldr	r3, [pc, #20]	; (80016ac <SysTick_Handler+0x2c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	3301      	adds	r3, #1
 800169c:	4a03      	ldr	r2, [pc, #12]	; (80016ac <SysTick_Handler+0x2c>)
 800169e:	6013      	str	r3, [r2, #0]
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	20000260 	.word	0x20000260

080016b0 <adcValtoVolts>:
void printTimestamp(void) { // Debug
	sprintf(msg, "%d,", counter);
	HAL_UART_Transmit(&huart2, (uint8_t*)(msg), strlen(msg), 200);
}

float adcValtoVolts (uint16_t adcVal){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	80fb      	strh	r3, [r7, #6]
	float Vin = (adcVal/4096.0)*2.9;
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe ff39 	bl	8000534 <__aeabi_i2d>
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <adcValtoVolts+0x58>)
 80016c8:	f7ff f8c8 	bl	800085c <__aeabi_ddiv>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	a30a      	add	r3, pc, #40	; (adr r3, 8001700 <adcValtoVolts+0x50>)
 80016d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016da:	f7fe ff95 	bl	8000608 <__aeabi_dmul>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4610      	mov	r0, r2
 80016e4:	4619      	mov	r1, r3
 80016e6:	f7ff fa67 	bl	8000bb8 <__aeabi_d2f>
 80016ea:	4603      	mov	r3, r0
 80016ec:	60fb      	str	r3, [r7, #12]
//	Vin = Vin*(48.0/2.70); //Correction for Voltage divider for 48V
//	Vin += (0.6/30.0)*Vin; //Correction using observation
	return Vin;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	ee07 3a90 	vmov	s15, r3
}
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	33333333 	.word	0x33333333
 8001704:	40073333 	.word	0x40073333
 8001708:	40b00000 	.word	0x40b00000

0800170c <TemperaturePrint>:

void TemperaturePrint (void){ //Debug
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
	float temp_in = readTemperature();
 8001712:	f000 f81f 	bl	8001754 <readTemperature>
 8001716:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(msg3, "%.1f,", temp_in);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7fe ff1c 	bl	8000558 <__aeabi_f2d>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4908      	ldr	r1, [pc, #32]	; (8001748 <TemperaturePrint+0x3c>)
 8001726:	4809      	ldr	r0, [pc, #36]	; (800174c <TemperaturePrint+0x40>)
 8001728:	f002 fab0 	bl	8003c8c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)(msg3), strlen(msg3), 200);
 800172c:	4807      	ldr	r0, [pc, #28]	; (800174c <TemperaturePrint+0x40>)
 800172e:	f7fe fda7 	bl	8000280 <strlen>
 8001732:	4603      	mov	r3, r0
 8001734:	b29a      	uxth	r2, r3
 8001736:	23c8      	movs	r3, #200	; 0xc8
 8001738:	4904      	ldr	r1, [pc, #16]	; (800174c <TemperaturePrint+0x40>)
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <TemperaturePrint+0x44>)
 800173c:	f001 fa09 	bl	8002b52 <HAL_UART_Transmit>
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	0800671c 	.word	0x0800671c
 800174c:	20000264 	.word	0x20000264
 8001750:	20000208 	.word	0x20000208

08001754 <readTemperature>:

float readTemperature(void) {
 8001754:	b5b0      	push	{r4, r5, r7, lr}
 8001756:	ed2d 8b02 	vpush	{d8}
 800175a:	b08c      	sub	sp, #48	; 0x30
 800175c:	af00      	add	r7, sp, #0

	uint16_t adcVal = read_adc(ADC_CHANNEL);
 800175e:	2009      	movs	r0, #9
 8001760:	f7ff ff20 	bl	80015a4 <read_adc>
 8001764:	4603      	mov	r3, r0
 8001766:	84fb      	strh	r3, [r7, #38]	; 0x26
	float voltage = adcValtoVolts(adcVal);
 8001768:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff ffa0 	bl	80016b0 <adcValtoVolts>
 8001770:	ed87 0a08 	vstr	s0, [r7, #32]

    // Coefficients of the polynomial equation
    const float coefficients[] = {1289.78801301f, -9160.83019487f, 24253.89976964f, -28439.16295386f, 12535.517037f}; // Range is 25 deg C to 60 deg C
 8001774:	4b24      	ldr	r3, [pc, #144]	; (8001808 <readTemperature+0xb4>)
 8001776:	1d3c      	adds	r4, r7, #4
 8001778:	461d      	mov	r5, r3
 800177a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800177c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800177e:	682b      	ldr	r3, [r5, #0]
 8001780:	6023      	str	r3, [r4, #0]

    float result = 0.0f;
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i = 0; i <= 4; ++i) {
 8001788:	2300      	movs	r3, #0
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
 800178c:	e020      	b.n	80017d0 <readTemperature+0x7c>
        result += coefficients[i] * powf(voltage, 4 - i);
 800178e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	3330      	adds	r3, #48	; 0x30
 8001794:	443b      	add	r3, r7
 8001796:	3b2c      	subs	r3, #44	; 0x2c
 8001798:	ed93 8a00 	vldr	s16, [r3]
 800179c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179e:	f1c3 0304 	rsb	r3, r3, #4
 80017a2:	ee07 3a90 	vmov	s15, r3
 80017a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017aa:	eef0 0a67 	vmov.f32	s1, s15
 80017ae:	ed97 0a08 	vldr	s0, [r7, #32]
 80017b2:	f004 fbc9 	bl	8005f48 <powf>
 80017b6:	eef0 7a40 	vmov.f32	s15, s0
 80017ba:	ee68 7a27 	vmul.f32	s15, s16, s15
 80017be:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80017c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int i = 0; i <= 4; ++i) {
 80017ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017cc:	3301      	adds	r3, #1
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80017d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	dddb      	ble.n	800178e <readTemperature+0x3a>
    }

    // Apply the moving average filter
    float movingAverage = MovingAverage(result);
 80017d6:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80017da:	f000 f83b 	bl	8001854 <MovingAverage>
 80017de:	ed87 0a07 	vstr	s0, [r7, #28]

    // Remove outliers
    float filteredTemperature = RemoveOutliers(result, movingAverage);
 80017e2:	edd7 0a07 	vldr	s1, [r7, #28]
 80017e6:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80017ea:	f000 f80f 	bl	800180c <RemoveOutliers>
 80017ee:	ed87 0a06 	vstr	s0, [r7, #24]

    return filteredTemperature;
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	ee07 3a90 	vmov	s15, r3
}
 80017f8:	eeb0 0a67 	vmov.f32	s0, s15
 80017fc:	3730      	adds	r7, #48	; 0x30
 80017fe:	46bd      	mov	sp, r7
 8001800:	ecbd 8b02 	vpop	{d8}
 8001804:	bdb0      	pop	{r4, r5, r7, pc}
 8001806:	bf00      	nop
 8001808:	08006724 	.word	0x08006724

0800180c <RemoveOutliers>:

float RemoveOutliers(float newValue, float movingAverage) {
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	ed87 0a01 	vstr	s0, [r7, #4]
 8001816:	edc7 0a00 	vstr	s1, [r7]

    if (fabs(newValue - movingAverage) > NOISE_THRESHOLD) {
 800181a:	ed97 7a01 	vldr	s14, [r7, #4]
 800181e:	edd7 7a00 	vldr	s15, [r7]
 8001822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001826:	eef0 7ae7 	vabs.f32	s15, s15
 800182a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001850 <RemoveOutliers+0x44>
 800182e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001836:	dd01      	ble.n	800183c <RemoveOutliers+0x30>
        return movingAverage;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	e000      	b.n	800183e <RemoveOutliers+0x32>
    } else {
        return newValue;
 800183c:	687b      	ldr	r3, [r7, #4]
    }
}
 800183e:	ee07 3a90 	vmov	s15, r3
 8001842:	eeb0 0a67 	vmov.f32	s0, s15
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	42480000 	.word	0x42480000

08001854 <MovingAverage>:

float MovingAverage(float newValue) {
 8001854:	b480      	push	{r7}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	ed87 0a01 	vstr	s0, [r7, #4]

    temperatureBuffer[bufferIndex] = newValue;
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <MovingAverage+0x8c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a20      	ldr	r2, [pc, #128]	; (80018e4 <MovingAverage+0x90>)
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	601a      	str	r2, [r3, #0]

    bufferIndex = (bufferIndex + 1) % MOVING_AVERAGE_SIZE;
 800186c:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <MovingAverage+0x8c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	1c59      	adds	r1, r3, #1
 8001872:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <MovingAverage+0x94>)
 8001874:	fb83 2301 	smull	r2, r3, r3, r1
 8001878:	109a      	asrs	r2, r3, #2
 800187a:	17cb      	asrs	r3, r1, #31
 800187c:	1ad2      	subs	r2, r2, r3
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	1aca      	subs	r2, r1, r3
 8001888:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <MovingAverage+0x8c>)
 800188a:	601a      	str	r2, [r3, #0]

    float sum = 0.0;
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < MOVING_AVERAGE_SIZE; i++) {
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	e00e      	b.n	80018b6 <MovingAverage+0x62>
        sum += temperatureBuffer[i];
 8001898:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <MovingAverage+0x90>)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	edd3 7a00 	vldr	s15, [r3]
 80018a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80018a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ac:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < MOVING_AVERAGE_SIZE; i++) {
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	3301      	adds	r3, #1
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	2b09      	cmp	r3, #9
 80018ba:	dded      	ble.n	8001898 <MovingAverage+0x44>
    }
    float movingAverage = sum / MOVING_AVERAGE_SIZE;
 80018bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80018c0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80018c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c8:	edc7 7a03 	vstr	s15, [r7, #12]

    return movingAverage;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	ee07 3a90 	vmov	s15, r3
}
 80018d2:	eeb0 0a67 	vmov.f32	s0, s15
 80018d6:	371c      	adds	r7, #28
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	200002c0 	.word	0x200002c0
 80018e4:	20000298 	.word	0x20000298
 80018e8:	66666667 	.word	0x66666667

080018ec <Percentage>:

float Percentage(float currentValue, float maxValue) {
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	ed87 0a01 	vstr	s0, [r7, #4]
 80018f6:	edc7 0a00 	vstr	s1, [r7]
    if (maxValue == 0.0) {
 80018fa:	edd7 7a00 	vldr	s15, [r7]
 80018fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001906:	d102      	bne.n	800190e <Percentage+0x22>
        // Avoid division by zero
        return 0.0;
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	e00c      	b.n	8001928 <Percentage+0x3c>
    }
    float percentage = (currentValue / maxValue) * 100.0;
 800190e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001912:	ed97 7a00 	vldr	s14, [r7]
 8001916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800191a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800193c <Percentage+0x50>
 800191e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001922:	edc7 7a03 	vstr	s15, [r7, #12]

    return percentage;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	ee07 3a90 	vmov	s15, r3
 800192c:	eeb0 0a67 	vmov.f32	s0, s15
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	42c80000 	.word	0x42c80000

08001940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001944:	b672      	cpsid	i
}
 8001946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001948:	e7fe      	b.n	8001948 <Error_Handler+0x8>
	...

0800194c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_MspInit+0x4c>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	4a0f      	ldr	r2, [pc, #60]	; (8001998 <HAL_MspInit+0x4c>)
 800195c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001960:	6453      	str	r3, [r2, #68]	; 0x44
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <HAL_MspInit+0x4c>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_MspInit+0x4c>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	4a08      	ldr	r2, [pc, #32]	; (8001998 <HAL_MspInit+0x4c>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197c:	6413      	str	r3, [r2, #64]	; 0x40
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_MspInit+0x4c>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800

0800199c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a19      	ldr	r2, [pc, #100]	; (8001a20 <HAL_UART_MspInit+0x84>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d12b      	bne.n	8001a16 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <HAL_UART_MspInit+0x88>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <HAL_UART_MspInit+0x88>)
 80019c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019cc:	6413      	str	r3, [r2, #64]	; 0x40
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_UART_MspInit+0x88>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <HAL_UART_MspInit+0x88>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a10      	ldr	r2, [pc, #64]	; (8001a24 <HAL_UART_MspInit+0x88>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <HAL_UART_MspInit+0x88>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019f6:	230c      	movs	r3, #12
 80019f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a02:	2303      	movs	r3, #3
 8001a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a06:	2307      	movs	r3, #7
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4805      	ldr	r0, [pc, #20]	; (8001a28 <HAL_UART_MspInit+0x8c>)
 8001a12:	f000 fa75 	bl	8001f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a16:	bf00      	nop
 8001a18:	3728      	adds	r7, #40	; 0x28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40004400 	.word	0x40004400
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020000 	.word	0x40020000

08001a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <NMI_Handler+0x4>

08001a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <HardFault_Handler+0x4>

08001a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <MemManage_Handler+0x4>

08001a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <BusFault_Handler+0x4>

08001a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <UsageFault_Handler+0x4>

08001a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return 1;
 8001a78:	2301      	movs	r3, #1
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <_kill>:

int _kill(int pid, int sig)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a8e:	f002 f9b3 	bl	8003df8 <__errno>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2216      	movs	r2, #22
 8001a96:	601a      	str	r2, [r3, #0]
  return -1;
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <_exit>:

void _exit (int status)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ffe7 	bl	8001a84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ab6:	e7fe      	b.n	8001ab6 <_exit+0x12>

08001ab8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	e00a      	b.n	8001ae0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aca:	f3af 8000 	nop.w
 8001ace:	4601      	mov	r1, r0
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	60ba      	str	r2, [r7, #8]
 8001ad6:	b2ca      	uxtb	r2, r1
 8001ad8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3301      	adds	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	dbf0      	blt.n	8001aca <_read+0x12>
  }

  return len;
 8001ae8:	687b      	ldr	r3, [r7, #4]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	e009      	b.n	8001b18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	60ba      	str	r2, [r7, #8]
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	3301      	adds	r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	dbf1      	blt.n	8001b04 <_write+0x12>
  }
  return len;
 8001b20:	687b      	ldr	r3, [r7, #4]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <_close>:

int _close(int file)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b52:	605a      	str	r2, [r3, #4]
  return 0;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <_isatty>:

int _isatty(int file)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b6a:	2301      	movs	r3, #1
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
	...

08001b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b9c:	4a14      	ldr	r2, [pc, #80]	; (8001bf0 <_sbrk+0x5c>)
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <_sbrk+0x60>)
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <_sbrk+0x64>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d102      	bne.n	8001bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <_sbrk+0x64>)
 8001bb2:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <_sbrk+0x68>)
 8001bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <_sbrk+0x64>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d207      	bcs.n	8001bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc4:	f002 f918 	bl	8003df8 <__errno>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	220c      	movs	r2, #12
 8001bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd2:	e009      	b.n	8001be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <_sbrk+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bda:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <_sbrk+0x64>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <_sbrk+0x64>)
 8001be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001be6:	68fb      	ldr	r3, [r7, #12]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20020000 	.word	0x20020000
 8001bf4:	00000400 	.word	0x00000400
 8001bf8:	200002c4 	.word	0x200002c4
 8001bfc:	20000418 	.word	0x20000418

08001c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <SystemInit+0x20>)
 8001c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c0a:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <SystemInit+0x20>)
 8001c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c28:	480d      	ldr	r0, [pc, #52]	; (8001c60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c2a:	490e      	ldr	r1, [pc, #56]	; (8001c64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c2c:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c30:	e002      	b.n	8001c38 <LoopCopyDataInit>

08001c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c36:	3304      	adds	r3, #4

08001c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c3c:	d3f9      	bcc.n	8001c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3e:	4a0b      	ldr	r2, [pc, #44]	; (8001c6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c40:	4c0b      	ldr	r4, [pc, #44]	; (8001c70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c44:	e001      	b.n	8001c4a <LoopFillZerobss>

08001c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c48:	3204      	adds	r2, #4

08001c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c4c:	d3fb      	bcc.n	8001c46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c4e:	f7ff ffd7 	bl	8001c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c52:	f002 f8d7 	bl	8003e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c56:	f7ff f9a7 	bl	8000fa8 <main>
  bx  lr    
 8001c5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c64:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001c68:	08006aec 	.word	0x08006aec
  ldr r2, =_sbss
 8001c6c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001c70:	20000418 	.word	0x20000418

08001c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c74:	e7fe      	b.n	8001c74 <ADC_IRQHandler>
	...

08001c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <HAL_Init+0x40>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0d      	ldr	r2, [pc, #52]	; (8001cb8 <HAL_Init+0x40>)
 8001c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_Init+0x40>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <HAL_Init+0x40>)
 8001c8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <HAL_Init+0x40>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a07      	ldr	r2, [pc, #28]	; (8001cb8 <HAL_Init+0x40>)
 8001c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca0:	2003      	movs	r0, #3
 8001ca2:	f000 f8f9 	bl	8001e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ca6:	200f      	movs	r0, #15
 8001ca8:	f000 f808 	bl	8001cbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cac:	f7ff fe4e 	bl	800194c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023c00 	.word	0x40023c00

08001cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_InitTick+0x54>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_InitTick+0x58>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 f903 	bl	8001ee6 <HAL_SYSTICK_Config>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e00e      	b.n	8001d08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b0f      	cmp	r3, #15
 8001cee:	d80a      	bhi.n	8001d06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf8:	f000 f8d9 	bl	8001eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cfc:	4a06      	ldr	r2, [pc, #24]	; (8001d18 <HAL_InitTick+0x5c>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	e000      	b.n	8001d08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000018 	.word	0x20000018
 8001d14:	20000020 	.word	0x20000020
 8001d18:	2000001c 	.word	0x2000001c

08001d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <HAL_GetTick+0x14>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	200002c8 	.word	0x200002c8

08001d34 <__NVIC_SetPriorityGrouping>:
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <__NVIC_SetPriorityGrouping+0x44>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d50:	4013      	ands	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d66:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <__NVIC_SetPriorityGrouping+0x44>)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	60d3      	str	r3, [r2, #12]
}
 8001d6c:	bf00      	nop
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <__NVIC_GetPriorityGrouping>:
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <__NVIC_GetPriorityGrouping+0x18>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	0a1b      	lsrs	r3, r3, #8
 8001d86:	f003 0307 	and.w	r3, r3, #7
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_SetPriority>:
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	6039      	str	r1, [r7, #0]
 8001da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	db0a      	blt.n	8001dc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	490c      	ldr	r1, [pc, #48]	; (8001de4 <__NVIC_SetPriority+0x4c>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	0112      	lsls	r2, r2, #4
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	440b      	add	r3, r1
 8001dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001dc0:	e00a      	b.n	8001dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4908      	ldr	r1, [pc, #32]	; (8001de8 <__NVIC_SetPriority+0x50>)
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	3b04      	subs	r3, #4
 8001dd0:	0112      	lsls	r2, r2, #4
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	761a      	strb	r2, [r3, #24]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000e100 	.word	0xe000e100
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	; 0x24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f1c3 0307 	rsb	r3, r3, #7
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	bf28      	it	cs
 8001e0a:	2304      	movcs	r3, #4
 8001e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3304      	adds	r3, #4
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	d902      	bls.n	8001e1c <NVIC_EncodePriority+0x30>
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3b03      	subs	r3, #3
 8001e1a:	e000      	b.n	8001e1e <NVIC_EncodePriority+0x32>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	f04f 32ff 	mov.w	r2, #4294967295
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	401a      	ands	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e34:	f04f 31ff 	mov.w	r1, #4294967295
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	43d9      	mvns	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	4313      	orrs	r3, r2
         );
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3724      	adds	r7, #36	; 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e64:	d301      	bcc.n	8001e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e66:	2301      	movs	r3, #1
 8001e68:	e00f      	b.n	8001e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <SysTick_Config+0x40>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e72:	210f      	movs	r1, #15
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f7ff ff8e 	bl	8001d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e7c:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <SysTick_Config+0x40>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e82:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <SysTick_Config+0x40>)
 8001e84:	2207      	movs	r2, #7
 8001e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	e000e010 	.word	0xe000e010

08001e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ff47 	bl	8001d34 <__NVIC_SetPriorityGrouping>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec0:	f7ff ff5c 	bl	8001d7c <__NVIC_GetPriorityGrouping>
 8001ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	6978      	ldr	r0, [r7, #20]
 8001ecc:	f7ff ff8e 	bl	8001dec <NVIC_EncodePriority>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff5d 	bl	8001d98 <__NVIC_SetPriority>
}
 8001ede:	bf00      	nop
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ffb0 	bl	8001e54 <SysTick_Config>
 8001ef4:	4603      	mov	r3, r0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b089      	sub	sp, #36	; 0x24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]
 8001f1a:	e159      	b.n	80021d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	f040 8148 	bne.w	80021ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d005      	beq.n	8001f52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d130      	bne.n	8001fb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f88:	2201      	movs	r2, #1
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f003 0201 	and.w	r2, r3, #1
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	d017      	beq.n	8001ff0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2203      	movs	r2, #3
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d123      	bne.n	8002044 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	08da      	lsrs	r2, r3, #3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3208      	adds	r2, #8
 8002004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	220f      	movs	r2, #15
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	08da      	lsrs	r2, r3, #3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3208      	adds	r2, #8
 800203e:	69b9      	ldr	r1, [r7, #24]
 8002040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	2203      	movs	r2, #3
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 0203 	and.w	r2, r3, #3
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80a2 	beq.w	80021ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	4b57      	ldr	r3, [pc, #348]	; (80021e8 <HAL_GPIO_Init+0x2e8>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	4a56      	ldr	r2, [pc, #344]	; (80021e8 <HAL_GPIO_Init+0x2e8>)
 8002090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002094:	6453      	str	r3, [r2, #68]	; 0x44
 8002096:	4b54      	ldr	r3, [pc, #336]	; (80021e8 <HAL_GPIO_Init+0x2e8>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020a2:	4a52      	ldr	r2, [pc, #328]	; (80021ec <HAL_GPIO_Init+0x2ec>)
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	3302      	adds	r3, #2
 80020aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	220f      	movs	r2, #15
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a49      	ldr	r2, [pc, #292]	; (80021f0 <HAL_GPIO_Init+0x2f0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d019      	beq.n	8002102 <HAL_GPIO_Init+0x202>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a48      	ldr	r2, [pc, #288]	; (80021f4 <HAL_GPIO_Init+0x2f4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d013      	beq.n	80020fe <HAL_GPIO_Init+0x1fe>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a47      	ldr	r2, [pc, #284]	; (80021f8 <HAL_GPIO_Init+0x2f8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d00d      	beq.n	80020fa <HAL_GPIO_Init+0x1fa>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a46      	ldr	r2, [pc, #280]	; (80021fc <HAL_GPIO_Init+0x2fc>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d007      	beq.n	80020f6 <HAL_GPIO_Init+0x1f6>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a45      	ldr	r2, [pc, #276]	; (8002200 <HAL_GPIO_Init+0x300>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d101      	bne.n	80020f2 <HAL_GPIO_Init+0x1f2>
 80020ee:	2304      	movs	r3, #4
 80020f0:	e008      	b.n	8002104 <HAL_GPIO_Init+0x204>
 80020f2:	2307      	movs	r3, #7
 80020f4:	e006      	b.n	8002104 <HAL_GPIO_Init+0x204>
 80020f6:	2303      	movs	r3, #3
 80020f8:	e004      	b.n	8002104 <HAL_GPIO_Init+0x204>
 80020fa:	2302      	movs	r3, #2
 80020fc:	e002      	b.n	8002104 <HAL_GPIO_Init+0x204>
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <HAL_GPIO_Init+0x204>
 8002102:	2300      	movs	r3, #0
 8002104:	69fa      	ldr	r2, [r7, #28]
 8002106:	f002 0203 	and.w	r2, r2, #3
 800210a:	0092      	lsls	r2, r2, #2
 800210c:	4093      	lsls	r3, r2
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002114:	4935      	ldr	r1, [pc, #212]	; (80021ec <HAL_GPIO_Init+0x2ec>)
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	089b      	lsrs	r3, r3, #2
 800211a:	3302      	adds	r3, #2
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002122:	4b38      	ldr	r3, [pc, #224]	; (8002204 <HAL_GPIO_Init+0x304>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002146:	4a2f      	ldr	r2, [pc, #188]	; (8002204 <HAL_GPIO_Init+0x304>)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800214c:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_GPIO_Init+0x304>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002170:	4a24      	ldr	r2, [pc, #144]	; (8002204 <HAL_GPIO_Init+0x304>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002176:	4b23      	ldr	r3, [pc, #140]	; (8002204 <HAL_GPIO_Init+0x304>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800219a:	4a1a      	ldr	r2, [pc, #104]	; (8002204 <HAL_GPIO_Init+0x304>)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021a0:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_GPIO_Init+0x304>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021c4:	4a0f      	ldr	r2, [pc, #60]	; (8002204 <HAL_GPIO_Init+0x304>)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3301      	adds	r3, #1
 80021ce:	61fb      	str	r3, [r7, #28]
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	2b0f      	cmp	r3, #15
 80021d4:	f67f aea2 	bls.w	8001f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021d8:	bf00      	nop
 80021da:	bf00      	nop
 80021dc:	3724      	adds	r7, #36	; 0x24
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40013800 	.word	0x40013800
 80021f0:	40020000 	.word	0x40020000
 80021f4:	40020400 	.word	0x40020400
 80021f8:	40020800 	.word	0x40020800
 80021fc:	40020c00 	.word	0x40020c00
 8002200:	40021000 	.word	0x40021000
 8002204:	40013c00 	.word	0x40013c00

08002208 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e267      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d075      	beq.n	8002312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002226:	4b88      	ldr	r3, [pc, #544]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b04      	cmp	r3, #4
 8002230:	d00c      	beq.n	800224c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002232:	4b85      	ldr	r3, [pc, #532]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800223a:	2b08      	cmp	r3, #8
 800223c:	d112      	bne.n	8002264 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800223e:	4b82      	ldr	r3, [pc, #520]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800224a:	d10b      	bne.n	8002264 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224c:	4b7e      	ldr	r3, [pc, #504]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d05b      	beq.n	8002310 <HAL_RCC_OscConfig+0x108>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d157      	bne.n	8002310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e242      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226c:	d106      	bne.n	800227c <HAL_RCC_OscConfig+0x74>
 800226e:	4b76      	ldr	r3, [pc, #472]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a75      	ldr	r2, [pc, #468]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e01d      	b.n	80022b8 <HAL_RCC_OscConfig+0xb0>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x98>
 8002286:	4b70      	ldr	r3, [pc, #448]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a6f      	ldr	r2, [pc, #444]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 800228c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	4b6d      	ldr	r3, [pc, #436]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a6c      	ldr	r2, [pc, #432]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e00b      	b.n	80022b8 <HAL_RCC_OscConfig+0xb0>
 80022a0:	4b69      	ldr	r3, [pc, #420]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a68      	ldr	r2, [pc, #416]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80022a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b66      	ldr	r3, [pc, #408]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a65      	ldr	r2, [pc, #404]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80022b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d013      	beq.n	80022e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7ff fd2c 	bl	8001d1c <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c8:	f7ff fd28 	bl	8001d1c <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e207      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	4b5b      	ldr	r3, [pc, #364]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0xc0>
 80022e6:	e014      	b.n	8002312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7ff fd18 	bl	8001d1c <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f0:	f7ff fd14 	bl	8001d1c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	; 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e1f3      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002302:	4b51      	ldr	r3, [pc, #324]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0xe8>
 800230e:	e000      	b.n	8002312 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d063      	beq.n	80023e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800231e:	4b4a      	ldr	r3, [pc, #296]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00b      	beq.n	8002342 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800232a:	4b47      	ldr	r3, [pc, #284]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002332:	2b08      	cmp	r3, #8
 8002334:	d11c      	bne.n	8002370 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002336:	4b44      	ldr	r3, [pc, #272]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d116      	bne.n	8002370 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002342:	4b41      	ldr	r3, [pc, #260]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <HAL_RCC_OscConfig+0x152>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d001      	beq.n	800235a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e1c7      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235a:	4b3b      	ldr	r3, [pc, #236]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4937      	ldr	r1, [pc, #220]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236e:	e03a      	b.n	80023e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d020      	beq.n	80023ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002378:	4b34      	ldr	r3, [pc, #208]	; (800244c <HAL_RCC_OscConfig+0x244>)
 800237a:	2201      	movs	r2, #1
 800237c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237e:	f7ff fccd 	bl	8001d1c <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002386:	f7ff fcc9 	bl	8001d1c <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e1a8      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002398:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a4:	4b28      	ldr	r3, [pc, #160]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4925      	ldr	r1, [pc, #148]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	600b      	str	r3, [r1, #0]
 80023b8:	e015      	b.n	80023e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ba:	4b24      	ldr	r3, [pc, #144]	; (800244c <HAL_RCC_OscConfig+0x244>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7ff fcac 	bl	8001d1c <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c8:	f7ff fca8 	bl	8001d1c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e187      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023da:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d036      	beq.n	8002460 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d016      	beq.n	8002428 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <HAL_RCC_OscConfig+0x248>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002400:	f7ff fc8c 	bl	8001d1c <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002408:	f7ff fc88 	bl	8001d1c <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e167      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <HAL_RCC_OscConfig+0x240>)
 800241c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0x200>
 8002426:	e01b      	b.n	8002460 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002428:	4b09      	ldr	r3, [pc, #36]	; (8002450 <HAL_RCC_OscConfig+0x248>)
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242e:	f7ff fc75 	bl	8001d1c <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002434:	e00e      	b.n	8002454 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002436:	f7ff fc71 	bl	8001d1c <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d907      	bls.n	8002454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e150      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
 8002448:	40023800 	.word	0x40023800
 800244c:	42470000 	.word	0x42470000
 8002450:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002454:	4b88      	ldr	r3, [pc, #544]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1ea      	bne.n	8002436 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 8097 	beq.w	800259c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246e:	2300      	movs	r3, #0
 8002470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002472:	4b81      	ldr	r3, [pc, #516]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10f      	bne.n	800249e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	4b7d      	ldr	r3, [pc, #500]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	4a7c      	ldr	r2, [pc, #496]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248c:	6413      	str	r3, [r2, #64]	; 0x40
 800248e:	4b7a      	ldr	r3, [pc, #488]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800249a:	2301      	movs	r3, #1
 800249c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249e:	4b77      	ldr	r3, [pc, #476]	; (800267c <HAL_RCC_OscConfig+0x474>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d118      	bne.n	80024dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024aa:	4b74      	ldr	r3, [pc, #464]	; (800267c <HAL_RCC_OscConfig+0x474>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a73      	ldr	r2, [pc, #460]	; (800267c <HAL_RCC_OscConfig+0x474>)
 80024b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b6:	f7ff fc31 	bl	8001d1c <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024be:	f7ff fc2d 	bl	8001d1c <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e10c      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d0:	4b6a      	ldr	r3, [pc, #424]	; (800267c <HAL_RCC_OscConfig+0x474>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d106      	bne.n	80024f2 <HAL_RCC_OscConfig+0x2ea>
 80024e4:	4b64      	ldr	r3, [pc, #400]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	4a63      	ldr	r2, [pc, #396]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6713      	str	r3, [r2, #112]	; 0x70
 80024f0:	e01c      	b.n	800252c <HAL_RCC_OscConfig+0x324>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b05      	cmp	r3, #5
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0x30c>
 80024fa:	4b5f      	ldr	r3, [pc, #380]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	4a5e      	ldr	r2, [pc, #376]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	6713      	str	r3, [r2, #112]	; 0x70
 8002506:	4b5c      	ldr	r3, [pc, #368]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250a:	4a5b      	ldr	r2, [pc, #364]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6713      	str	r3, [r2, #112]	; 0x70
 8002512:	e00b      	b.n	800252c <HAL_RCC_OscConfig+0x324>
 8002514:	4b58      	ldr	r3, [pc, #352]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002518:	4a57      	ldr	r2, [pc, #348]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	6713      	str	r3, [r2, #112]	; 0x70
 8002520:	4b55      	ldr	r3, [pc, #340]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002524:	4a54      	ldr	r2, [pc, #336]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002526:	f023 0304 	bic.w	r3, r3, #4
 800252a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d015      	beq.n	8002560 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002534:	f7ff fbf2 	bl	8001d1c <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253a:	e00a      	b.n	8002552 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800253c:	f7ff fbee 	bl	8001d1c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	f241 3288 	movw	r2, #5000	; 0x1388
 800254a:	4293      	cmp	r3, r2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e0cb      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002552:	4b49      	ldr	r3, [pc, #292]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0ee      	beq.n	800253c <HAL_RCC_OscConfig+0x334>
 800255e:	e014      	b.n	800258a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002560:	f7ff fbdc 	bl	8001d1c <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002566:	e00a      	b.n	800257e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002568:	f7ff fbd8 	bl	8001d1c <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	; 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e0b5      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257e:	4b3e      	ldr	r3, [pc, #248]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1ee      	bne.n	8002568 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800258a:	7dfb      	ldrb	r3, [r7, #23]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d105      	bne.n	800259c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002590:	4b39      	ldr	r3, [pc, #228]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	4a38      	ldr	r2, [pc, #224]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800259a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80a1 	beq.w	80026e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025a6:	4b34      	ldr	r3, [pc, #208]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b08      	cmp	r3, #8
 80025b0:	d05c      	beq.n	800266c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d141      	bne.n	800263e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ba:	4b31      	ldr	r3, [pc, #196]	; (8002680 <HAL_RCC_OscConfig+0x478>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7ff fbac 	bl	8001d1c <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c8:	f7ff fba8 	bl	8001d1c <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e087      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	4b27      	ldr	r3, [pc, #156]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69da      	ldr	r2, [r3, #28]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	019b      	lsls	r3, r3, #6
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	085b      	lsrs	r3, r3, #1
 80025fe:	3b01      	subs	r3, #1
 8002600:	041b      	lsls	r3, r3, #16
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	061b      	lsls	r3, r3, #24
 800260a:	491b      	ldr	r1, [pc, #108]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 800260c:	4313      	orrs	r3, r2
 800260e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002610:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_RCC_OscConfig+0x478>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002616:	f7ff fb81 	bl	8001d1c <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261e:	f7ff fb7d 	bl	8001d1c <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e05c      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x416>
 800263c:	e054      	b.n	80026e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263e:	4b10      	ldr	r3, [pc, #64]	; (8002680 <HAL_RCC_OscConfig+0x478>)
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7ff fb6a 	bl	8001d1c <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800264c:	f7ff fb66 	bl	8001d1c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e045      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_RCC_OscConfig+0x470>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0x444>
 800266a:	e03d      	b.n	80026e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d107      	bne.n	8002684 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e038      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
 8002678:	40023800 	.word	0x40023800
 800267c:	40007000 	.word	0x40007000
 8002680:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002684:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <HAL_RCC_OscConfig+0x4ec>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d028      	beq.n	80026e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800269c:	429a      	cmp	r2, r3
 800269e:	d121      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d11a      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026b4:	4013      	ands	r3, r2
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026bc:	4293      	cmp	r3, r2
 80026be:	d111      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	085b      	lsrs	r3, r3, #1
 80026cc:	3b01      	subs	r3, #1
 80026ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d107      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800

080026f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0cc      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800270c:	4b68      	ldr	r3, [pc, #416]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d90c      	bls.n	8002734 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271a:	4b65      	ldr	r3, [pc, #404]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002722:	4b63      	ldr	r3, [pc, #396]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0b8      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d020      	beq.n	8002782 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800274c:	4b59      	ldr	r3, [pc, #356]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4a58      	ldr	r2, [pc, #352]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002756:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002764:	4b53      	ldr	r3, [pc, #332]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4a52      	ldr	r2, [pc, #328]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800276e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002770:	4b50      	ldr	r3, [pc, #320]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	494d      	ldr	r1, [pc, #308]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	4313      	orrs	r3, r2
 8002780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d044      	beq.n	8002818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d107      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002796:	4b47      	ldr	r3, [pc, #284]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d119      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e07f      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d003      	beq.n	80027b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b6:	4b3f      	ldr	r3, [pc, #252]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d109      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e06f      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c6:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e067      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027d6:	4b37      	ldr	r3, [pc, #220]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f023 0203 	bic.w	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4934      	ldr	r1, [pc, #208]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e8:	f7ff fa98 	bl	8001d1c <HAL_GetTick>
 80027ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f0:	f7ff fa94 	bl	8001d1c <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e04f      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 020c 	and.w	r2, r3, #12
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	429a      	cmp	r2, r3
 8002816:	d1eb      	bne.n	80027f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002818:	4b25      	ldr	r3, [pc, #148]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d20c      	bcs.n	8002840 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002826:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282e:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e032      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800284c:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4916      	ldr	r1, [pc, #88]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d009      	beq.n	800287e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800286a:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	490e      	ldr	r1, [pc, #56]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 800287a:	4313      	orrs	r3, r2
 800287c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800287e:	f000 f821 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 8002882:	4602      	mov	r2, r0
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	490a      	ldr	r1, [pc, #40]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002890:	5ccb      	ldrb	r3, [r1, r3]
 8002892:	fa22 f303 	lsr.w	r3, r2, r3
 8002896:	4a09      	ldr	r2, [pc, #36]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fa0c 	bl	8001cbc <HAL_InitTick>

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40023c00 	.word	0x40023c00
 80028b4:	40023800 	.word	0x40023800
 80028b8:	08006738 	.word	0x08006738
 80028bc:	20000018 	.word	0x20000018
 80028c0:	2000001c 	.word	0x2000001c

080028c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c8:	b090      	sub	sp, #64	; 0x40
 80028ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	637b      	str	r3, [r7, #52]	; 0x34
 80028d0:	2300      	movs	r3, #0
 80028d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028d4:	2300      	movs	r3, #0
 80028d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028dc:	4b59      	ldr	r3, [pc, #356]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x180>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d00d      	beq.n	8002904 <HAL_RCC_GetSysClockFreq+0x40>
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	f200 80a1 	bhi.w	8002a30 <HAL_RCC_GetSysClockFreq+0x16c>
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <HAL_RCC_GetSysClockFreq+0x34>
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d003      	beq.n	80028fe <HAL_RCC_GetSysClockFreq+0x3a>
 80028f6:	e09b      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028f8:	4b53      	ldr	r3, [pc, #332]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x184>)
 80028fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80028fc:	e09b      	b.n	8002a36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028fe:	4b53      	ldr	r3, [pc, #332]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x188>)
 8002900:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002902:	e098      	b.n	8002a36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002904:	4b4f      	ldr	r3, [pc, #316]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800290c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800290e:	4b4d      	ldr	r3, [pc, #308]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d028      	beq.n	800296c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291a:	4b4a      	ldr	r3, [pc, #296]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x180>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	099b      	lsrs	r3, r3, #6
 8002920:	2200      	movs	r2, #0
 8002922:	623b      	str	r3, [r7, #32]
 8002924:	627a      	str	r2, [r7, #36]	; 0x24
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800292c:	2100      	movs	r1, #0
 800292e:	4b47      	ldr	r3, [pc, #284]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x188>)
 8002930:	fb03 f201 	mul.w	r2, r3, r1
 8002934:	2300      	movs	r3, #0
 8002936:	fb00 f303 	mul.w	r3, r0, r3
 800293a:	4413      	add	r3, r2
 800293c:	4a43      	ldr	r2, [pc, #268]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x188>)
 800293e:	fba0 1202 	umull	r1, r2, r0, r2
 8002942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002944:	460a      	mov	r2, r1
 8002946:	62ba      	str	r2, [r7, #40]	; 0x28
 8002948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800294a:	4413      	add	r3, r2
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800294e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002950:	2200      	movs	r2, #0
 8002952:	61bb      	str	r3, [r7, #24]
 8002954:	61fa      	str	r2, [r7, #28]
 8002956:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800295a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800295e:	f7fe f97b 	bl	8000c58 <__aeabi_uldivmod>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4613      	mov	r3, r2
 8002968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800296a:	e053      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800296c:	4b35      	ldr	r3, [pc, #212]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x180>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	099b      	lsrs	r3, r3, #6
 8002972:	2200      	movs	r2, #0
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	617a      	str	r2, [r7, #20]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800297e:	f04f 0b00 	mov.w	fp, #0
 8002982:	4652      	mov	r2, sl
 8002984:	465b      	mov	r3, fp
 8002986:	f04f 0000 	mov.w	r0, #0
 800298a:	f04f 0100 	mov.w	r1, #0
 800298e:	0159      	lsls	r1, r3, #5
 8002990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002994:	0150      	lsls	r0, r2, #5
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	ebb2 080a 	subs.w	r8, r2, sl
 800299e:	eb63 090b 	sbc.w	r9, r3, fp
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029b6:	ebb2 0408 	subs.w	r4, r2, r8
 80029ba:	eb63 0509 	sbc.w	r5, r3, r9
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	00eb      	lsls	r3, r5, #3
 80029c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029cc:	00e2      	lsls	r2, r4, #3
 80029ce:	4614      	mov	r4, r2
 80029d0:	461d      	mov	r5, r3
 80029d2:	eb14 030a 	adds.w	r3, r4, sl
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	eb45 030b 	adc.w	r3, r5, fp
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ea:	4629      	mov	r1, r5
 80029ec:	028b      	lsls	r3, r1, #10
 80029ee:	4621      	mov	r1, r4
 80029f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029f4:	4621      	mov	r1, r4
 80029f6:	028a      	lsls	r2, r1, #10
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029fe:	2200      	movs	r2, #0
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	60fa      	str	r2, [r7, #12]
 8002a04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a08:	f7fe f926 	bl	8000c58 <__aeabi_uldivmod>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4613      	mov	r3, r2
 8002a12:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	0c1b      	lsrs	r3, r3, #16
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	3301      	adds	r3, #1
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002a24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a2e:	e002      	b.n	8002a36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a32:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3740      	adds	r7, #64	; 0x40
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800
 8002a48:	00f42400 	.word	0x00f42400
 8002a4c:	017d7840 	.word	0x017d7840

08002a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a54:	4b03      	ldr	r3, [pc, #12]	; (8002a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a56:	681b      	ldr	r3, [r3, #0]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	20000018 	.word	0x20000018

08002a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a6c:	f7ff fff0 	bl	8002a50 <HAL_RCC_GetHCLKFreq>
 8002a70:	4602      	mov	r2, r0
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	0a9b      	lsrs	r3, r3, #10
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	4903      	ldr	r1, [pc, #12]	; (8002a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a7e:	5ccb      	ldrb	r3, [r1, r3]
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	08006748 	.word	0x08006748

08002a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a94:	f7ff ffdc 	bl	8002a50 <HAL_RCC_GetHCLKFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	0b5b      	lsrs	r3, r3, #13
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	4903      	ldr	r1, [pc, #12]	; (8002ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	08006748 	.word	0x08006748

08002ab8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e03f      	b.n	8002b4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7fe ff5c 	bl	800199c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2224      	movs	r2, #36	; 0x24
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002afa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f929 	bl	8002d54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695a      	ldr	r2, [r3, #20]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68da      	ldr	r2, [r3, #12]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b08a      	sub	sp, #40	; 0x28
 8002b56:	af02      	add	r7, sp, #8
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	603b      	str	r3, [r7, #0]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d17c      	bne.n	8002c6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <HAL_UART_Transmit+0x2c>
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e075      	b.n	8002c6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_UART_Transmit+0x3e>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e06e      	b.n	8002c6e <HAL_UART_Transmit+0x11c>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2221      	movs	r2, #33	; 0x21
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ba6:	f7ff f8b9 	bl	8001d1c <HAL_GetTick>
 8002baa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	88fa      	ldrh	r2, [r7, #6]
 8002bb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	88fa      	ldrh	r2, [r7, #6]
 8002bb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc0:	d108      	bne.n	8002bd4 <HAL_UART_Transmit+0x82>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d104      	bne.n	8002bd4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	e003      	b.n	8002bdc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002be4:	e02a      	b.n	8002c3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2200      	movs	r2, #0
 8002bee:	2180      	movs	r1, #128	; 0x80
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 f840 	bl	8002c76 <UART_WaitOnFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e036      	b.n	8002c6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10b      	bne.n	8002c1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	3302      	adds	r3, #2
 8002c1a:	61bb      	str	r3, [r7, #24]
 8002c1c:	e007      	b.n	8002c2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	781a      	ldrb	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1cf      	bne.n	8002be6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2140      	movs	r1, #64	; 0x40
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f810 	bl	8002c76 <UART_WaitOnFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e006      	b.n	8002c6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	e000      	b.n	8002c6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c6c:	2302      	movs	r3, #2
  }
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3720      	adds	r7, #32
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b090      	sub	sp, #64	; 0x40
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	603b      	str	r3, [r7, #0]
 8002c82:	4613      	mov	r3, r2
 8002c84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c86:	e050      	b.n	8002d2a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8e:	d04c      	beq.n	8002d2a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d007      	beq.n	8002ca6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c96:	f7ff f841 	bl	8001d1c <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d241      	bcs.n	8002d2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	330c      	adds	r3, #12
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb0:	e853 3f00 	ldrex	r3, [r3]
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	330c      	adds	r3, #12
 8002cc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cc6:	637a      	str	r2, [r7, #52]	; 0x34
 8002cc8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ccc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cce:	e841 2300 	strex	r3, r2, [r1]
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1e5      	bne.n	8002ca6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3314      	adds	r3, #20
 8002ce0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	e853 3f00 	ldrex	r3, [r3]
 8002ce8:	613b      	str	r3, [r7, #16]
   return(result);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	3314      	adds	r3, #20
 8002cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cfa:	623a      	str	r2, [r7, #32]
 8002cfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfe:	69f9      	ldr	r1, [r7, #28]
 8002d00:	6a3a      	ldr	r2, [r7, #32]
 8002d02:	e841 2300 	strex	r3, r2, [r1]
 8002d06:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1e5      	bne.n	8002cda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e00f      	b.n	8002d4a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4013      	ands	r3, r2
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	bf0c      	ite	eq
 8002d3a:	2301      	moveq	r3, #1
 8002d3c:	2300      	movne	r3, #0
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d09f      	beq.n	8002c88 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3740      	adds	r7, #64	; 0x40
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d58:	b0c0      	sub	sp, #256	; 0x100
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d70:	68d9      	ldr	r1, [r3, #12]
 8002d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	ea40 0301 	orr.w	r3, r0, r1
 8002d7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002dac:	f021 010c 	bic.w	r1, r1, #12
 8002db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002dba:	430b      	orrs	r3, r1
 8002dbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dce:	6999      	ldr	r1, [r3, #24]
 8002dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	ea40 0301 	orr.w	r3, r0, r1
 8002dda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	4b8f      	ldr	r3, [pc, #572]	; (8003020 <UART_SetConfig+0x2cc>)
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d005      	beq.n	8002df4 <UART_SetConfig+0xa0>
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	4b8d      	ldr	r3, [pc, #564]	; (8003024 <UART_SetConfig+0x2d0>)
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d104      	bne.n	8002dfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002df4:	f7ff fe4c 	bl	8002a90 <HAL_RCC_GetPCLK2Freq>
 8002df8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002dfc:	e003      	b.n	8002e06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dfe:	f7ff fe33 	bl	8002a68 <HAL_RCC_GetPCLK1Freq>
 8002e02:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e10:	f040 810c 	bne.w	800302c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e26:	4622      	mov	r2, r4
 8002e28:	462b      	mov	r3, r5
 8002e2a:	1891      	adds	r1, r2, r2
 8002e2c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e2e:	415b      	adcs	r3, r3
 8002e30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e36:	4621      	mov	r1, r4
 8002e38:	eb12 0801 	adds.w	r8, r2, r1
 8002e3c:	4629      	mov	r1, r5
 8002e3e:	eb43 0901 	adc.w	r9, r3, r1
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e56:	4690      	mov	r8, r2
 8002e58:	4699      	mov	r9, r3
 8002e5a:	4623      	mov	r3, r4
 8002e5c:	eb18 0303 	adds.w	r3, r8, r3
 8002e60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e64:	462b      	mov	r3, r5
 8002e66:	eb49 0303 	adc.w	r3, r9, r3
 8002e6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e7a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e82:	460b      	mov	r3, r1
 8002e84:	18db      	adds	r3, r3, r3
 8002e86:	653b      	str	r3, [r7, #80]	; 0x50
 8002e88:	4613      	mov	r3, r2
 8002e8a:	eb42 0303 	adc.w	r3, r2, r3
 8002e8e:	657b      	str	r3, [r7, #84]	; 0x54
 8002e90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e98:	f7fd fede 	bl	8000c58 <__aeabi_uldivmod>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4b61      	ldr	r3, [pc, #388]	; (8003028 <UART_SetConfig+0x2d4>)
 8002ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	011c      	lsls	r4, r3, #4
 8002eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002eb4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002eb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ebc:	4642      	mov	r2, r8
 8002ebe:	464b      	mov	r3, r9
 8002ec0:	1891      	adds	r1, r2, r2
 8002ec2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ec4:	415b      	adcs	r3, r3
 8002ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ec8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ecc:	4641      	mov	r1, r8
 8002ece:	eb12 0a01 	adds.w	sl, r2, r1
 8002ed2:	4649      	mov	r1, r9
 8002ed4:	eb43 0b01 	adc.w	fp, r3, r1
 8002ed8:	f04f 0200 	mov.w	r2, #0
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ee4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ee8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eec:	4692      	mov	sl, r2
 8002eee:	469b      	mov	fp, r3
 8002ef0:	4643      	mov	r3, r8
 8002ef2:	eb1a 0303 	adds.w	r3, sl, r3
 8002ef6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002efa:	464b      	mov	r3, r9
 8002efc:	eb4b 0303 	adc.w	r3, fp, r3
 8002f00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	18db      	adds	r3, r3, r3
 8002f1c:	643b      	str	r3, [r7, #64]	; 0x40
 8002f1e:	4613      	mov	r3, r2
 8002f20:	eb42 0303 	adc.w	r3, r2, r3
 8002f24:	647b      	str	r3, [r7, #68]	; 0x44
 8002f26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f2e:	f7fd fe93 	bl	8000c58 <__aeabi_uldivmod>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4611      	mov	r1, r2
 8002f38:	4b3b      	ldr	r3, [pc, #236]	; (8003028 <UART_SetConfig+0x2d4>)
 8002f3a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	2264      	movs	r2, #100	; 0x64
 8002f42:	fb02 f303 	mul.w	r3, r2, r3
 8002f46:	1acb      	subs	r3, r1, r3
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f4e:	4b36      	ldr	r3, [pc, #216]	; (8003028 <UART_SetConfig+0x2d4>)
 8002f50:	fba3 2302 	umull	r2, r3, r3, r2
 8002f54:	095b      	lsrs	r3, r3, #5
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f5c:	441c      	add	r4, r3
 8002f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f62:	2200      	movs	r2, #0
 8002f64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f70:	4642      	mov	r2, r8
 8002f72:	464b      	mov	r3, r9
 8002f74:	1891      	adds	r1, r2, r2
 8002f76:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f78:	415b      	adcs	r3, r3
 8002f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f80:	4641      	mov	r1, r8
 8002f82:	1851      	adds	r1, r2, r1
 8002f84:	6339      	str	r1, [r7, #48]	; 0x30
 8002f86:	4649      	mov	r1, r9
 8002f88:	414b      	adcs	r3, r1
 8002f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f98:	4659      	mov	r1, fp
 8002f9a:	00cb      	lsls	r3, r1, #3
 8002f9c:	4651      	mov	r1, sl
 8002f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fa2:	4651      	mov	r1, sl
 8002fa4:	00ca      	lsls	r2, r1, #3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4603      	mov	r3, r0
 8002fac:	4642      	mov	r2, r8
 8002fae:	189b      	adds	r3, r3, r2
 8002fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fb4:	464b      	mov	r3, r9
 8002fb6:	460a      	mov	r2, r1
 8002fb8:	eb42 0303 	adc.w	r3, r2, r3
 8002fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002fcc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002fd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	18db      	adds	r3, r3, r3
 8002fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fda:	4613      	mov	r3, r2
 8002fdc:	eb42 0303 	adc.w	r3, r2, r3
 8002fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fe2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fe6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002fea:	f7fd fe35 	bl	8000c58 <__aeabi_uldivmod>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <UART_SetConfig+0x2d4>)
 8002ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ff8:	095b      	lsrs	r3, r3, #5
 8002ffa:	2164      	movs	r1, #100	; 0x64
 8002ffc:	fb01 f303 	mul.w	r3, r1, r3
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	3332      	adds	r3, #50	; 0x32
 8003006:	4a08      	ldr	r2, [pc, #32]	; (8003028 <UART_SetConfig+0x2d4>)
 8003008:	fba2 2303 	umull	r2, r3, r2, r3
 800300c:	095b      	lsrs	r3, r3, #5
 800300e:	f003 0207 	and.w	r2, r3, #7
 8003012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4422      	add	r2, r4
 800301a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800301c:	e106      	b.n	800322c <UART_SetConfig+0x4d8>
 800301e:	bf00      	nop
 8003020:	40011000 	.word	0x40011000
 8003024:	40011400 	.word	0x40011400
 8003028:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800302c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003030:	2200      	movs	r2, #0
 8003032:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003036:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800303a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800303e:	4642      	mov	r2, r8
 8003040:	464b      	mov	r3, r9
 8003042:	1891      	adds	r1, r2, r2
 8003044:	6239      	str	r1, [r7, #32]
 8003046:	415b      	adcs	r3, r3
 8003048:	627b      	str	r3, [r7, #36]	; 0x24
 800304a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800304e:	4641      	mov	r1, r8
 8003050:	1854      	adds	r4, r2, r1
 8003052:	4649      	mov	r1, r9
 8003054:	eb43 0501 	adc.w	r5, r3, r1
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	00eb      	lsls	r3, r5, #3
 8003062:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003066:	00e2      	lsls	r2, r4, #3
 8003068:	4614      	mov	r4, r2
 800306a:	461d      	mov	r5, r3
 800306c:	4643      	mov	r3, r8
 800306e:	18e3      	adds	r3, r4, r3
 8003070:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003074:	464b      	mov	r3, r9
 8003076:	eb45 0303 	adc.w	r3, r5, r3
 800307a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800307e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800308a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800309a:	4629      	mov	r1, r5
 800309c:	008b      	lsls	r3, r1, #2
 800309e:	4621      	mov	r1, r4
 80030a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030a4:	4621      	mov	r1, r4
 80030a6:	008a      	lsls	r2, r1, #2
 80030a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80030ac:	f7fd fdd4 	bl	8000c58 <__aeabi_uldivmod>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4b60      	ldr	r3, [pc, #384]	; (8003238 <UART_SetConfig+0x4e4>)
 80030b6:	fba3 2302 	umull	r2, r3, r3, r2
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	011c      	lsls	r4, r3, #4
 80030be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030c2:	2200      	movs	r2, #0
 80030c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80030cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80030d0:	4642      	mov	r2, r8
 80030d2:	464b      	mov	r3, r9
 80030d4:	1891      	adds	r1, r2, r2
 80030d6:	61b9      	str	r1, [r7, #24]
 80030d8:	415b      	adcs	r3, r3
 80030da:	61fb      	str	r3, [r7, #28]
 80030dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030e0:	4641      	mov	r1, r8
 80030e2:	1851      	adds	r1, r2, r1
 80030e4:	6139      	str	r1, [r7, #16]
 80030e6:	4649      	mov	r1, r9
 80030e8:	414b      	adcs	r3, r1
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030f8:	4659      	mov	r1, fp
 80030fa:	00cb      	lsls	r3, r1, #3
 80030fc:	4651      	mov	r1, sl
 80030fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003102:	4651      	mov	r1, sl
 8003104:	00ca      	lsls	r2, r1, #3
 8003106:	4610      	mov	r0, r2
 8003108:	4619      	mov	r1, r3
 800310a:	4603      	mov	r3, r0
 800310c:	4642      	mov	r2, r8
 800310e:	189b      	adds	r3, r3, r2
 8003110:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003114:	464b      	mov	r3, r9
 8003116:	460a      	mov	r2, r1
 8003118:	eb42 0303 	adc.w	r3, r2, r3
 800311c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	67bb      	str	r3, [r7, #120]	; 0x78
 800312a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003138:	4649      	mov	r1, r9
 800313a:	008b      	lsls	r3, r1, #2
 800313c:	4641      	mov	r1, r8
 800313e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003142:	4641      	mov	r1, r8
 8003144:	008a      	lsls	r2, r1, #2
 8003146:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800314a:	f7fd fd85 	bl	8000c58 <__aeabi_uldivmod>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4611      	mov	r1, r2
 8003154:	4b38      	ldr	r3, [pc, #224]	; (8003238 <UART_SetConfig+0x4e4>)
 8003156:	fba3 2301 	umull	r2, r3, r3, r1
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	2264      	movs	r2, #100	; 0x64
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	1acb      	subs	r3, r1, r3
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	3332      	adds	r3, #50	; 0x32
 8003168:	4a33      	ldr	r2, [pc, #204]	; (8003238 <UART_SetConfig+0x4e4>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003174:	441c      	add	r4, r3
 8003176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800317a:	2200      	movs	r2, #0
 800317c:	673b      	str	r3, [r7, #112]	; 0x70
 800317e:	677a      	str	r2, [r7, #116]	; 0x74
 8003180:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003184:	4642      	mov	r2, r8
 8003186:	464b      	mov	r3, r9
 8003188:	1891      	adds	r1, r2, r2
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	415b      	adcs	r3, r3
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003194:	4641      	mov	r1, r8
 8003196:	1851      	adds	r1, r2, r1
 8003198:	6039      	str	r1, [r7, #0]
 800319a:	4649      	mov	r1, r9
 800319c:	414b      	adcs	r3, r1
 800319e:	607b      	str	r3, [r7, #4]
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031ac:	4659      	mov	r1, fp
 80031ae:	00cb      	lsls	r3, r1, #3
 80031b0:	4651      	mov	r1, sl
 80031b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031b6:	4651      	mov	r1, sl
 80031b8:	00ca      	lsls	r2, r1, #3
 80031ba:	4610      	mov	r0, r2
 80031bc:	4619      	mov	r1, r3
 80031be:	4603      	mov	r3, r0
 80031c0:	4642      	mov	r2, r8
 80031c2:	189b      	adds	r3, r3, r2
 80031c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80031c6:	464b      	mov	r3, r9
 80031c8:	460a      	mov	r2, r1
 80031ca:	eb42 0303 	adc.w	r3, r2, r3
 80031ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	663b      	str	r3, [r7, #96]	; 0x60
 80031da:	667a      	str	r2, [r7, #100]	; 0x64
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80031e8:	4649      	mov	r1, r9
 80031ea:	008b      	lsls	r3, r1, #2
 80031ec:	4641      	mov	r1, r8
 80031ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031f2:	4641      	mov	r1, r8
 80031f4:	008a      	lsls	r2, r1, #2
 80031f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031fa:	f7fd fd2d 	bl	8000c58 <__aeabi_uldivmod>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <UART_SetConfig+0x4e4>)
 8003204:	fba3 1302 	umull	r1, r3, r3, r2
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	2164      	movs	r1, #100	; 0x64
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	3332      	adds	r3, #50	; 0x32
 8003216:	4a08      	ldr	r2, [pc, #32]	; (8003238 <UART_SetConfig+0x4e4>)
 8003218:	fba2 2303 	umull	r2, r3, r2, r3
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	f003 020f 	and.w	r2, r3, #15
 8003222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4422      	add	r2, r4
 800322a:	609a      	str	r2, [r3, #8]
}
 800322c:	bf00      	nop
 800322e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003232:	46bd      	mov	sp, r7
 8003234:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003238:	51eb851f 	.word	0x51eb851f

0800323c <__cvt>:
 800323c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003240:	ec55 4b10 	vmov	r4, r5, d0
 8003244:	2d00      	cmp	r5, #0
 8003246:	460e      	mov	r6, r1
 8003248:	4619      	mov	r1, r3
 800324a:	462b      	mov	r3, r5
 800324c:	bfbb      	ittet	lt
 800324e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003252:	461d      	movlt	r5, r3
 8003254:	2300      	movge	r3, #0
 8003256:	232d      	movlt	r3, #45	; 0x2d
 8003258:	700b      	strb	r3, [r1, #0]
 800325a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800325c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003260:	4691      	mov	r9, r2
 8003262:	f023 0820 	bic.w	r8, r3, #32
 8003266:	bfbc      	itt	lt
 8003268:	4622      	movlt	r2, r4
 800326a:	4614      	movlt	r4, r2
 800326c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003270:	d005      	beq.n	800327e <__cvt+0x42>
 8003272:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003276:	d100      	bne.n	800327a <__cvt+0x3e>
 8003278:	3601      	adds	r6, #1
 800327a:	2102      	movs	r1, #2
 800327c:	e000      	b.n	8003280 <__cvt+0x44>
 800327e:	2103      	movs	r1, #3
 8003280:	ab03      	add	r3, sp, #12
 8003282:	9301      	str	r3, [sp, #4]
 8003284:	ab02      	add	r3, sp, #8
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	ec45 4b10 	vmov	d0, r4, r5
 800328c:	4653      	mov	r3, sl
 800328e:	4632      	mov	r2, r6
 8003290:	f000 fe6a 	bl	8003f68 <_dtoa_r>
 8003294:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003298:	4607      	mov	r7, r0
 800329a:	d102      	bne.n	80032a2 <__cvt+0x66>
 800329c:	f019 0f01 	tst.w	r9, #1
 80032a0:	d022      	beq.n	80032e8 <__cvt+0xac>
 80032a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80032a6:	eb07 0906 	add.w	r9, r7, r6
 80032aa:	d110      	bne.n	80032ce <__cvt+0x92>
 80032ac:	783b      	ldrb	r3, [r7, #0]
 80032ae:	2b30      	cmp	r3, #48	; 0x30
 80032b0:	d10a      	bne.n	80032c8 <__cvt+0x8c>
 80032b2:	2200      	movs	r2, #0
 80032b4:	2300      	movs	r3, #0
 80032b6:	4620      	mov	r0, r4
 80032b8:	4629      	mov	r1, r5
 80032ba:	f7fd fc0d 	bl	8000ad8 <__aeabi_dcmpeq>
 80032be:	b918      	cbnz	r0, 80032c8 <__cvt+0x8c>
 80032c0:	f1c6 0601 	rsb	r6, r6, #1
 80032c4:	f8ca 6000 	str.w	r6, [sl]
 80032c8:	f8da 3000 	ldr.w	r3, [sl]
 80032cc:	4499      	add	r9, r3
 80032ce:	2200      	movs	r2, #0
 80032d0:	2300      	movs	r3, #0
 80032d2:	4620      	mov	r0, r4
 80032d4:	4629      	mov	r1, r5
 80032d6:	f7fd fbff 	bl	8000ad8 <__aeabi_dcmpeq>
 80032da:	b108      	cbz	r0, 80032e0 <__cvt+0xa4>
 80032dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80032e0:	2230      	movs	r2, #48	; 0x30
 80032e2:	9b03      	ldr	r3, [sp, #12]
 80032e4:	454b      	cmp	r3, r9
 80032e6:	d307      	bcc.n	80032f8 <__cvt+0xbc>
 80032e8:	9b03      	ldr	r3, [sp, #12]
 80032ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80032ec:	1bdb      	subs	r3, r3, r7
 80032ee:	4638      	mov	r0, r7
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	b004      	add	sp, #16
 80032f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032f8:	1c59      	adds	r1, r3, #1
 80032fa:	9103      	str	r1, [sp, #12]
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	e7f0      	b.n	80032e2 <__cvt+0xa6>

08003300 <__exponent>:
 8003300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003302:	4603      	mov	r3, r0
 8003304:	2900      	cmp	r1, #0
 8003306:	bfb8      	it	lt
 8003308:	4249      	neglt	r1, r1
 800330a:	f803 2b02 	strb.w	r2, [r3], #2
 800330e:	bfb4      	ite	lt
 8003310:	222d      	movlt	r2, #45	; 0x2d
 8003312:	222b      	movge	r2, #43	; 0x2b
 8003314:	2909      	cmp	r1, #9
 8003316:	7042      	strb	r2, [r0, #1]
 8003318:	dd2a      	ble.n	8003370 <__exponent+0x70>
 800331a:	f10d 0207 	add.w	r2, sp, #7
 800331e:	4617      	mov	r7, r2
 8003320:	260a      	movs	r6, #10
 8003322:	4694      	mov	ip, r2
 8003324:	fb91 f5f6 	sdiv	r5, r1, r6
 8003328:	fb06 1415 	mls	r4, r6, r5, r1
 800332c:	3430      	adds	r4, #48	; 0x30
 800332e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003332:	460c      	mov	r4, r1
 8003334:	2c63      	cmp	r4, #99	; 0x63
 8003336:	f102 32ff 	add.w	r2, r2, #4294967295
 800333a:	4629      	mov	r1, r5
 800333c:	dcf1      	bgt.n	8003322 <__exponent+0x22>
 800333e:	3130      	adds	r1, #48	; 0x30
 8003340:	f1ac 0402 	sub.w	r4, ip, #2
 8003344:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003348:	1c41      	adds	r1, r0, #1
 800334a:	4622      	mov	r2, r4
 800334c:	42ba      	cmp	r2, r7
 800334e:	d30a      	bcc.n	8003366 <__exponent+0x66>
 8003350:	f10d 0209 	add.w	r2, sp, #9
 8003354:	eba2 020c 	sub.w	r2, r2, ip
 8003358:	42bc      	cmp	r4, r7
 800335a:	bf88      	it	hi
 800335c:	2200      	movhi	r2, #0
 800335e:	4413      	add	r3, r2
 8003360:	1a18      	subs	r0, r3, r0
 8003362:	b003      	add	sp, #12
 8003364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003366:	f812 5b01 	ldrb.w	r5, [r2], #1
 800336a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800336e:	e7ed      	b.n	800334c <__exponent+0x4c>
 8003370:	2330      	movs	r3, #48	; 0x30
 8003372:	3130      	adds	r1, #48	; 0x30
 8003374:	7083      	strb	r3, [r0, #2]
 8003376:	70c1      	strb	r1, [r0, #3]
 8003378:	1d03      	adds	r3, r0, #4
 800337a:	e7f1      	b.n	8003360 <__exponent+0x60>

0800337c <_printf_float>:
 800337c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003380:	ed2d 8b02 	vpush	{d8}
 8003384:	b08d      	sub	sp, #52	; 0x34
 8003386:	460c      	mov	r4, r1
 8003388:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800338c:	4616      	mov	r6, r2
 800338e:	461f      	mov	r7, r3
 8003390:	4605      	mov	r5, r0
 8003392:	f000 fce7 	bl	8003d64 <_localeconv_r>
 8003396:	f8d0 a000 	ldr.w	sl, [r0]
 800339a:	4650      	mov	r0, sl
 800339c:	f7fc ff70 	bl	8000280 <strlen>
 80033a0:	2300      	movs	r3, #0
 80033a2:	930a      	str	r3, [sp, #40]	; 0x28
 80033a4:	6823      	ldr	r3, [r4, #0]
 80033a6:	9305      	str	r3, [sp, #20]
 80033a8:	f8d8 3000 	ldr.w	r3, [r8]
 80033ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80033b0:	3307      	adds	r3, #7
 80033b2:	f023 0307 	bic.w	r3, r3, #7
 80033b6:	f103 0208 	add.w	r2, r3, #8
 80033ba:	f8c8 2000 	str.w	r2, [r8]
 80033be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80033c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80033c6:	9307      	str	r3, [sp, #28]
 80033c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80033cc:	ee08 0a10 	vmov	s16, r0
 80033d0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80033d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80033d8:	4b9e      	ldr	r3, [pc, #632]	; (8003654 <_printf_float+0x2d8>)
 80033da:	f04f 32ff 	mov.w	r2, #4294967295
 80033de:	f7fd fbad 	bl	8000b3c <__aeabi_dcmpun>
 80033e2:	bb88      	cbnz	r0, 8003448 <_printf_float+0xcc>
 80033e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80033e8:	4b9a      	ldr	r3, [pc, #616]	; (8003654 <_printf_float+0x2d8>)
 80033ea:	f04f 32ff 	mov.w	r2, #4294967295
 80033ee:	f7fd fb87 	bl	8000b00 <__aeabi_dcmple>
 80033f2:	bb48      	cbnz	r0, 8003448 <_printf_float+0xcc>
 80033f4:	2200      	movs	r2, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	4640      	mov	r0, r8
 80033fa:	4649      	mov	r1, r9
 80033fc:	f7fd fb76 	bl	8000aec <__aeabi_dcmplt>
 8003400:	b110      	cbz	r0, 8003408 <_printf_float+0x8c>
 8003402:	232d      	movs	r3, #45	; 0x2d
 8003404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003408:	4a93      	ldr	r2, [pc, #588]	; (8003658 <_printf_float+0x2dc>)
 800340a:	4b94      	ldr	r3, [pc, #592]	; (800365c <_printf_float+0x2e0>)
 800340c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003410:	bf94      	ite	ls
 8003412:	4690      	movls	r8, r2
 8003414:	4698      	movhi	r8, r3
 8003416:	2303      	movs	r3, #3
 8003418:	6123      	str	r3, [r4, #16]
 800341a:	9b05      	ldr	r3, [sp, #20]
 800341c:	f023 0304 	bic.w	r3, r3, #4
 8003420:	6023      	str	r3, [r4, #0]
 8003422:	f04f 0900 	mov.w	r9, #0
 8003426:	9700      	str	r7, [sp, #0]
 8003428:	4633      	mov	r3, r6
 800342a:	aa0b      	add	r2, sp, #44	; 0x2c
 800342c:	4621      	mov	r1, r4
 800342e:	4628      	mov	r0, r5
 8003430:	f000 f9da 	bl	80037e8 <_printf_common>
 8003434:	3001      	adds	r0, #1
 8003436:	f040 8090 	bne.w	800355a <_printf_float+0x1de>
 800343a:	f04f 30ff 	mov.w	r0, #4294967295
 800343e:	b00d      	add	sp, #52	; 0x34
 8003440:	ecbd 8b02 	vpop	{d8}
 8003444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003448:	4642      	mov	r2, r8
 800344a:	464b      	mov	r3, r9
 800344c:	4640      	mov	r0, r8
 800344e:	4649      	mov	r1, r9
 8003450:	f7fd fb74 	bl	8000b3c <__aeabi_dcmpun>
 8003454:	b140      	cbz	r0, 8003468 <_printf_float+0xec>
 8003456:	464b      	mov	r3, r9
 8003458:	2b00      	cmp	r3, #0
 800345a:	bfbc      	itt	lt
 800345c:	232d      	movlt	r3, #45	; 0x2d
 800345e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003462:	4a7f      	ldr	r2, [pc, #508]	; (8003660 <_printf_float+0x2e4>)
 8003464:	4b7f      	ldr	r3, [pc, #508]	; (8003664 <_printf_float+0x2e8>)
 8003466:	e7d1      	b.n	800340c <_printf_float+0x90>
 8003468:	6863      	ldr	r3, [r4, #4]
 800346a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800346e:	9206      	str	r2, [sp, #24]
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	d13f      	bne.n	80034f4 <_printf_float+0x178>
 8003474:	2306      	movs	r3, #6
 8003476:	6063      	str	r3, [r4, #4]
 8003478:	9b05      	ldr	r3, [sp, #20]
 800347a:	6861      	ldr	r1, [r4, #4]
 800347c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003480:	2300      	movs	r3, #0
 8003482:	9303      	str	r3, [sp, #12]
 8003484:	ab0a      	add	r3, sp, #40	; 0x28
 8003486:	e9cd b301 	strd	fp, r3, [sp, #4]
 800348a:	ab09      	add	r3, sp, #36	; 0x24
 800348c:	ec49 8b10 	vmov	d0, r8, r9
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	6022      	str	r2, [r4, #0]
 8003494:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003498:	4628      	mov	r0, r5
 800349a:	f7ff fecf 	bl	800323c <__cvt>
 800349e:	9b06      	ldr	r3, [sp, #24]
 80034a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80034a2:	2b47      	cmp	r3, #71	; 0x47
 80034a4:	4680      	mov	r8, r0
 80034a6:	d108      	bne.n	80034ba <_printf_float+0x13e>
 80034a8:	1cc8      	adds	r0, r1, #3
 80034aa:	db02      	blt.n	80034b2 <_printf_float+0x136>
 80034ac:	6863      	ldr	r3, [r4, #4]
 80034ae:	4299      	cmp	r1, r3
 80034b0:	dd41      	ble.n	8003536 <_printf_float+0x1ba>
 80034b2:	f1ab 0302 	sub.w	r3, fp, #2
 80034b6:	fa5f fb83 	uxtb.w	fp, r3
 80034ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80034be:	d820      	bhi.n	8003502 <_printf_float+0x186>
 80034c0:	3901      	subs	r1, #1
 80034c2:	465a      	mov	r2, fp
 80034c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80034c8:	9109      	str	r1, [sp, #36]	; 0x24
 80034ca:	f7ff ff19 	bl	8003300 <__exponent>
 80034ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034d0:	1813      	adds	r3, r2, r0
 80034d2:	2a01      	cmp	r2, #1
 80034d4:	4681      	mov	r9, r0
 80034d6:	6123      	str	r3, [r4, #16]
 80034d8:	dc02      	bgt.n	80034e0 <_printf_float+0x164>
 80034da:	6822      	ldr	r2, [r4, #0]
 80034dc:	07d2      	lsls	r2, r2, #31
 80034de:	d501      	bpl.n	80034e4 <_printf_float+0x168>
 80034e0:	3301      	adds	r3, #1
 80034e2:	6123      	str	r3, [r4, #16]
 80034e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d09c      	beq.n	8003426 <_printf_float+0xaa>
 80034ec:	232d      	movs	r3, #45	; 0x2d
 80034ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034f2:	e798      	b.n	8003426 <_printf_float+0xaa>
 80034f4:	9a06      	ldr	r2, [sp, #24]
 80034f6:	2a47      	cmp	r2, #71	; 0x47
 80034f8:	d1be      	bne.n	8003478 <_printf_float+0xfc>
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1bc      	bne.n	8003478 <_printf_float+0xfc>
 80034fe:	2301      	movs	r3, #1
 8003500:	e7b9      	b.n	8003476 <_printf_float+0xfa>
 8003502:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003506:	d118      	bne.n	800353a <_printf_float+0x1be>
 8003508:	2900      	cmp	r1, #0
 800350a:	6863      	ldr	r3, [r4, #4]
 800350c:	dd0b      	ble.n	8003526 <_printf_float+0x1aa>
 800350e:	6121      	str	r1, [r4, #16]
 8003510:	b913      	cbnz	r3, 8003518 <_printf_float+0x19c>
 8003512:	6822      	ldr	r2, [r4, #0]
 8003514:	07d0      	lsls	r0, r2, #31
 8003516:	d502      	bpl.n	800351e <_printf_float+0x1a2>
 8003518:	3301      	adds	r3, #1
 800351a:	440b      	add	r3, r1
 800351c:	6123      	str	r3, [r4, #16]
 800351e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003520:	f04f 0900 	mov.w	r9, #0
 8003524:	e7de      	b.n	80034e4 <_printf_float+0x168>
 8003526:	b913      	cbnz	r3, 800352e <_printf_float+0x1b2>
 8003528:	6822      	ldr	r2, [r4, #0]
 800352a:	07d2      	lsls	r2, r2, #31
 800352c:	d501      	bpl.n	8003532 <_printf_float+0x1b6>
 800352e:	3302      	adds	r3, #2
 8003530:	e7f4      	b.n	800351c <_printf_float+0x1a0>
 8003532:	2301      	movs	r3, #1
 8003534:	e7f2      	b.n	800351c <_printf_float+0x1a0>
 8003536:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800353a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800353c:	4299      	cmp	r1, r3
 800353e:	db05      	blt.n	800354c <_printf_float+0x1d0>
 8003540:	6823      	ldr	r3, [r4, #0]
 8003542:	6121      	str	r1, [r4, #16]
 8003544:	07d8      	lsls	r0, r3, #31
 8003546:	d5ea      	bpl.n	800351e <_printf_float+0x1a2>
 8003548:	1c4b      	adds	r3, r1, #1
 800354a:	e7e7      	b.n	800351c <_printf_float+0x1a0>
 800354c:	2900      	cmp	r1, #0
 800354e:	bfd4      	ite	le
 8003550:	f1c1 0202 	rsble	r2, r1, #2
 8003554:	2201      	movgt	r2, #1
 8003556:	4413      	add	r3, r2
 8003558:	e7e0      	b.n	800351c <_printf_float+0x1a0>
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	055a      	lsls	r2, r3, #21
 800355e:	d407      	bmi.n	8003570 <_printf_float+0x1f4>
 8003560:	6923      	ldr	r3, [r4, #16]
 8003562:	4642      	mov	r2, r8
 8003564:	4631      	mov	r1, r6
 8003566:	4628      	mov	r0, r5
 8003568:	47b8      	blx	r7
 800356a:	3001      	adds	r0, #1
 800356c:	d12c      	bne.n	80035c8 <_printf_float+0x24c>
 800356e:	e764      	b.n	800343a <_printf_float+0xbe>
 8003570:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003574:	f240 80e0 	bls.w	8003738 <_printf_float+0x3bc>
 8003578:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800357c:	2200      	movs	r2, #0
 800357e:	2300      	movs	r3, #0
 8003580:	f7fd faaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8003584:	2800      	cmp	r0, #0
 8003586:	d034      	beq.n	80035f2 <_printf_float+0x276>
 8003588:	4a37      	ldr	r2, [pc, #220]	; (8003668 <_printf_float+0x2ec>)
 800358a:	2301      	movs	r3, #1
 800358c:	4631      	mov	r1, r6
 800358e:	4628      	mov	r0, r5
 8003590:	47b8      	blx	r7
 8003592:	3001      	adds	r0, #1
 8003594:	f43f af51 	beq.w	800343a <_printf_float+0xbe>
 8003598:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800359c:	429a      	cmp	r2, r3
 800359e:	db02      	blt.n	80035a6 <_printf_float+0x22a>
 80035a0:	6823      	ldr	r3, [r4, #0]
 80035a2:	07d8      	lsls	r0, r3, #31
 80035a4:	d510      	bpl.n	80035c8 <_printf_float+0x24c>
 80035a6:	ee18 3a10 	vmov	r3, s16
 80035aa:	4652      	mov	r2, sl
 80035ac:	4631      	mov	r1, r6
 80035ae:	4628      	mov	r0, r5
 80035b0:	47b8      	blx	r7
 80035b2:	3001      	adds	r0, #1
 80035b4:	f43f af41 	beq.w	800343a <_printf_float+0xbe>
 80035b8:	f04f 0800 	mov.w	r8, #0
 80035bc:	f104 091a 	add.w	r9, r4, #26
 80035c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035c2:	3b01      	subs	r3, #1
 80035c4:	4543      	cmp	r3, r8
 80035c6:	dc09      	bgt.n	80035dc <_printf_float+0x260>
 80035c8:	6823      	ldr	r3, [r4, #0]
 80035ca:	079b      	lsls	r3, r3, #30
 80035cc:	f100 8107 	bmi.w	80037de <_printf_float+0x462>
 80035d0:	68e0      	ldr	r0, [r4, #12]
 80035d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80035d4:	4298      	cmp	r0, r3
 80035d6:	bfb8      	it	lt
 80035d8:	4618      	movlt	r0, r3
 80035da:	e730      	b.n	800343e <_printf_float+0xc2>
 80035dc:	2301      	movs	r3, #1
 80035de:	464a      	mov	r2, r9
 80035e0:	4631      	mov	r1, r6
 80035e2:	4628      	mov	r0, r5
 80035e4:	47b8      	blx	r7
 80035e6:	3001      	adds	r0, #1
 80035e8:	f43f af27 	beq.w	800343a <_printf_float+0xbe>
 80035ec:	f108 0801 	add.w	r8, r8, #1
 80035f0:	e7e6      	b.n	80035c0 <_printf_float+0x244>
 80035f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	dc39      	bgt.n	800366c <_printf_float+0x2f0>
 80035f8:	4a1b      	ldr	r2, [pc, #108]	; (8003668 <_printf_float+0x2ec>)
 80035fa:	2301      	movs	r3, #1
 80035fc:	4631      	mov	r1, r6
 80035fe:	4628      	mov	r0, r5
 8003600:	47b8      	blx	r7
 8003602:	3001      	adds	r0, #1
 8003604:	f43f af19 	beq.w	800343a <_printf_float+0xbe>
 8003608:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800360c:	4313      	orrs	r3, r2
 800360e:	d102      	bne.n	8003616 <_printf_float+0x29a>
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	07d9      	lsls	r1, r3, #31
 8003614:	d5d8      	bpl.n	80035c8 <_printf_float+0x24c>
 8003616:	ee18 3a10 	vmov	r3, s16
 800361a:	4652      	mov	r2, sl
 800361c:	4631      	mov	r1, r6
 800361e:	4628      	mov	r0, r5
 8003620:	47b8      	blx	r7
 8003622:	3001      	adds	r0, #1
 8003624:	f43f af09 	beq.w	800343a <_printf_float+0xbe>
 8003628:	f04f 0900 	mov.w	r9, #0
 800362c:	f104 0a1a 	add.w	sl, r4, #26
 8003630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003632:	425b      	negs	r3, r3
 8003634:	454b      	cmp	r3, r9
 8003636:	dc01      	bgt.n	800363c <_printf_float+0x2c0>
 8003638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800363a:	e792      	b.n	8003562 <_printf_float+0x1e6>
 800363c:	2301      	movs	r3, #1
 800363e:	4652      	mov	r2, sl
 8003640:	4631      	mov	r1, r6
 8003642:	4628      	mov	r0, r5
 8003644:	47b8      	blx	r7
 8003646:	3001      	adds	r0, #1
 8003648:	f43f aef7 	beq.w	800343a <_printf_float+0xbe>
 800364c:	f109 0901 	add.w	r9, r9, #1
 8003650:	e7ee      	b.n	8003630 <_printf_float+0x2b4>
 8003652:	bf00      	nop
 8003654:	7fefffff 	.word	0x7fefffff
 8003658:	08006750 	.word	0x08006750
 800365c:	08006754 	.word	0x08006754
 8003660:	08006758 	.word	0x08006758
 8003664:	0800675c 	.word	0x0800675c
 8003668:	08006760 	.word	0x08006760
 800366c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800366e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003670:	429a      	cmp	r2, r3
 8003672:	bfa8      	it	ge
 8003674:	461a      	movge	r2, r3
 8003676:	2a00      	cmp	r2, #0
 8003678:	4691      	mov	r9, r2
 800367a:	dc37      	bgt.n	80036ec <_printf_float+0x370>
 800367c:	f04f 0b00 	mov.w	fp, #0
 8003680:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003684:	f104 021a 	add.w	r2, r4, #26
 8003688:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800368a:	9305      	str	r3, [sp, #20]
 800368c:	eba3 0309 	sub.w	r3, r3, r9
 8003690:	455b      	cmp	r3, fp
 8003692:	dc33      	bgt.n	80036fc <_printf_float+0x380>
 8003694:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003698:	429a      	cmp	r2, r3
 800369a:	db3b      	blt.n	8003714 <_printf_float+0x398>
 800369c:	6823      	ldr	r3, [r4, #0]
 800369e:	07da      	lsls	r2, r3, #31
 80036a0:	d438      	bmi.n	8003714 <_printf_float+0x398>
 80036a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80036a6:	eba2 0903 	sub.w	r9, r2, r3
 80036aa:	9b05      	ldr	r3, [sp, #20]
 80036ac:	1ad2      	subs	r2, r2, r3
 80036ae:	4591      	cmp	r9, r2
 80036b0:	bfa8      	it	ge
 80036b2:	4691      	movge	r9, r2
 80036b4:	f1b9 0f00 	cmp.w	r9, #0
 80036b8:	dc35      	bgt.n	8003726 <_printf_float+0x3aa>
 80036ba:	f04f 0800 	mov.w	r8, #0
 80036be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036c2:	f104 0a1a 	add.w	sl, r4, #26
 80036c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	eba3 0309 	sub.w	r3, r3, r9
 80036d0:	4543      	cmp	r3, r8
 80036d2:	f77f af79 	ble.w	80035c8 <_printf_float+0x24c>
 80036d6:	2301      	movs	r3, #1
 80036d8:	4652      	mov	r2, sl
 80036da:	4631      	mov	r1, r6
 80036dc:	4628      	mov	r0, r5
 80036de:	47b8      	blx	r7
 80036e0:	3001      	adds	r0, #1
 80036e2:	f43f aeaa 	beq.w	800343a <_printf_float+0xbe>
 80036e6:	f108 0801 	add.w	r8, r8, #1
 80036ea:	e7ec      	b.n	80036c6 <_printf_float+0x34a>
 80036ec:	4613      	mov	r3, r2
 80036ee:	4631      	mov	r1, r6
 80036f0:	4642      	mov	r2, r8
 80036f2:	4628      	mov	r0, r5
 80036f4:	47b8      	blx	r7
 80036f6:	3001      	adds	r0, #1
 80036f8:	d1c0      	bne.n	800367c <_printf_float+0x300>
 80036fa:	e69e      	b.n	800343a <_printf_float+0xbe>
 80036fc:	2301      	movs	r3, #1
 80036fe:	4631      	mov	r1, r6
 8003700:	4628      	mov	r0, r5
 8003702:	9205      	str	r2, [sp, #20]
 8003704:	47b8      	blx	r7
 8003706:	3001      	adds	r0, #1
 8003708:	f43f ae97 	beq.w	800343a <_printf_float+0xbe>
 800370c:	9a05      	ldr	r2, [sp, #20]
 800370e:	f10b 0b01 	add.w	fp, fp, #1
 8003712:	e7b9      	b.n	8003688 <_printf_float+0x30c>
 8003714:	ee18 3a10 	vmov	r3, s16
 8003718:	4652      	mov	r2, sl
 800371a:	4631      	mov	r1, r6
 800371c:	4628      	mov	r0, r5
 800371e:	47b8      	blx	r7
 8003720:	3001      	adds	r0, #1
 8003722:	d1be      	bne.n	80036a2 <_printf_float+0x326>
 8003724:	e689      	b.n	800343a <_printf_float+0xbe>
 8003726:	9a05      	ldr	r2, [sp, #20]
 8003728:	464b      	mov	r3, r9
 800372a:	4442      	add	r2, r8
 800372c:	4631      	mov	r1, r6
 800372e:	4628      	mov	r0, r5
 8003730:	47b8      	blx	r7
 8003732:	3001      	adds	r0, #1
 8003734:	d1c1      	bne.n	80036ba <_printf_float+0x33e>
 8003736:	e680      	b.n	800343a <_printf_float+0xbe>
 8003738:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800373a:	2a01      	cmp	r2, #1
 800373c:	dc01      	bgt.n	8003742 <_printf_float+0x3c6>
 800373e:	07db      	lsls	r3, r3, #31
 8003740:	d53a      	bpl.n	80037b8 <_printf_float+0x43c>
 8003742:	2301      	movs	r3, #1
 8003744:	4642      	mov	r2, r8
 8003746:	4631      	mov	r1, r6
 8003748:	4628      	mov	r0, r5
 800374a:	47b8      	blx	r7
 800374c:	3001      	adds	r0, #1
 800374e:	f43f ae74 	beq.w	800343a <_printf_float+0xbe>
 8003752:	ee18 3a10 	vmov	r3, s16
 8003756:	4652      	mov	r2, sl
 8003758:	4631      	mov	r1, r6
 800375a:	4628      	mov	r0, r5
 800375c:	47b8      	blx	r7
 800375e:	3001      	adds	r0, #1
 8003760:	f43f ae6b 	beq.w	800343a <_printf_float+0xbe>
 8003764:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003768:	2200      	movs	r2, #0
 800376a:	2300      	movs	r3, #0
 800376c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003770:	f7fd f9b2 	bl	8000ad8 <__aeabi_dcmpeq>
 8003774:	b9d8      	cbnz	r0, 80037ae <_printf_float+0x432>
 8003776:	f10a 33ff 	add.w	r3, sl, #4294967295
 800377a:	f108 0201 	add.w	r2, r8, #1
 800377e:	4631      	mov	r1, r6
 8003780:	4628      	mov	r0, r5
 8003782:	47b8      	blx	r7
 8003784:	3001      	adds	r0, #1
 8003786:	d10e      	bne.n	80037a6 <_printf_float+0x42a>
 8003788:	e657      	b.n	800343a <_printf_float+0xbe>
 800378a:	2301      	movs	r3, #1
 800378c:	4652      	mov	r2, sl
 800378e:	4631      	mov	r1, r6
 8003790:	4628      	mov	r0, r5
 8003792:	47b8      	blx	r7
 8003794:	3001      	adds	r0, #1
 8003796:	f43f ae50 	beq.w	800343a <_printf_float+0xbe>
 800379a:	f108 0801 	add.w	r8, r8, #1
 800379e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037a0:	3b01      	subs	r3, #1
 80037a2:	4543      	cmp	r3, r8
 80037a4:	dcf1      	bgt.n	800378a <_printf_float+0x40e>
 80037a6:	464b      	mov	r3, r9
 80037a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80037ac:	e6da      	b.n	8003564 <_printf_float+0x1e8>
 80037ae:	f04f 0800 	mov.w	r8, #0
 80037b2:	f104 0a1a 	add.w	sl, r4, #26
 80037b6:	e7f2      	b.n	800379e <_printf_float+0x422>
 80037b8:	2301      	movs	r3, #1
 80037ba:	4642      	mov	r2, r8
 80037bc:	e7df      	b.n	800377e <_printf_float+0x402>
 80037be:	2301      	movs	r3, #1
 80037c0:	464a      	mov	r2, r9
 80037c2:	4631      	mov	r1, r6
 80037c4:	4628      	mov	r0, r5
 80037c6:	47b8      	blx	r7
 80037c8:	3001      	adds	r0, #1
 80037ca:	f43f ae36 	beq.w	800343a <_printf_float+0xbe>
 80037ce:	f108 0801 	add.w	r8, r8, #1
 80037d2:	68e3      	ldr	r3, [r4, #12]
 80037d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80037d6:	1a5b      	subs	r3, r3, r1
 80037d8:	4543      	cmp	r3, r8
 80037da:	dcf0      	bgt.n	80037be <_printf_float+0x442>
 80037dc:	e6f8      	b.n	80035d0 <_printf_float+0x254>
 80037de:	f04f 0800 	mov.w	r8, #0
 80037e2:	f104 0919 	add.w	r9, r4, #25
 80037e6:	e7f4      	b.n	80037d2 <_printf_float+0x456>

080037e8 <_printf_common>:
 80037e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037ec:	4616      	mov	r6, r2
 80037ee:	4699      	mov	r9, r3
 80037f0:	688a      	ldr	r2, [r1, #8]
 80037f2:	690b      	ldr	r3, [r1, #16]
 80037f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037f8:	4293      	cmp	r3, r2
 80037fa:	bfb8      	it	lt
 80037fc:	4613      	movlt	r3, r2
 80037fe:	6033      	str	r3, [r6, #0]
 8003800:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003804:	4607      	mov	r7, r0
 8003806:	460c      	mov	r4, r1
 8003808:	b10a      	cbz	r2, 800380e <_printf_common+0x26>
 800380a:	3301      	adds	r3, #1
 800380c:	6033      	str	r3, [r6, #0]
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	0699      	lsls	r1, r3, #26
 8003812:	bf42      	ittt	mi
 8003814:	6833      	ldrmi	r3, [r6, #0]
 8003816:	3302      	addmi	r3, #2
 8003818:	6033      	strmi	r3, [r6, #0]
 800381a:	6825      	ldr	r5, [r4, #0]
 800381c:	f015 0506 	ands.w	r5, r5, #6
 8003820:	d106      	bne.n	8003830 <_printf_common+0x48>
 8003822:	f104 0a19 	add.w	sl, r4, #25
 8003826:	68e3      	ldr	r3, [r4, #12]
 8003828:	6832      	ldr	r2, [r6, #0]
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	42ab      	cmp	r3, r5
 800382e:	dc26      	bgt.n	800387e <_printf_common+0x96>
 8003830:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003834:	1e13      	subs	r3, r2, #0
 8003836:	6822      	ldr	r2, [r4, #0]
 8003838:	bf18      	it	ne
 800383a:	2301      	movne	r3, #1
 800383c:	0692      	lsls	r2, r2, #26
 800383e:	d42b      	bmi.n	8003898 <_printf_common+0xb0>
 8003840:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003844:	4649      	mov	r1, r9
 8003846:	4638      	mov	r0, r7
 8003848:	47c0      	blx	r8
 800384a:	3001      	adds	r0, #1
 800384c:	d01e      	beq.n	800388c <_printf_common+0xa4>
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	6922      	ldr	r2, [r4, #16]
 8003852:	f003 0306 	and.w	r3, r3, #6
 8003856:	2b04      	cmp	r3, #4
 8003858:	bf02      	ittt	eq
 800385a:	68e5      	ldreq	r5, [r4, #12]
 800385c:	6833      	ldreq	r3, [r6, #0]
 800385e:	1aed      	subeq	r5, r5, r3
 8003860:	68a3      	ldr	r3, [r4, #8]
 8003862:	bf0c      	ite	eq
 8003864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003868:	2500      	movne	r5, #0
 800386a:	4293      	cmp	r3, r2
 800386c:	bfc4      	itt	gt
 800386e:	1a9b      	subgt	r3, r3, r2
 8003870:	18ed      	addgt	r5, r5, r3
 8003872:	2600      	movs	r6, #0
 8003874:	341a      	adds	r4, #26
 8003876:	42b5      	cmp	r5, r6
 8003878:	d11a      	bne.n	80038b0 <_printf_common+0xc8>
 800387a:	2000      	movs	r0, #0
 800387c:	e008      	b.n	8003890 <_printf_common+0xa8>
 800387e:	2301      	movs	r3, #1
 8003880:	4652      	mov	r2, sl
 8003882:	4649      	mov	r1, r9
 8003884:	4638      	mov	r0, r7
 8003886:	47c0      	blx	r8
 8003888:	3001      	adds	r0, #1
 800388a:	d103      	bne.n	8003894 <_printf_common+0xac>
 800388c:	f04f 30ff 	mov.w	r0, #4294967295
 8003890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003894:	3501      	adds	r5, #1
 8003896:	e7c6      	b.n	8003826 <_printf_common+0x3e>
 8003898:	18e1      	adds	r1, r4, r3
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	2030      	movs	r0, #48	; 0x30
 800389e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038a2:	4422      	add	r2, r4
 80038a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038ac:	3302      	adds	r3, #2
 80038ae:	e7c7      	b.n	8003840 <_printf_common+0x58>
 80038b0:	2301      	movs	r3, #1
 80038b2:	4622      	mov	r2, r4
 80038b4:	4649      	mov	r1, r9
 80038b6:	4638      	mov	r0, r7
 80038b8:	47c0      	blx	r8
 80038ba:	3001      	adds	r0, #1
 80038bc:	d0e6      	beq.n	800388c <_printf_common+0xa4>
 80038be:	3601      	adds	r6, #1
 80038c0:	e7d9      	b.n	8003876 <_printf_common+0x8e>
	...

080038c4 <_printf_i>:
 80038c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038c8:	7e0f      	ldrb	r7, [r1, #24]
 80038ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80038cc:	2f78      	cmp	r7, #120	; 0x78
 80038ce:	4691      	mov	r9, r2
 80038d0:	4680      	mov	r8, r0
 80038d2:	460c      	mov	r4, r1
 80038d4:	469a      	mov	sl, r3
 80038d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80038da:	d807      	bhi.n	80038ec <_printf_i+0x28>
 80038dc:	2f62      	cmp	r7, #98	; 0x62
 80038de:	d80a      	bhi.n	80038f6 <_printf_i+0x32>
 80038e0:	2f00      	cmp	r7, #0
 80038e2:	f000 80d4 	beq.w	8003a8e <_printf_i+0x1ca>
 80038e6:	2f58      	cmp	r7, #88	; 0x58
 80038e8:	f000 80c0 	beq.w	8003a6c <_printf_i+0x1a8>
 80038ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038f4:	e03a      	b.n	800396c <_printf_i+0xa8>
 80038f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038fa:	2b15      	cmp	r3, #21
 80038fc:	d8f6      	bhi.n	80038ec <_printf_i+0x28>
 80038fe:	a101      	add	r1, pc, #4	; (adr r1, 8003904 <_printf_i+0x40>)
 8003900:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003904:	0800395d 	.word	0x0800395d
 8003908:	08003971 	.word	0x08003971
 800390c:	080038ed 	.word	0x080038ed
 8003910:	080038ed 	.word	0x080038ed
 8003914:	080038ed 	.word	0x080038ed
 8003918:	080038ed 	.word	0x080038ed
 800391c:	08003971 	.word	0x08003971
 8003920:	080038ed 	.word	0x080038ed
 8003924:	080038ed 	.word	0x080038ed
 8003928:	080038ed 	.word	0x080038ed
 800392c:	080038ed 	.word	0x080038ed
 8003930:	08003a75 	.word	0x08003a75
 8003934:	0800399d 	.word	0x0800399d
 8003938:	08003a2f 	.word	0x08003a2f
 800393c:	080038ed 	.word	0x080038ed
 8003940:	080038ed 	.word	0x080038ed
 8003944:	08003a97 	.word	0x08003a97
 8003948:	080038ed 	.word	0x080038ed
 800394c:	0800399d 	.word	0x0800399d
 8003950:	080038ed 	.word	0x080038ed
 8003954:	080038ed 	.word	0x080038ed
 8003958:	08003a37 	.word	0x08003a37
 800395c:	682b      	ldr	r3, [r5, #0]
 800395e:	1d1a      	adds	r2, r3, #4
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	602a      	str	r2, [r5, #0]
 8003964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800396c:	2301      	movs	r3, #1
 800396e:	e09f      	b.n	8003ab0 <_printf_i+0x1ec>
 8003970:	6820      	ldr	r0, [r4, #0]
 8003972:	682b      	ldr	r3, [r5, #0]
 8003974:	0607      	lsls	r7, r0, #24
 8003976:	f103 0104 	add.w	r1, r3, #4
 800397a:	6029      	str	r1, [r5, #0]
 800397c:	d501      	bpl.n	8003982 <_printf_i+0xbe>
 800397e:	681e      	ldr	r6, [r3, #0]
 8003980:	e003      	b.n	800398a <_printf_i+0xc6>
 8003982:	0646      	lsls	r6, r0, #25
 8003984:	d5fb      	bpl.n	800397e <_printf_i+0xba>
 8003986:	f9b3 6000 	ldrsh.w	r6, [r3]
 800398a:	2e00      	cmp	r6, #0
 800398c:	da03      	bge.n	8003996 <_printf_i+0xd2>
 800398e:	232d      	movs	r3, #45	; 0x2d
 8003990:	4276      	negs	r6, r6
 8003992:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003996:	485a      	ldr	r0, [pc, #360]	; (8003b00 <_printf_i+0x23c>)
 8003998:	230a      	movs	r3, #10
 800399a:	e012      	b.n	80039c2 <_printf_i+0xfe>
 800399c:	682b      	ldr	r3, [r5, #0]
 800399e:	6820      	ldr	r0, [r4, #0]
 80039a0:	1d19      	adds	r1, r3, #4
 80039a2:	6029      	str	r1, [r5, #0]
 80039a4:	0605      	lsls	r5, r0, #24
 80039a6:	d501      	bpl.n	80039ac <_printf_i+0xe8>
 80039a8:	681e      	ldr	r6, [r3, #0]
 80039aa:	e002      	b.n	80039b2 <_printf_i+0xee>
 80039ac:	0641      	lsls	r1, r0, #25
 80039ae:	d5fb      	bpl.n	80039a8 <_printf_i+0xe4>
 80039b0:	881e      	ldrh	r6, [r3, #0]
 80039b2:	4853      	ldr	r0, [pc, #332]	; (8003b00 <_printf_i+0x23c>)
 80039b4:	2f6f      	cmp	r7, #111	; 0x6f
 80039b6:	bf0c      	ite	eq
 80039b8:	2308      	moveq	r3, #8
 80039ba:	230a      	movne	r3, #10
 80039bc:	2100      	movs	r1, #0
 80039be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039c2:	6865      	ldr	r5, [r4, #4]
 80039c4:	60a5      	str	r5, [r4, #8]
 80039c6:	2d00      	cmp	r5, #0
 80039c8:	bfa2      	ittt	ge
 80039ca:	6821      	ldrge	r1, [r4, #0]
 80039cc:	f021 0104 	bicge.w	r1, r1, #4
 80039d0:	6021      	strge	r1, [r4, #0]
 80039d2:	b90e      	cbnz	r6, 80039d8 <_printf_i+0x114>
 80039d4:	2d00      	cmp	r5, #0
 80039d6:	d04b      	beq.n	8003a70 <_printf_i+0x1ac>
 80039d8:	4615      	mov	r5, r2
 80039da:	fbb6 f1f3 	udiv	r1, r6, r3
 80039de:	fb03 6711 	mls	r7, r3, r1, r6
 80039e2:	5dc7      	ldrb	r7, [r0, r7]
 80039e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80039e8:	4637      	mov	r7, r6
 80039ea:	42bb      	cmp	r3, r7
 80039ec:	460e      	mov	r6, r1
 80039ee:	d9f4      	bls.n	80039da <_printf_i+0x116>
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d10b      	bne.n	8003a0c <_printf_i+0x148>
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	07de      	lsls	r6, r3, #31
 80039f8:	d508      	bpl.n	8003a0c <_printf_i+0x148>
 80039fa:	6923      	ldr	r3, [r4, #16]
 80039fc:	6861      	ldr	r1, [r4, #4]
 80039fe:	4299      	cmp	r1, r3
 8003a00:	bfde      	ittt	le
 8003a02:	2330      	movle	r3, #48	; 0x30
 8003a04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a0c:	1b52      	subs	r2, r2, r5
 8003a0e:	6122      	str	r2, [r4, #16]
 8003a10:	f8cd a000 	str.w	sl, [sp]
 8003a14:	464b      	mov	r3, r9
 8003a16:	aa03      	add	r2, sp, #12
 8003a18:	4621      	mov	r1, r4
 8003a1a:	4640      	mov	r0, r8
 8003a1c:	f7ff fee4 	bl	80037e8 <_printf_common>
 8003a20:	3001      	adds	r0, #1
 8003a22:	d14a      	bne.n	8003aba <_printf_i+0x1f6>
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295
 8003a28:	b004      	add	sp, #16
 8003a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	f043 0320 	orr.w	r3, r3, #32
 8003a34:	6023      	str	r3, [r4, #0]
 8003a36:	4833      	ldr	r0, [pc, #204]	; (8003b04 <_printf_i+0x240>)
 8003a38:	2778      	movs	r7, #120	; 0x78
 8003a3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	6829      	ldr	r1, [r5, #0]
 8003a42:	061f      	lsls	r7, r3, #24
 8003a44:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a48:	d402      	bmi.n	8003a50 <_printf_i+0x18c>
 8003a4a:	065f      	lsls	r7, r3, #25
 8003a4c:	bf48      	it	mi
 8003a4e:	b2b6      	uxthmi	r6, r6
 8003a50:	07df      	lsls	r7, r3, #31
 8003a52:	bf48      	it	mi
 8003a54:	f043 0320 	orrmi.w	r3, r3, #32
 8003a58:	6029      	str	r1, [r5, #0]
 8003a5a:	bf48      	it	mi
 8003a5c:	6023      	strmi	r3, [r4, #0]
 8003a5e:	b91e      	cbnz	r6, 8003a68 <_printf_i+0x1a4>
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	f023 0320 	bic.w	r3, r3, #32
 8003a66:	6023      	str	r3, [r4, #0]
 8003a68:	2310      	movs	r3, #16
 8003a6a:	e7a7      	b.n	80039bc <_printf_i+0xf8>
 8003a6c:	4824      	ldr	r0, [pc, #144]	; (8003b00 <_printf_i+0x23c>)
 8003a6e:	e7e4      	b.n	8003a3a <_printf_i+0x176>
 8003a70:	4615      	mov	r5, r2
 8003a72:	e7bd      	b.n	80039f0 <_printf_i+0x12c>
 8003a74:	682b      	ldr	r3, [r5, #0]
 8003a76:	6826      	ldr	r6, [r4, #0]
 8003a78:	6961      	ldr	r1, [r4, #20]
 8003a7a:	1d18      	adds	r0, r3, #4
 8003a7c:	6028      	str	r0, [r5, #0]
 8003a7e:	0635      	lsls	r5, r6, #24
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	d501      	bpl.n	8003a88 <_printf_i+0x1c4>
 8003a84:	6019      	str	r1, [r3, #0]
 8003a86:	e002      	b.n	8003a8e <_printf_i+0x1ca>
 8003a88:	0670      	lsls	r0, r6, #25
 8003a8a:	d5fb      	bpl.n	8003a84 <_printf_i+0x1c0>
 8003a8c:	8019      	strh	r1, [r3, #0]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	6123      	str	r3, [r4, #16]
 8003a92:	4615      	mov	r5, r2
 8003a94:	e7bc      	b.n	8003a10 <_printf_i+0x14c>
 8003a96:	682b      	ldr	r3, [r5, #0]
 8003a98:	1d1a      	adds	r2, r3, #4
 8003a9a:	602a      	str	r2, [r5, #0]
 8003a9c:	681d      	ldr	r5, [r3, #0]
 8003a9e:	6862      	ldr	r2, [r4, #4]
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4628      	mov	r0, r5
 8003aa4:	f7fc fb9c 	bl	80001e0 <memchr>
 8003aa8:	b108      	cbz	r0, 8003aae <_printf_i+0x1ea>
 8003aaa:	1b40      	subs	r0, r0, r5
 8003aac:	6060      	str	r0, [r4, #4]
 8003aae:	6863      	ldr	r3, [r4, #4]
 8003ab0:	6123      	str	r3, [r4, #16]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ab8:	e7aa      	b.n	8003a10 <_printf_i+0x14c>
 8003aba:	6923      	ldr	r3, [r4, #16]
 8003abc:	462a      	mov	r2, r5
 8003abe:	4649      	mov	r1, r9
 8003ac0:	4640      	mov	r0, r8
 8003ac2:	47d0      	blx	sl
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	d0ad      	beq.n	8003a24 <_printf_i+0x160>
 8003ac8:	6823      	ldr	r3, [r4, #0]
 8003aca:	079b      	lsls	r3, r3, #30
 8003acc:	d413      	bmi.n	8003af6 <_printf_i+0x232>
 8003ace:	68e0      	ldr	r0, [r4, #12]
 8003ad0:	9b03      	ldr	r3, [sp, #12]
 8003ad2:	4298      	cmp	r0, r3
 8003ad4:	bfb8      	it	lt
 8003ad6:	4618      	movlt	r0, r3
 8003ad8:	e7a6      	b.n	8003a28 <_printf_i+0x164>
 8003ada:	2301      	movs	r3, #1
 8003adc:	4632      	mov	r2, r6
 8003ade:	4649      	mov	r1, r9
 8003ae0:	4640      	mov	r0, r8
 8003ae2:	47d0      	blx	sl
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	d09d      	beq.n	8003a24 <_printf_i+0x160>
 8003ae8:	3501      	adds	r5, #1
 8003aea:	68e3      	ldr	r3, [r4, #12]
 8003aec:	9903      	ldr	r1, [sp, #12]
 8003aee:	1a5b      	subs	r3, r3, r1
 8003af0:	42ab      	cmp	r3, r5
 8003af2:	dcf2      	bgt.n	8003ada <_printf_i+0x216>
 8003af4:	e7eb      	b.n	8003ace <_printf_i+0x20a>
 8003af6:	2500      	movs	r5, #0
 8003af8:	f104 0619 	add.w	r6, r4, #25
 8003afc:	e7f5      	b.n	8003aea <_printf_i+0x226>
 8003afe:	bf00      	nop
 8003b00:	08006762 	.word	0x08006762
 8003b04:	08006773 	.word	0x08006773

08003b08 <std>:
 8003b08:	2300      	movs	r3, #0
 8003b0a:	b510      	push	{r4, lr}
 8003b0c:	4604      	mov	r4, r0
 8003b0e:	e9c0 3300 	strd	r3, r3, [r0]
 8003b12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b16:	6083      	str	r3, [r0, #8]
 8003b18:	8181      	strh	r1, [r0, #12]
 8003b1a:	6643      	str	r3, [r0, #100]	; 0x64
 8003b1c:	81c2      	strh	r2, [r0, #14]
 8003b1e:	6183      	str	r3, [r0, #24]
 8003b20:	4619      	mov	r1, r3
 8003b22:	2208      	movs	r2, #8
 8003b24:	305c      	adds	r0, #92	; 0x5c
 8003b26:	f000 f914 	bl	8003d52 <memset>
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <std+0x58>)
 8003b2c:	6263      	str	r3, [r4, #36]	; 0x24
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <std+0x5c>)
 8003b30:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b32:	4b0d      	ldr	r3, [pc, #52]	; (8003b68 <std+0x60>)
 8003b34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b36:	4b0d      	ldr	r3, [pc, #52]	; (8003b6c <std+0x64>)
 8003b38:	6323      	str	r3, [r4, #48]	; 0x30
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <std+0x68>)
 8003b3c:	6224      	str	r4, [r4, #32]
 8003b3e:	429c      	cmp	r4, r3
 8003b40:	d006      	beq.n	8003b50 <std+0x48>
 8003b42:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003b46:	4294      	cmp	r4, r2
 8003b48:	d002      	beq.n	8003b50 <std+0x48>
 8003b4a:	33d0      	adds	r3, #208	; 0xd0
 8003b4c:	429c      	cmp	r4, r3
 8003b4e:	d105      	bne.n	8003b5c <std+0x54>
 8003b50:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b58:	f000 b978 	b.w	8003e4c <__retarget_lock_init_recursive>
 8003b5c:	bd10      	pop	{r4, pc}
 8003b5e:	bf00      	nop
 8003b60:	08003ccd 	.word	0x08003ccd
 8003b64:	08003cef 	.word	0x08003cef
 8003b68:	08003d27 	.word	0x08003d27
 8003b6c:	08003d4b 	.word	0x08003d4b
 8003b70:	200002cc 	.word	0x200002cc

08003b74 <stdio_exit_handler>:
 8003b74:	4a02      	ldr	r2, [pc, #8]	; (8003b80 <stdio_exit_handler+0xc>)
 8003b76:	4903      	ldr	r1, [pc, #12]	; (8003b84 <stdio_exit_handler+0x10>)
 8003b78:	4803      	ldr	r0, [pc, #12]	; (8003b88 <stdio_exit_handler+0x14>)
 8003b7a:	f000 b869 	b.w	8003c50 <_fwalk_sglue>
 8003b7e:	bf00      	nop
 8003b80:	20000024 	.word	0x20000024
 8003b84:	08005801 	.word	0x08005801
 8003b88:	20000030 	.word	0x20000030

08003b8c <cleanup_stdio>:
 8003b8c:	6841      	ldr	r1, [r0, #4]
 8003b8e:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <cleanup_stdio+0x34>)
 8003b90:	4299      	cmp	r1, r3
 8003b92:	b510      	push	{r4, lr}
 8003b94:	4604      	mov	r4, r0
 8003b96:	d001      	beq.n	8003b9c <cleanup_stdio+0x10>
 8003b98:	f001 fe32 	bl	8005800 <_fflush_r>
 8003b9c:	68a1      	ldr	r1, [r4, #8]
 8003b9e:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <cleanup_stdio+0x38>)
 8003ba0:	4299      	cmp	r1, r3
 8003ba2:	d002      	beq.n	8003baa <cleanup_stdio+0x1e>
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f001 fe2b 	bl	8005800 <_fflush_r>
 8003baa:	68e1      	ldr	r1, [r4, #12]
 8003bac:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <cleanup_stdio+0x3c>)
 8003bae:	4299      	cmp	r1, r3
 8003bb0:	d004      	beq.n	8003bbc <cleanup_stdio+0x30>
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bb8:	f001 be22 	b.w	8005800 <_fflush_r>
 8003bbc:	bd10      	pop	{r4, pc}
 8003bbe:	bf00      	nop
 8003bc0:	200002cc 	.word	0x200002cc
 8003bc4:	20000334 	.word	0x20000334
 8003bc8:	2000039c 	.word	0x2000039c

08003bcc <global_stdio_init.part.0>:
 8003bcc:	b510      	push	{r4, lr}
 8003bce:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <global_stdio_init.part.0+0x30>)
 8003bd0:	4c0b      	ldr	r4, [pc, #44]	; (8003c00 <global_stdio_init.part.0+0x34>)
 8003bd2:	4a0c      	ldr	r2, [pc, #48]	; (8003c04 <global_stdio_init.part.0+0x38>)
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2104      	movs	r1, #4
 8003bdc:	f7ff ff94 	bl	8003b08 <std>
 8003be0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003be4:	2201      	movs	r2, #1
 8003be6:	2109      	movs	r1, #9
 8003be8:	f7ff ff8e 	bl	8003b08 <std>
 8003bec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bf6:	2112      	movs	r1, #18
 8003bf8:	f7ff bf86 	b.w	8003b08 <std>
 8003bfc:	20000404 	.word	0x20000404
 8003c00:	200002cc 	.word	0x200002cc
 8003c04:	08003b75 	.word	0x08003b75

08003c08 <__sfp_lock_acquire>:
 8003c08:	4801      	ldr	r0, [pc, #4]	; (8003c10 <__sfp_lock_acquire+0x8>)
 8003c0a:	f000 b920 	b.w	8003e4e <__retarget_lock_acquire_recursive>
 8003c0e:	bf00      	nop
 8003c10:	2000040d 	.word	0x2000040d

08003c14 <__sfp_lock_release>:
 8003c14:	4801      	ldr	r0, [pc, #4]	; (8003c1c <__sfp_lock_release+0x8>)
 8003c16:	f000 b91b 	b.w	8003e50 <__retarget_lock_release_recursive>
 8003c1a:	bf00      	nop
 8003c1c:	2000040d 	.word	0x2000040d

08003c20 <__sinit>:
 8003c20:	b510      	push	{r4, lr}
 8003c22:	4604      	mov	r4, r0
 8003c24:	f7ff fff0 	bl	8003c08 <__sfp_lock_acquire>
 8003c28:	6a23      	ldr	r3, [r4, #32]
 8003c2a:	b11b      	cbz	r3, 8003c34 <__sinit+0x14>
 8003c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c30:	f7ff bff0 	b.w	8003c14 <__sfp_lock_release>
 8003c34:	4b04      	ldr	r3, [pc, #16]	; (8003c48 <__sinit+0x28>)
 8003c36:	6223      	str	r3, [r4, #32]
 8003c38:	4b04      	ldr	r3, [pc, #16]	; (8003c4c <__sinit+0x2c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1f5      	bne.n	8003c2c <__sinit+0xc>
 8003c40:	f7ff ffc4 	bl	8003bcc <global_stdio_init.part.0>
 8003c44:	e7f2      	b.n	8003c2c <__sinit+0xc>
 8003c46:	bf00      	nop
 8003c48:	08003b8d 	.word	0x08003b8d
 8003c4c:	20000404 	.word	0x20000404

08003c50 <_fwalk_sglue>:
 8003c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c54:	4607      	mov	r7, r0
 8003c56:	4688      	mov	r8, r1
 8003c58:	4614      	mov	r4, r2
 8003c5a:	2600      	movs	r6, #0
 8003c5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c60:	f1b9 0901 	subs.w	r9, r9, #1
 8003c64:	d505      	bpl.n	8003c72 <_fwalk_sglue+0x22>
 8003c66:	6824      	ldr	r4, [r4, #0]
 8003c68:	2c00      	cmp	r4, #0
 8003c6a:	d1f7      	bne.n	8003c5c <_fwalk_sglue+0xc>
 8003c6c:	4630      	mov	r0, r6
 8003c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c72:	89ab      	ldrh	r3, [r5, #12]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d907      	bls.n	8003c88 <_fwalk_sglue+0x38>
 8003c78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	d003      	beq.n	8003c88 <_fwalk_sglue+0x38>
 8003c80:	4629      	mov	r1, r5
 8003c82:	4638      	mov	r0, r7
 8003c84:	47c0      	blx	r8
 8003c86:	4306      	orrs	r6, r0
 8003c88:	3568      	adds	r5, #104	; 0x68
 8003c8a:	e7e9      	b.n	8003c60 <_fwalk_sglue+0x10>

08003c8c <siprintf>:
 8003c8c:	b40e      	push	{r1, r2, r3}
 8003c8e:	b500      	push	{lr}
 8003c90:	b09c      	sub	sp, #112	; 0x70
 8003c92:	ab1d      	add	r3, sp, #116	; 0x74
 8003c94:	9002      	str	r0, [sp, #8]
 8003c96:	9006      	str	r0, [sp, #24]
 8003c98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c9c:	4809      	ldr	r0, [pc, #36]	; (8003cc4 <siprintf+0x38>)
 8003c9e:	9107      	str	r1, [sp, #28]
 8003ca0:	9104      	str	r1, [sp, #16]
 8003ca2:	4909      	ldr	r1, [pc, #36]	; (8003cc8 <siprintf+0x3c>)
 8003ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ca8:	9105      	str	r1, [sp, #20]
 8003caa:	6800      	ldr	r0, [r0, #0]
 8003cac:	9301      	str	r3, [sp, #4]
 8003cae:	a902      	add	r1, sp, #8
 8003cb0:	f001 fc22 	bl	80054f8 <_svfiprintf_r>
 8003cb4:	9b02      	ldr	r3, [sp, #8]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	701a      	strb	r2, [r3, #0]
 8003cba:	b01c      	add	sp, #112	; 0x70
 8003cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cc0:	b003      	add	sp, #12
 8003cc2:	4770      	bx	lr
 8003cc4:	2000007c 	.word	0x2000007c
 8003cc8:	ffff0208 	.word	0xffff0208

08003ccc <__sread>:
 8003ccc:	b510      	push	{r4, lr}
 8003cce:	460c      	mov	r4, r1
 8003cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cd4:	f000 f86c 	bl	8003db0 <_read_r>
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	bfab      	itete	ge
 8003cdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cde:	89a3      	ldrhlt	r3, [r4, #12]
 8003ce0:	181b      	addge	r3, r3, r0
 8003ce2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ce6:	bfac      	ite	ge
 8003ce8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003cea:	81a3      	strhlt	r3, [r4, #12]
 8003cec:	bd10      	pop	{r4, pc}

08003cee <__swrite>:
 8003cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cf2:	461f      	mov	r7, r3
 8003cf4:	898b      	ldrh	r3, [r1, #12]
 8003cf6:	05db      	lsls	r3, r3, #23
 8003cf8:	4605      	mov	r5, r0
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	4616      	mov	r6, r2
 8003cfe:	d505      	bpl.n	8003d0c <__swrite+0x1e>
 8003d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d04:	2302      	movs	r3, #2
 8003d06:	2200      	movs	r2, #0
 8003d08:	f000 f840 	bl	8003d8c <_lseek_r>
 8003d0c:	89a3      	ldrh	r3, [r4, #12]
 8003d0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d16:	81a3      	strh	r3, [r4, #12]
 8003d18:	4632      	mov	r2, r6
 8003d1a:	463b      	mov	r3, r7
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d22:	f000 b857 	b.w	8003dd4 <_write_r>

08003d26 <__sseek>:
 8003d26:	b510      	push	{r4, lr}
 8003d28:	460c      	mov	r4, r1
 8003d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d2e:	f000 f82d 	bl	8003d8c <_lseek_r>
 8003d32:	1c43      	adds	r3, r0, #1
 8003d34:	89a3      	ldrh	r3, [r4, #12]
 8003d36:	bf15      	itete	ne
 8003d38:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d42:	81a3      	strheq	r3, [r4, #12]
 8003d44:	bf18      	it	ne
 8003d46:	81a3      	strhne	r3, [r4, #12]
 8003d48:	bd10      	pop	{r4, pc}

08003d4a <__sclose>:
 8003d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d4e:	f000 b80d 	b.w	8003d6c <_close_r>

08003d52 <memset>:
 8003d52:	4402      	add	r2, r0
 8003d54:	4603      	mov	r3, r0
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d100      	bne.n	8003d5c <memset+0xa>
 8003d5a:	4770      	bx	lr
 8003d5c:	f803 1b01 	strb.w	r1, [r3], #1
 8003d60:	e7f9      	b.n	8003d56 <memset+0x4>
	...

08003d64 <_localeconv_r>:
 8003d64:	4800      	ldr	r0, [pc, #0]	; (8003d68 <_localeconv_r+0x4>)
 8003d66:	4770      	bx	lr
 8003d68:	20000170 	.word	0x20000170

08003d6c <_close_r>:
 8003d6c:	b538      	push	{r3, r4, r5, lr}
 8003d6e:	4d06      	ldr	r5, [pc, #24]	; (8003d88 <_close_r+0x1c>)
 8003d70:	2300      	movs	r3, #0
 8003d72:	4604      	mov	r4, r0
 8003d74:	4608      	mov	r0, r1
 8003d76:	602b      	str	r3, [r5, #0]
 8003d78:	f7fd fed7 	bl	8001b2a <_close>
 8003d7c:	1c43      	adds	r3, r0, #1
 8003d7e:	d102      	bne.n	8003d86 <_close_r+0x1a>
 8003d80:	682b      	ldr	r3, [r5, #0]
 8003d82:	b103      	cbz	r3, 8003d86 <_close_r+0x1a>
 8003d84:	6023      	str	r3, [r4, #0]
 8003d86:	bd38      	pop	{r3, r4, r5, pc}
 8003d88:	20000408 	.word	0x20000408

08003d8c <_lseek_r>:
 8003d8c:	b538      	push	{r3, r4, r5, lr}
 8003d8e:	4d07      	ldr	r5, [pc, #28]	; (8003dac <_lseek_r+0x20>)
 8003d90:	4604      	mov	r4, r0
 8003d92:	4608      	mov	r0, r1
 8003d94:	4611      	mov	r1, r2
 8003d96:	2200      	movs	r2, #0
 8003d98:	602a      	str	r2, [r5, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f7fd feec 	bl	8001b78 <_lseek>
 8003da0:	1c43      	adds	r3, r0, #1
 8003da2:	d102      	bne.n	8003daa <_lseek_r+0x1e>
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	b103      	cbz	r3, 8003daa <_lseek_r+0x1e>
 8003da8:	6023      	str	r3, [r4, #0]
 8003daa:	bd38      	pop	{r3, r4, r5, pc}
 8003dac:	20000408 	.word	0x20000408

08003db0 <_read_r>:
 8003db0:	b538      	push	{r3, r4, r5, lr}
 8003db2:	4d07      	ldr	r5, [pc, #28]	; (8003dd0 <_read_r+0x20>)
 8003db4:	4604      	mov	r4, r0
 8003db6:	4608      	mov	r0, r1
 8003db8:	4611      	mov	r1, r2
 8003dba:	2200      	movs	r2, #0
 8003dbc:	602a      	str	r2, [r5, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f7fd fe7a 	bl	8001ab8 <_read>
 8003dc4:	1c43      	adds	r3, r0, #1
 8003dc6:	d102      	bne.n	8003dce <_read_r+0x1e>
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	b103      	cbz	r3, 8003dce <_read_r+0x1e>
 8003dcc:	6023      	str	r3, [r4, #0]
 8003dce:	bd38      	pop	{r3, r4, r5, pc}
 8003dd0:	20000408 	.word	0x20000408

08003dd4 <_write_r>:
 8003dd4:	b538      	push	{r3, r4, r5, lr}
 8003dd6:	4d07      	ldr	r5, [pc, #28]	; (8003df4 <_write_r+0x20>)
 8003dd8:	4604      	mov	r4, r0
 8003dda:	4608      	mov	r0, r1
 8003ddc:	4611      	mov	r1, r2
 8003dde:	2200      	movs	r2, #0
 8003de0:	602a      	str	r2, [r5, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	f7fd fe85 	bl	8001af2 <_write>
 8003de8:	1c43      	adds	r3, r0, #1
 8003dea:	d102      	bne.n	8003df2 <_write_r+0x1e>
 8003dec:	682b      	ldr	r3, [r5, #0]
 8003dee:	b103      	cbz	r3, 8003df2 <_write_r+0x1e>
 8003df0:	6023      	str	r3, [r4, #0]
 8003df2:	bd38      	pop	{r3, r4, r5, pc}
 8003df4:	20000408 	.word	0x20000408

08003df8 <__errno>:
 8003df8:	4b01      	ldr	r3, [pc, #4]	; (8003e00 <__errno+0x8>)
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	2000007c 	.word	0x2000007c

08003e04 <__libc_init_array>:
 8003e04:	b570      	push	{r4, r5, r6, lr}
 8003e06:	4d0d      	ldr	r5, [pc, #52]	; (8003e3c <__libc_init_array+0x38>)
 8003e08:	4c0d      	ldr	r4, [pc, #52]	; (8003e40 <__libc_init_array+0x3c>)
 8003e0a:	1b64      	subs	r4, r4, r5
 8003e0c:	10a4      	asrs	r4, r4, #2
 8003e0e:	2600      	movs	r6, #0
 8003e10:	42a6      	cmp	r6, r4
 8003e12:	d109      	bne.n	8003e28 <__libc_init_array+0x24>
 8003e14:	4d0b      	ldr	r5, [pc, #44]	; (8003e44 <__libc_init_array+0x40>)
 8003e16:	4c0c      	ldr	r4, [pc, #48]	; (8003e48 <__libc_init_array+0x44>)
 8003e18:	f002 fc58 	bl	80066cc <_init>
 8003e1c:	1b64      	subs	r4, r4, r5
 8003e1e:	10a4      	asrs	r4, r4, #2
 8003e20:	2600      	movs	r6, #0
 8003e22:	42a6      	cmp	r6, r4
 8003e24:	d105      	bne.n	8003e32 <__libc_init_array+0x2e>
 8003e26:	bd70      	pop	{r4, r5, r6, pc}
 8003e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e2c:	4798      	blx	r3
 8003e2e:	3601      	adds	r6, #1
 8003e30:	e7ee      	b.n	8003e10 <__libc_init_array+0xc>
 8003e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e36:	4798      	blx	r3
 8003e38:	3601      	adds	r6, #1
 8003e3a:	e7f2      	b.n	8003e22 <__libc_init_array+0x1e>
 8003e3c:	08006ae4 	.word	0x08006ae4
 8003e40:	08006ae4 	.word	0x08006ae4
 8003e44:	08006ae4 	.word	0x08006ae4
 8003e48:	08006ae8 	.word	0x08006ae8

08003e4c <__retarget_lock_init_recursive>:
 8003e4c:	4770      	bx	lr

08003e4e <__retarget_lock_acquire_recursive>:
 8003e4e:	4770      	bx	lr

08003e50 <__retarget_lock_release_recursive>:
 8003e50:	4770      	bx	lr

08003e52 <quorem>:
 8003e52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e56:	6903      	ldr	r3, [r0, #16]
 8003e58:	690c      	ldr	r4, [r1, #16]
 8003e5a:	42a3      	cmp	r3, r4
 8003e5c:	4607      	mov	r7, r0
 8003e5e:	db7e      	blt.n	8003f5e <quorem+0x10c>
 8003e60:	3c01      	subs	r4, #1
 8003e62:	f101 0814 	add.w	r8, r1, #20
 8003e66:	f100 0514 	add.w	r5, r0, #20
 8003e6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003e6e:	9301      	str	r3, [sp, #4]
 8003e70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003e74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003e80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003e84:	fbb2 f6f3 	udiv	r6, r2, r3
 8003e88:	d331      	bcc.n	8003eee <quorem+0x9c>
 8003e8a:	f04f 0e00 	mov.w	lr, #0
 8003e8e:	4640      	mov	r0, r8
 8003e90:	46ac      	mov	ip, r5
 8003e92:	46f2      	mov	sl, lr
 8003e94:	f850 2b04 	ldr.w	r2, [r0], #4
 8003e98:	b293      	uxth	r3, r2
 8003e9a:	fb06 e303 	mla	r3, r6, r3, lr
 8003e9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003ea2:	0c1a      	lsrs	r2, r3, #16
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	ebaa 0303 	sub.w	r3, sl, r3
 8003eaa:	f8dc a000 	ldr.w	sl, [ip]
 8003eae:	fa13 f38a 	uxtah	r3, r3, sl
 8003eb2:	fb06 220e 	mla	r2, r6, lr, r2
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	9b00      	ldr	r3, [sp, #0]
 8003eba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003ebe:	b292      	uxth	r2, r2
 8003ec0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003ec4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003ec8:	f8bd 3000 	ldrh.w	r3, [sp]
 8003ecc:	4581      	cmp	r9, r0
 8003ece:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ed2:	f84c 3b04 	str.w	r3, [ip], #4
 8003ed6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003eda:	d2db      	bcs.n	8003e94 <quorem+0x42>
 8003edc:	f855 300b 	ldr.w	r3, [r5, fp]
 8003ee0:	b92b      	cbnz	r3, 8003eee <quorem+0x9c>
 8003ee2:	9b01      	ldr	r3, [sp, #4]
 8003ee4:	3b04      	subs	r3, #4
 8003ee6:	429d      	cmp	r5, r3
 8003ee8:	461a      	mov	r2, r3
 8003eea:	d32c      	bcc.n	8003f46 <quorem+0xf4>
 8003eec:	613c      	str	r4, [r7, #16]
 8003eee:	4638      	mov	r0, r7
 8003ef0:	f001 f9a8 	bl	8005244 <__mcmp>
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	db22      	blt.n	8003f3e <quorem+0xec>
 8003ef8:	3601      	adds	r6, #1
 8003efa:	4629      	mov	r1, r5
 8003efc:	2000      	movs	r0, #0
 8003efe:	f858 2b04 	ldr.w	r2, [r8], #4
 8003f02:	f8d1 c000 	ldr.w	ip, [r1]
 8003f06:	b293      	uxth	r3, r2
 8003f08:	1ac3      	subs	r3, r0, r3
 8003f0a:	0c12      	lsrs	r2, r2, #16
 8003f0c:	fa13 f38c 	uxtah	r3, r3, ip
 8003f10:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003f14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f1e:	45c1      	cmp	r9, r8
 8003f20:	f841 3b04 	str.w	r3, [r1], #4
 8003f24:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003f28:	d2e9      	bcs.n	8003efe <quorem+0xac>
 8003f2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f32:	b922      	cbnz	r2, 8003f3e <quorem+0xec>
 8003f34:	3b04      	subs	r3, #4
 8003f36:	429d      	cmp	r5, r3
 8003f38:	461a      	mov	r2, r3
 8003f3a:	d30a      	bcc.n	8003f52 <quorem+0x100>
 8003f3c:	613c      	str	r4, [r7, #16]
 8003f3e:	4630      	mov	r0, r6
 8003f40:	b003      	add	sp, #12
 8003f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f46:	6812      	ldr	r2, [r2, #0]
 8003f48:	3b04      	subs	r3, #4
 8003f4a:	2a00      	cmp	r2, #0
 8003f4c:	d1ce      	bne.n	8003eec <quorem+0x9a>
 8003f4e:	3c01      	subs	r4, #1
 8003f50:	e7c9      	b.n	8003ee6 <quorem+0x94>
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	3b04      	subs	r3, #4
 8003f56:	2a00      	cmp	r2, #0
 8003f58:	d1f0      	bne.n	8003f3c <quorem+0xea>
 8003f5a:	3c01      	subs	r4, #1
 8003f5c:	e7eb      	b.n	8003f36 <quorem+0xe4>
 8003f5e:	2000      	movs	r0, #0
 8003f60:	e7ee      	b.n	8003f40 <quorem+0xee>
 8003f62:	0000      	movs	r0, r0
 8003f64:	0000      	movs	r0, r0
	...

08003f68 <_dtoa_r>:
 8003f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f6c:	ed2d 8b04 	vpush	{d8-d9}
 8003f70:	69c5      	ldr	r5, [r0, #28]
 8003f72:	b093      	sub	sp, #76	; 0x4c
 8003f74:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003f78:	ec57 6b10 	vmov	r6, r7, d0
 8003f7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003f80:	9107      	str	r1, [sp, #28]
 8003f82:	4604      	mov	r4, r0
 8003f84:	920a      	str	r2, [sp, #40]	; 0x28
 8003f86:	930d      	str	r3, [sp, #52]	; 0x34
 8003f88:	b975      	cbnz	r5, 8003fa8 <_dtoa_r+0x40>
 8003f8a:	2010      	movs	r0, #16
 8003f8c:	f000 fe2a 	bl	8004be4 <malloc>
 8003f90:	4602      	mov	r2, r0
 8003f92:	61e0      	str	r0, [r4, #28]
 8003f94:	b920      	cbnz	r0, 8003fa0 <_dtoa_r+0x38>
 8003f96:	4bae      	ldr	r3, [pc, #696]	; (8004250 <_dtoa_r+0x2e8>)
 8003f98:	21ef      	movs	r1, #239	; 0xef
 8003f9a:	48ae      	ldr	r0, [pc, #696]	; (8004254 <_dtoa_r+0x2ec>)
 8003f9c:	f001 fc90 	bl	80058c0 <__assert_func>
 8003fa0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003fa4:	6005      	str	r5, [r0, #0]
 8003fa6:	60c5      	str	r5, [r0, #12]
 8003fa8:	69e3      	ldr	r3, [r4, #28]
 8003faa:	6819      	ldr	r1, [r3, #0]
 8003fac:	b151      	cbz	r1, 8003fc4 <_dtoa_r+0x5c>
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	604a      	str	r2, [r1, #4]
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	4093      	lsls	r3, r2
 8003fb6:	608b      	str	r3, [r1, #8]
 8003fb8:	4620      	mov	r0, r4
 8003fba:	f000 ff07 	bl	8004dcc <_Bfree>
 8003fbe:	69e3      	ldr	r3, [r4, #28]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	1e3b      	subs	r3, r7, #0
 8003fc6:	bfbb      	ittet	lt
 8003fc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003fcc:	9303      	strlt	r3, [sp, #12]
 8003fce:	2300      	movge	r3, #0
 8003fd0:	2201      	movlt	r2, #1
 8003fd2:	bfac      	ite	ge
 8003fd4:	f8c8 3000 	strge.w	r3, [r8]
 8003fd8:	f8c8 2000 	strlt.w	r2, [r8]
 8003fdc:	4b9e      	ldr	r3, [pc, #632]	; (8004258 <_dtoa_r+0x2f0>)
 8003fde:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003fe2:	ea33 0308 	bics.w	r3, r3, r8
 8003fe6:	d11b      	bne.n	8004020 <_dtoa_r+0xb8>
 8003fe8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003fea:	f242 730f 	movw	r3, #9999	; 0x270f
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003ff4:	4333      	orrs	r3, r6
 8003ff6:	f000 8593 	beq.w	8004b20 <_dtoa_r+0xbb8>
 8003ffa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ffc:	b963      	cbnz	r3, 8004018 <_dtoa_r+0xb0>
 8003ffe:	4b97      	ldr	r3, [pc, #604]	; (800425c <_dtoa_r+0x2f4>)
 8004000:	e027      	b.n	8004052 <_dtoa_r+0xea>
 8004002:	4b97      	ldr	r3, [pc, #604]	; (8004260 <_dtoa_r+0x2f8>)
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	3308      	adds	r3, #8
 8004008:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	9800      	ldr	r0, [sp, #0]
 800400e:	b013      	add	sp, #76	; 0x4c
 8004010:	ecbd 8b04 	vpop	{d8-d9}
 8004014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004018:	4b90      	ldr	r3, [pc, #576]	; (800425c <_dtoa_r+0x2f4>)
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	3303      	adds	r3, #3
 800401e:	e7f3      	b.n	8004008 <_dtoa_r+0xa0>
 8004020:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004024:	2200      	movs	r2, #0
 8004026:	ec51 0b17 	vmov	r0, r1, d7
 800402a:	eeb0 8a47 	vmov.f32	s16, s14
 800402e:	eef0 8a67 	vmov.f32	s17, s15
 8004032:	2300      	movs	r3, #0
 8004034:	f7fc fd50 	bl	8000ad8 <__aeabi_dcmpeq>
 8004038:	4681      	mov	r9, r0
 800403a:	b160      	cbz	r0, 8004056 <_dtoa_r+0xee>
 800403c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800403e:	2301      	movs	r3, #1
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 8568 	beq.w	8004b1a <_dtoa_r+0xbb2>
 800404a:	4b86      	ldr	r3, [pc, #536]	; (8004264 <_dtoa_r+0x2fc>)
 800404c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	3b01      	subs	r3, #1
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	e7da      	b.n	800400c <_dtoa_r+0xa4>
 8004056:	aa10      	add	r2, sp, #64	; 0x40
 8004058:	a911      	add	r1, sp, #68	; 0x44
 800405a:	4620      	mov	r0, r4
 800405c:	eeb0 0a48 	vmov.f32	s0, s16
 8004060:	eef0 0a68 	vmov.f32	s1, s17
 8004064:	f001 f994 	bl	8005390 <__d2b>
 8004068:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800406c:	4682      	mov	sl, r0
 800406e:	2d00      	cmp	r5, #0
 8004070:	d07f      	beq.n	8004172 <_dtoa_r+0x20a>
 8004072:	ee18 3a90 	vmov	r3, s17
 8004076:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800407a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800407e:	ec51 0b18 	vmov	r0, r1, d8
 8004082:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004086:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800408a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800408e:	4619      	mov	r1, r3
 8004090:	2200      	movs	r2, #0
 8004092:	4b75      	ldr	r3, [pc, #468]	; (8004268 <_dtoa_r+0x300>)
 8004094:	f7fc f900 	bl	8000298 <__aeabi_dsub>
 8004098:	a367      	add	r3, pc, #412	; (adr r3, 8004238 <_dtoa_r+0x2d0>)
 800409a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409e:	f7fc fab3 	bl	8000608 <__aeabi_dmul>
 80040a2:	a367      	add	r3, pc, #412	; (adr r3, 8004240 <_dtoa_r+0x2d8>)
 80040a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a8:	f7fc f8f8 	bl	800029c <__adddf3>
 80040ac:	4606      	mov	r6, r0
 80040ae:	4628      	mov	r0, r5
 80040b0:	460f      	mov	r7, r1
 80040b2:	f7fc fa3f 	bl	8000534 <__aeabi_i2d>
 80040b6:	a364      	add	r3, pc, #400	; (adr r3, 8004248 <_dtoa_r+0x2e0>)
 80040b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040bc:	f7fc faa4 	bl	8000608 <__aeabi_dmul>
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	4630      	mov	r0, r6
 80040c6:	4639      	mov	r1, r7
 80040c8:	f7fc f8e8 	bl	800029c <__adddf3>
 80040cc:	4606      	mov	r6, r0
 80040ce:	460f      	mov	r7, r1
 80040d0:	f7fc fd4a 	bl	8000b68 <__aeabi_d2iz>
 80040d4:	2200      	movs	r2, #0
 80040d6:	4683      	mov	fp, r0
 80040d8:	2300      	movs	r3, #0
 80040da:	4630      	mov	r0, r6
 80040dc:	4639      	mov	r1, r7
 80040de:	f7fc fd05 	bl	8000aec <__aeabi_dcmplt>
 80040e2:	b148      	cbz	r0, 80040f8 <_dtoa_r+0x190>
 80040e4:	4658      	mov	r0, fp
 80040e6:	f7fc fa25 	bl	8000534 <__aeabi_i2d>
 80040ea:	4632      	mov	r2, r6
 80040ec:	463b      	mov	r3, r7
 80040ee:	f7fc fcf3 	bl	8000ad8 <__aeabi_dcmpeq>
 80040f2:	b908      	cbnz	r0, 80040f8 <_dtoa_r+0x190>
 80040f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80040f8:	f1bb 0f16 	cmp.w	fp, #22
 80040fc:	d857      	bhi.n	80041ae <_dtoa_r+0x246>
 80040fe:	4b5b      	ldr	r3, [pc, #364]	; (800426c <_dtoa_r+0x304>)
 8004100:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004108:	ec51 0b18 	vmov	r0, r1, d8
 800410c:	f7fc fcee 	bl	8000aec <__aeabi_dcmplt>
 8004110:	2800      	cmp	r0, #0
 8004112:	d04e      	beq.n	80041b2 <_dtoa_r+0x24a>
 8004114:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004118:	2300      	movs	r3, #0
 800411a:	930c      	str	r3, [sp, #48]	; 0x30
 800411c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800411e:	1b5b      	subs	r3, r3, r5
 8004120:	1e5a      	subs	r2, r3, #1
 8004122:	bf45      	ittet	mi
 8004124:	f1c3 0301 	rsbmi	r3, r3, #1
 8004128:	9305      	strmi	r3, [sp, #20]
 800412a:	2300      	movpl	r3, #0
 800412c:	2300      	movmi	r3, #0
 800412e:	9206      	str	r2, [sp, #24]
 8004130:	bf54      	ite	pl
 8004132:	9305      	strpl	r3, [sp, #20]
 8004134:	9306      	strmi	r3, [sp, #24]
 8004136:	f1bb 0f00 	cmp.w	fp, #0
 800413a:	db3c      	blt.n	80041b6 <_dtoa_r+0x24e>
 800413c:	9b06      	ldr	r3, [sp, #24]
 800413e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004142:	445b      	add	r3, fp
 8004144:	9306      	str	r3, [sp, #24]
 8004146:	2300      	movs	r3, #0
 8004148:	9308      	str	r3, [sp, #32]
 800414a:	9b07      	ldr	r3, [sp, #28]
 800414c:	2b09      	cmp	r3, #9
 800414e:	d868      	bhi.n	8004222 <_dtoa_r+0x2ba>
 8004150:	2b05      	cmp	r3, #5
 8004152:	bfc4      	itt	gt
 8004154:	3b04      	subgt	r3, #4
 8004156:	9307      	strgt	r3, [sp, #28]
 8004158:	9b07      	ldr	r3, [sp, #28]
 800415a:	f1a3 0302 	sub.w	r3, r3, #2
 800415e:	bfcc      	ite	gt
 8004160:	2500      	movgt	r5, #0
 8004162:	2501      	movle	r5, #1
 8004164:	2b03      	cmp	r3, #3
 8004166:	f200 8085 	bhi.w	8004274 <_dtoa_r+0x30c>
 800416a:	e8df f003 	tbb	[pc, r3]
 800416e:	3b2e      	.short	0x3b2e
 8004170:	5839      	.short	0x5839
 8004172:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004176:	441d      	add	r5, r3
 8004178:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800417c:	2b20      	cmp	r3, #32
 800417e:	bfc1      	itttt	gt
 8004180:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004184:	fa08 f803 	lslgt.w	r8, r8, r3
 8004188:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800418c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004190:	bfd6      	itet	le
 8004192:	f1c3 0320 	rsble	r3, r3, #32
 8004196:	ea48 0003 	orrgt.w	r0, r8, r3
 800419a:	fa06 f003 	lslle.w	r0, r6, r3
 800419e:	f7fc f9b9 	bl	8000514 <__aeabi_ui2d>
 80041a2:	2201      	movs	r2, #1
 80041a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80041a8:	3d01      	subs	r5, #1
 80041aa:	920e      	str	r2, [sp, #56]	; 0x38
 80041ac:	e76f      	b.n	800408e <_dtoa_r+0x126>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e7b3      	b.n	800411a <_dtoa_r+0x1b2>
 80041b2:	900c      	str	r0, [sp, #48]	; 0x30
 80041b4:	e7b2      	b.n	800411c <_dtoa_r+0x1b4>
 80041b6:	9b05      	ldr	r3, [sp, #20]
 80041b8:	eba3 030b 	sub.w	r3, r3, fp
 80041bc:	9305      	str	r3, [sp, #20]
 80041be:	f1cb 0300 	rsb	r3, fp, #0
 80041c2:	9308      	str	r3, [sp, #32]
 80041c4:	2300      	movs	r3, #0
 80041c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80041c8:	e7bf      	b.n	800414a <_dtoa_r+0x1e2>
 80041ca:	2300      	movs	r3, #0
 80041cc:	9309      	str	r3, [sp, #36]	; 0x24
 80041ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	dc52      	bgt.n	800427a <_dtoa_r+0x312>
 80041d4:	2301      	movs	r3, #1
 80041d6:	9301      	str	r3, [sp, #4]
 80041d8:	9304      	str	r3, [sp, #16]
 80041da:	461a      	mov	r2, r3
 80041dc:	920a      	str	r2, [sp, #40]	; 0x28
 80041de:	e00b      	b.n	80041f8 <_dtoa_r+0x290>
 80041e0:	2301      	movs	r3, #1
 80041e2:	e7f3      	b.n	80041cc <_dtoa_r+0x264>
 80041e4:	2300      	movs	r3, #0
 80041e6:	9309      	str	r3, [sp, #36]	; 0x24
 80041e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041ea:	445b      	add	r3, fp
 80041ec:	9301      	str	r3, [sp, #4]
 80041ee:	3301      	adds	r3, #1
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	9304      	str	r3, [sp, #16]
 80041f4:	bfb8      	it	lt
 80041f6:	2301      	movlt	r3, #1
 80041f8:	69e0      	ldr	r0, [r4, #28]
 80041fa:	2100      	movs	r1, #0
 80041fc:	2204      	movs	r2, #4
 80041fe:	f102 0614 	add.w	r6, r2, #20
 8004202:	429e      	cmp	r6, r3
 8004204:	d93d      	bls.n	8004282 <_dtoa_r+0x31a>
 8004206:	6041      	str	r1, [r0, #4]
 8004208:	4620      	mov	r0, r4
 800420a:	f000 fd9f 	bl	8004d4c <_Balloc>
 800420e:	9000      	str	r0, [sp, #0]
 8004210:	2800      	cmp	r0, #0
 8004212:	d139      	bne.n	8004288 <_dtoa_r+0x320>
 8004214:	4b16      	ldr	r3, [pc, #88]	; (8004270 <_dtoa_r+0x308>)
 8004216:	4602      	mov	r2, r0
 8004218:	f240 11af 	movw	r1, #431	; 0x1af
 800421c:	e6bd      	b.n	8003f9a <_dtoa_r+0x32>
 800421e:	2301      	movs	r3, #1
 8004220:	e7e1      	b.n	80041e6 <_dtoa_r+0x27e>
 8004222:	2501      	movs	r5, #1
 8004224:	2300      	movs	r3, #0
 8004226:	9307      	str	r3, [sp, #28]
 8004228:	9509      	str	r5, [sp, #36]	; 0x24
 800422a:	f04f 33ff 	mov.w	r3, #4294967295
 800422e:	9301      	str	r3, [sp, #4]
 8004230:	9304      	str	r3, [sp, #16]
 8004232:	2200      	movs	r2, #0
 8004234:	2312      	movs	r3, #18
 8004236:	e7d1      	b.n	80041dc <_dtoa_r+0x274>
 8004238:	636f4361 	.word	0x636f4361
 800423c:	3fd287a7 	.word	0x3fd287a7
 8004240:	8b60c8b3 	.word	0x8b60c8b3
 8004244:	3fc68a28 	.word	0x3fc68a28
 8004248:	509f79fb 	.word	0x509f79fb
 800424c:	3fd34413 	.word	0x3fd34413
 8004250:	08006791 	.word	0x08006791
 8004254:	080067a8 	.word	0x080067a8
 8004258:	7ff00000 	.word	0x7ff00000
 800425c:	0800678d 	.word	0x0800678d
 8004260:	08006784 	.word	0x08006784
 8004264:	08006761 	.word	0x08006761
 8004268:	3ff80000 	.word	0x3ff80000
 800426c:	08006898 	.word	0x08006898
 8004270:	08006800 	.word	0x08006800
 8004274:	2301      	movs	r3, #1
 8004276:	9309      	str	r3, [sp, #36]	; 0x24
 8004278:	e7d7      	b.n	800422a <_dtoa_r+0x2c2>
 800427a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800427c:	9301      	str	r3, [sp, #4]
 800427e:	9304      	str	r3, [sp, #16]
 8004280:	e7ba      	b.n	80041f8 <_dtoa_r+0x290>
 8004282:	3101      	adds	r1, #1
 8004284:	0052      	lsls	r2, r2, #1
 8004286:	e7ba      	b.n	80041fe <_dtoa_r+0x296>
 8004288:	69e3      	ldr	r3, [r4, #28]
 800428a:	9a00      	ldr	r2, [sp, #0]
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	9b04      	ldr	r3, [sp, #16]
 8004290:	2b0e      	cmp	r3, #14
 8004292:	f200 80a8 	bhi.w	80043e6 <_dtoa_r+0x47e>
 8004296:	2d00      	cmp	r5, #0
 8004298:	f000 80a5 	beq.w	80043e6 <_dtoa_r+0x47e>
 800429c:	f1bb 0f00 	cmp.w	fp, #0
 80042a0:	dd38      	ble.n	8004314 <_dtoa_r+0x3ac>
 80042a2:	4bc0      	ldr	r3, [pc, #768]	; (80045a4 <_dtoa_r+0x63c>)
 80042a4:	f00b 020f 	and.w	r2, fp, #15
 80042a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80042ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80042b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80042b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80042b8:	d019      	beq.n	80042ee <_dtoa_r+0x386>
 80042ba:	4bbb      	ldr	r3, [pc, #748]	; (80045a8 <_dtoa_r+0x640>)
 80042bc:	ec51 0b18 	vmov	r0, r1, d8
 80042c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80042c4:	f7fc faca 	bl	800085c <__aeabi_ddiv>
 80042c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042cc:	f008 080f 	and.w	r8, r8, #15
 80042d0:	2503      	movs	r5, #3
 80042d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80045a8 <_dtoa_r+0x640>
 80042d6:	f1b8 0f00 	cmp.w	r8, #0
 80042da:	d10a      	bne.n	80042f2 <_dtoa_r+0x38a>
 80042dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042e0:	4632      	mov	r2, r6
 80042e2:	463b      	mov	r3, r7
 80042e4:	f7fc faba 	bl	800085c <__aeabi_ddiv>
 80042e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042ec:	e02b      	b.n	8004346 <_dtoa_r+0x3de>
 80042ee:	2502      	movs	r5, #2
 80042f0:	e7ef      	b.n	80042d2 <_dtoa_r+0x36a>
 80042f2:	f018 0f01 	tst.w	r8, #1
 80042f6:	d008      	beq.n	800430a <_dtoa_r+0x3a2>
 80042f8:	4630      	mov	r0, r6
 80042fa:	4639      	mov	r1, r7
 80042fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004300:	f7fc f982 	bl	8000608 <__aeabi_dmul>
 8004304:	3501      	adds	r5, #1
 8004306:	4606      	mov	r6, r0
 8004308:	460f      	mov	r7, r1
 800430a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800430e:	f109 0908 	add.w	r9, r9, #8
 8004312:	e7e0      	b.n	80042d6 <_dtoa_r+0x36e>
 8004314:	f000 809f 	beq.w	8004456 <_dtoa_r+0x4ee>
 8004318:	f1cb 0600 	rsb	r6, fp, #0
 800431c:	4ba1      	ldr	r3, [pc, #644]	; (80045a4 <_dtoa_r+0x63c>)
 800431e:	4fa2      	ldr	r7, [pc, #648]	; (80045a8 <_dtoa_r+0x640>)
 8004320:	f006 020f 	and.w	r2, r6, #15
 8004324:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432c:	ec51 0b18 	vmov	r0, r1, d8
 8004330:	f7fc f96a 	bl	8000608 <__aeabi_dmul>
 8004334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004338:	1136      	asrs	r6, r6, #4
 800433a:	2300      	movs	r3, #0
 800433c:	2502      	movs	r5, #2
 800433e:	2e00      	cmp	r6, #0
 8004340:	d17e      	bne.n	8004440 <_dtoa_r+0x4d8>
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1d0      	bne.n	80042e8 <_dtoa_r+0x380>
 8004346:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004348:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 8084 	beq.w	800445a <_dtoa_r+0x4f2>
 8004352:	4b96      	ldr	r3, [pc, #600]	; (80045ac <_dtoa_r+0x644>)
 8004354:	2200      	movs	r2, #0
 8004356:	4640      	mov	r0, r8
 8004358:	4649      	mov	r1, r9
 800435a:	f7fc fbc7 	bl	8000aec <__aeabi_dcmplt>
 800435e:	2800      	cmp	r0, #0
 8004360:	d07b      	beq.n	800445a <_dtoa_r+0x4f2>
 8004362:	9b04      	ldr	r3, [sp, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d078      	beq.n	800445a <_dtoa_r+0x4f2>
 8004368:	9b01      	ldr	r3, [sp, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	dd39      	ble.n	80043e2 <_dtoa_r+0x47a>
 800436e:	4b90      	ldr	r3, [pc, #576]	; (80045b0 <_dtoa_r+0x648>)
 8004370:	2200      	movs	r2, #0
 8004372:	4640      	mov	r0, r8
 8004374:	4649      	mov	r1, r9
 8004376:	f7fc f947 	bl	8000608 <__aeabi_dmul>
 800437a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800437e:	9e01      	ldr	r6, [sp, #4]
 8004380:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004384:	3501      	adds	r5, #1
 8004386:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800438a:	4628      	mov	r0, r5
 800438c:	f7fc f8d2 	bl	8000534 <__aeabi_i2d>
 8004390:	4642      	mov	r2, r8
 8004392:	464b      	mov	r3, r9
 8004394:	f7fc f938 	bl	8000608 <__aeabi_dmul>
 8004398:	4b86      	ldr	r3, [pc, #536]	; (80045b4 <_dtoa_r+0x64c>)
 800439a:	2200      	movs	r2, #0
 800439c:	f7fb ff7e 	bl	800029c <__adddf3>
 80043a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80043a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043a8:	9303      	str	r3, [sp, #12]
 80043aa:	2e00      	cmp	r6, #0
 80043ac:	d158      	bne.n	8004460 <_dtoa_r+0x4f8>
 80043ae:	4b82      	ldr	r3, [pc, #520]	; (80045b8 <_dtoa_r+0x650>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	4640      	mov	r0, r8
 80043b4:	4649      	mov	r1, r9
 80043b6:	f7fb ff6f 	bl	8000298 <__aeabi_dsub>
 80043ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043be:	4680      	mov	r8, r0
 80043c0:	4689      	mov	r9, r1
 80043c2:	f7fc fbb1 	bl	8000b28 <__aeabi_dcmpgt>
 80043c6:	2800      	cmp	r0, #0
 80043c8:	f040 8296 	bne.w	80048f8 <_dtoa_r+0x990>
 80043cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80043d0:	4640      	mov	r0, r8
 80043d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80043d6:	4649      	mov	r1, r9
 80043d8:	f7fc fb88 	bl	8000aec <__aeabi_dcmplt>
 80043dc:	2800      	cmp	r0, #0
 80043de:	f040 8289 	bne.w	80048f4 <_dtoa_r+0x98c>
 80043e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80043e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f2c0 814e 	blt.w	800468a <_dtoa_r+0x722>
 80043ee:	f1bb 0f0e 	cmp.w	fp, #14
 80043f2:	f300 814a 	bgt.w	800468a <_dtoa_r+0x722>
 80043f6:	4b6b      	ldr	r3, [pc, #428]	; (80045a4 <_dtoa_r+0x63c>)
 80043f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80043fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004402:	2b00      	cmp	r3, #0
 8004404:	f280 80dc 	bge.w	80045c0 <_dtoa_r+0x658>
 8004408:	9b04      	ldr	r3, [sp, #16]
 800440a:	2b00      	cmp	r3, #0
 800440c:	f300 80d8 	bgt.w	80045c0 <_dtoa_r+0x658>
 8004410:	f040 826f 	bne.w	80048f2 <_dtoa_r+0x98a>
 8004414:	4b68      	ldr	r3, [pc, #416]	; (80045b8 <_dtoa_r+0x650>)
 8004416:	2200      	movs	r2, #0
 8004418:	4640      	mov	r0, r8
 800441a:	4649      	mov	r1, r9
 800441c:	f7fc f8f4 	bl	8000608 <__aeabi_dmul>
 8004420:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004424:	f7fc fb76 	bl	8000b14 <__aeabi_dcmpge>
 8004428:	9e04      	ldr	r6, [sp, #16]
 800442a:	4637      	mov	r7, r6
 800442c:	2800      	cmp	r0, #0
 800442e:	f040 8245 	bne.w	80048bc <_dtoa_r+0x954>
 8004432:	9d00      	ldr	r5, [sp, #0]
 8004434:	2331      	movs	r3, #49	; 0x31
 8004436:	f805 3b01 	strb.w	r3, [r5], #1
 800443a:	f10b 0b01 	add.w	fp, fp, #1
 800443e:	e241      	b.n	80048c4 <_dtoa_r+0x95c>
 8004440:	07f2      	lsls	r2, r6, #31
 8004442:	d505      	bpl.n	8004450 <_dtoa_r+0x4e8>
 8004444:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004448:	f7fc f8de 	bl	8000608 <__aeabi_dmul>
 800444c:	3501      	adds	r5, #1
 800444e:	2301      	movs	r3, #1
 8004450:	1076      	asrs	r6, r6, #1
 8004452:	3708      	adds	r7, #8
 8004454:	e773      	b.n	800433e <_dtoa_r+0x3d6>
 8004456:	2502      	movs	r5, #2
 8004458:	e775      	b.n	8004346 <_dtoa_r+0x3de>
 800445a:	9e04      	ldr	r6, [sp, #16]
 800445c:	465f      	mov	r7, fp
 800445e:	e792      	b.n	8004386 <_dtoa_r+0x41e>
 8004460:	9900      	ldr	r1, [sp, #0]
 8004462:	4b50      	ldr	r3, [pc, #320]	; (80045a4 <_dtoa_r+0x63c>)
 8004464:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004468:	4431      	add	r1, r6
 800446a:	9102      	str	r1, [sp, #8]
 800446c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800446e:	eeb0 9a47 	vmov.f32	s18, s14
 8004472:	eef0 9a67 	vmov.f32	s19, s15
 8004476:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800447a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800447e:	2900      	cmp	r1, #0
 8004480:	d044      	beq.n	800450c <_dtoa_r+0x5a4>
 8004482:	494e      	ldr	r1, [pc, #312]	; (80045bc <_dtoa_r+0x654>)
 8004484:	2000      	movs	r0, #0
 8004486:	f7fc f9e9 	bl	800085c <__aeabi_ddiv>
 800448a:	ec53 2b19 	vmov	r2, r3, d9
 800448e:	f7fb ff03 	bl	8000298 <__aeabi_dsub>
 8004492:	9d00      	ldr	r5, [sp, #0]
 8004494:	ec41 0b19 	vmov	d9, r0, r1
 8004498:	4649      	mov	r1, r9
 800449a:	4640      	mov	r0, r8
 800449c:	f7fc fb64 	bl	8000b68 <__aeabi_d2iz>
 80044a0:	4606      	mov	r6, r0
 80044a2:	f7fc f847 	bl	8000534 <__aeabi_i2d>
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	4640      	mov	r0, r8
 80044ac:	4649      	mov	r1, r9
 80044ae:	f7fb fef3 	bl	8000298 <__aeabi_dsub>
 80044b2:	3630      	adds	r6, #48	; 0x30
 80044b4:	f805 6b01 	strb.w	r6, [r5], #1
 80044b8:	ec53 2b19 	vmov	r2, r3, d9
 80044bc:	4680      	mov	r8, r0
 80044be:	4689      	mov	r9, r1
 80044c0:	f7fc fb14 	bl	8000aec <__aeabi_dcmplt>
 80044c4:	2800      	cmp	r0, #0
 80044c6:	d164      	bne.n	8004592 <_dtoa_r+0x62a>
 80044c8:	4642      	mov	r2, r8
 80044ca:	464b      	mov	r3, r9
 80044cc:	4937      	ldr	r1, [pc, #220]	; (80045ac <_dtoa_r+0x644>)
 80044ce:	2000      	movs	r0, #0
 80044d0:	f7fb fee2 	bl	8000298 <__aeabi_dsub>
 80044d4:	ec53 2b19 	vmov	r2, r3, d9
 80044d8:	f7fc fb08 	bl	8000aec <__aeabi_dcmplt>
 80044dc:	2800      	cmp	r0, #0
 80044de:	f040 80b6 	bne.w	800464e <_dtoa_r+0x6e6>
 80044e2:	9b02      	ldr	r3, [sp, #8]
 80044e4:	429d      	cmp	r5, r3
 80044e6:	f43f af7c 	beq.w	80043e2 <_dtoa_r+0x47a>
 80044ea:	4b31      	ldr	r3, [pc, #196]	; (80045b0 <_dtoa_r+0x648>)
 80044ec:	ec51 0b19 	vmov	r0, r1, d9
 80044f0:	2200      	movs	r2, #0
 80044f2:	f7fc f889 	bl	8000608 <__aeabi_dmul>
 80044f6:	4b2e      	ldr	r3, [pc, #184]	; (80045b0 <_dtoa_r+0x648>)
 80044f8:	ec41 0b19 	vmov	d9, r0, r1
 80044fc:	2200      	movs	r2, #0
 80044fe:	4640      	mov	r0, r8
 8004500:	4649      	mov	r1, r9
 8004502:	f7fc f881 	bl	8000608 <__aeabi_dmul>
 8004506:	4680      	mov	r8, r0
 8004508:	4689      	mov	r9, r1
 800450a:	e7c5      	b.n	8004498 <_dtoa_r+0x530>
 800450c:	ec51 0b17 	vmov	r0, r1, d7
 8004510:	f7fc f87a 	bl	8000608 <__aeabi_dmul>
 8004514:	9b02      	ldr	r3, [sp, #8]
 8004516:	9d00      	ldr	r5, [sp, #0]
 8004518:	930f      	str	r3, [sp, #60]	; 0x3c
 800451a:	ec41 0b19 	vmov	d9, r0, r1
 800451e:	4649      	mov	r1, r9
 8004520:	4640      	mov	r0, r8
 8004522:	f7fc fb21 	bl	8000b68 <__aeabi_d2iz>
 8004526:	4606      	mov	r6, r0
 8004528:	f7fc f804 	bl	8000534 <__aeabi_i2d>
 800452c:	3630      	adds	r6, #48	; 0x30
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	4640      	mov	r0, r8
 8004534:	4649      	mov	r1, r9
 8004536:	f7fb feaf 	bl	8000298 <__aeabi_dsub>
 800453a:	f805 6b01 	strb.w	r6, [r5], #1
 800453e:	9b02      	ldr	r3, [sp, #8]
 8004540:	429d      	cmp	r5, r3
 8004542:	4680      	mov	r8, r0
 8004544:	4689      	mov	r9, r1
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	d124      	bne.n	8004596 <_dtoa_r+0x62e>
 800454c:	4b1b      	ldr	r3, [pc, #108]	; (80045bc <_dtoa_r+0x654>)
 800454e:	ec51 0b19 	vmov	r0, r1, d9
 8004552:	f7fb fea3 	bl	800029c <__adddf3>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4640      	mov	r0, r8
 800455c:	4649      	mov	r1, r9
 800455e:	f7fc fae3 	bl	8000b28 <__aeabi_dcmpgt>
 8004562:	2800      	cmp	r0, #0
 8004564:	d173      	bne.n	800464e <_dtoa_r+0x6e6>
 8004566:	ec53 2b19 	vmov	r2, r3, d9
 800456a:	4914      	ldr	r1, [pc, #80]	; (80045bc <_dtoa_r+0x654>)
 800456c:	2000      	movs	r0, #0
 800456e:	f7fb fe93 	bl	8000298 <__aeabi_dsub>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4640      	mov	r0, r8
 8004578:	4649      	mov	r1, r9
 800457a:	f7fc fab7 	bl	8000aec <__aeabi_dcmplt>
 800457e:	2800      	cmp	r0, #0
 8004580:	f43f af2f 	beq.w	80043e2 <_dtoa_r+0x47a>
 8004584:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004586:	1e6b      	subs	r3, r5, #1
 8004588:	930f      	str	r3, [sp, #60]	; 0x3c
 800458a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800458e:	2b30      	cmp	r3, #48	; 0x30
 8004590:	d0f8      	beq.n	8004584 <_dtoa_r+0x61c>
 8004592:	46bb      	mov	fp, r7
 8004594:	e04a      	b.n	800462c <_dtoa_r+0x6c4>
 8004596:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <_dtoa_r+0x648>)
 8004598:	f7fc f836 	bl	8000608 <__aeabi_dmul>
 800459c:	4680      	mov	r8, r0
 800459e:	4689      	mov	r9, r1
 80045a0:	e7bd      	b.n	800451e <_dtoa_r+0x5b6>
 80045a2:	bf00      	nop
 80045a4:	08006898 	.word	0x08006898
 80045a8:	08006870 	.word	0x08006870
 80045ac:	3ff00000 	.word	0x3ff00000
 80045b0:	40240000 	.word	0x40240000
 80045b4:	401c0000 	.word	0x401c0000
 80045b8:	40140000 	.word	0x40140000
 80045bc:	3fe00000 	.word	0x3fe00000
 80045c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80045c4:	9d00      	ldr	r5, [sp, #0]
 80045c6:	4642      	mov	r2, r8
 80045c8:	464b      	mov	r3, r9
 80045ca:	4630      	mov	r0, r6
 80045cc:	4639      	mov	r1, r7
 80045ce:	f7fc f945 	bl	800085c <__aeabi_ddiv>
 80045d2:	f7fc fac9 	bl	8000b68 <__aeabi_d2iz>
 80045d6:	9001      	str	r0, [sp, #4]
 80045d8:	f7fb ffac 	bl	8000534 <__aeabi_i2d>
 80045dc:	4642      	mov	r2, r8
 80045de:	464b      	mov	r3, r9
 80045e0:	f7fc f812 	bl	8000608 <__aeabi_dmul>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4630      	mov	r0, r6
 80045ea:	4639      	mov	r1, r7
 80045ec:	f7fb fe54 	bl	8000298 <__aeabi_dsub>
 80045f0:	9e01      	ldr	r6, [sp, #4]
 80045f2:	9f04      	ldr	r7, [sp, #16]
 80045f4:	3630      	adds	r6, #48	; 0x30
 80045f6:	f805 6b01 	strb.w	r6, [r5], #1
 80045fa:	9e00      	ldr	r6, [sp, #0]
 80045fc:	1bae      	subs	r6, r5, r6
 80045fe:	42b7      	cmp	r7, r6
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	d134      	bne.n	8004670 <_dtoa_r+0x708>
 8004606:	f7fb fe49 	bl	800029c <__adddf3>
 800460a:	4642      	mov	r2, r8
 800460c:	464b      	mov	r3, r9
 800460e:	4606      	mov	r6, r0
 8004610:	460f      	mov	r7, r1
 8004612:	f7fc fa89 	bl	8000b28 <__aeabi_dcmpgt>
 8004616:	b9c8      	cbnz	r0, 800464c <_dtoa_r+0x6e4>
 8004618:	4642      	mov	r2, r8
 800461a:	464b      	mov	r3, r9
 800461c:	4630      	mov	r0, r6
 800461e:	4639      	mov	r1, r7
 8004620:	f7fc fa5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004624:	b110      	cbz	r0, 800462c <_dtoa_r+0x6c4>
 8004626:	9b01      	ldr	r3, [sp, #4]
 8004628:	07db      	lsls	r3, r3, #31
 800462a:	d40f      	bmi.n	800464c <_dtoa_r+0x6e4>
 800462c:	4651      	mov	r1, sl
 800462e:	4620      	mov	r0, r4
 8004630:	f000 fbcc 	bl	8004dcc <_Bfree>
 8004634:	2300      	movs	r3, #0
 8004636:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004638:	702b      	strb	r3, [r5, #0]
 800463a:	f10b 0301 	add.w	r3, fp, #1
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004642:	2b00      	cmp	r3, #0
 8004644:	f43f ace2 	beq.w	800400c <_dtoa_r+0xa4>
 8004648:	601d      	str	r5, [r3, #0]
 800464a:	e4df      	b.n	800400c <_dtoa_r+0xa4>
 800464c:	465f      	mov	r7, fp
 800464e:	462b      	mov	r3, r5
 8004650:	461d      	mov	r5, r3
 8004652:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004656:	2a39      	cmp	r2, #57	; 0x39
 8004658:	d106      	bne.n	8004668 <_dtoa_r+0x700>
 800465a:	9a00      	ldr	r2, [sp, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d1f7      	bne.n	8004650 <_dtoa_r+0x6e8>
 8004660:	9900      	ldr	r1, [sp, #0]
 8004662:	2230      	movs	r2, #48	; 0x30
 8004664:	3701      	adds	r7, #1
 8004666:	700a      	strb	r2, [r1, #0]
 8004668:	781a      	ldrb	r2, [r3, #0]
 800466a:	3201      	adds	r2, #1
 800466c:	701a      	strb	r2, [r3, #0]
 800466e:	e790      	b.n	8004592 <_dtoa_r+0x62a>
 8004670:	4ba3      	ldr	r3, [pc, #652]	; (8004900 <_dtoa_r+0x998>)
 8004672:	2200      	movs	r2, #0
 8004674:	f7fb ffc8 	bl	8000608 <__aeabi_dmul>
 8004678:	2200      	movs	r2, #0
 800467a:	2300      	movs	r3, #0
 800467c:	4606      	mov	r6, r0
 800467e:	460f      	mov	r7, r1
 8004680:	f7fc fa2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004684:	2800      	cmp	r0, #0
 8004686:	d09e      	beq.n	80045c6 <_dtoa_r+0x65e>
 8004688:	e7d0      	b.n	800462c <_dtoa_r+0x6c4>
 800468a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800468c:	2a00      	cmp	r2, #0
 800468e:	f000 80ca 	beq.w	8004826 <_dtoa_r+0x8be>
 8004692:	9a07      	ldr	r2, [sp, #28]
 8004694:	2a01      	cmp	r2, #1
 8004696:	f300 80ad 	bgt.w	80047f4 <_dtoa_r+0x88c>
 800469a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800469c:	2a00      	cmp	r2, #0
 800469e:	f000 80a5 	beq.w	80047ec <_dtoa_r+0x884>
 80046a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80046a6:	9e08      	ldr	r6, [sp, #32]
 80046a8:	9d05      	ldr	r5, [sp, #20]
 80046aa:	9a05      	ldr	r2, [sp, #20]
 80046ac:	441a      	add	r2, r3
 80046ae:	9205      	str	r2, [sp, #20]
 80046b0:	9a06      	ldr	r2, [sp, #24]
 80046b2:	2101      	movs	r1, #1
 80046b4:	441a      	add	r2, r3
 80046b6:	4620      	mov	r0, r4
 80046b8:	9206      	str	r2, [sp, #24]
 80046ba:	f000 fc3d 	bl	8004f38 <__i2b>
 80046be:	4607      	mov	r7, r0
 80046c0:	b165      	cbz	r5, 80046dc <_dtoa_r+0x774>
 80046c2:	9b06      	ldr	r3, [sp, #24]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	dd09      	ble.n	80046dc <_dtoa_r+0x774>
 80046c8:	42ab      	cmp	r3, r5
 80046ca:	9a05      	ldr	r2, [sp, #20]
 80046cc:	bfa8      	it	ge
 80046ce:	462b      	movge	r3, r5
 80046d0:	1ad2      	subs	r2, r2, r3
 80046d2:	9205      	str	r2, [sp, #20]
 80046d4:	9a06      	ldr	r2, [sp, #24]
 80046d6:	1aed      	subs	r5, r5, r3
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	9306      	str	r3, [sp, #24]
 80046dc:	9b08      	ldr	r3, [sp, #32]
 80046de:	b1f3      	cbz	r3, 800471e <_dtoa_r+0x7b6>
 80046e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80a3 	beq.w	800482e <_dtoa_r+0x8c6>
 80046e8:	2e00      	cmp	r6, #0
 80046ea:	dd10      	ble.n	800470e <_dtoa_r+0x7a6>
 80046ec:	4639      	mov	r1, r7
 80046ee:	4632      	mov	r2, r6
 80046f0:	4620      	mov	r0, r4
 80046f2:	f000 fce1 	bl	80050b8 <__pow5mult>
 80046f6:	4652      	mov	r2, sl
 80046f8:	4601      	mov	r1, r0
 80046fa:	4607      	mov	r7, r0
 80046fc:	4620      	mov	r0, r4
 80046fe:	f000 fc31 	bl	8004f64 <__multiply>
 8004702:	4651      	mov	r1, sl
 8004704:	4680      	mov	r8, r0
 8004706:	4620      	mov	r0, r4
 8004708:	f000 fb60 	bl	8004dcc <_Bfree>
 800470c:	46c2      	mov	sl, r8
 800470e:	9b08      	ldr	r3, [sp, #32]
 8004710:	1b9a      	subs	r2, r3, r6
 8004712:	d004      	beq.n	800471e <_dtoa_r+0x7b6>
 8004714:	4651      	mov	r1, sl
 8004716:	4620      	mov	r0, r4
 8004718:	f000 fcce 	bl	80050b8 <__pow5mult>
 800471c:	4682      	mov	sl, r0
 800471e:	2101      	movs	r1, #1
 8004720:	4620      	mov	r0, r4
 8004722:	f000 fc09 	bl	8004f38 <__i2b>
 8004726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004728:	2b00      	cmp	r3, #0
 800472a:	4606      	mov	r6, r0
 800472c:	f340 8081 	ble.w	8004832 <_dtoa_r+0x8ca>
 8004730:	461a      	mov	r2, r3
 8004732:	4601      	mov	r1, r0
 8004734:	4620      	mov	r0, r4
 8004736:	f000 fcbf 	bl	80050b8 <__pow5mult>
 800473a:	9b07      	ldr	r3, [sp, #28]
 800473c:	2b01      	cmp	r3, #1
 800473e:	4606      	mov	r6, r0
 8004740:	dd7a      	ble.n	8004838 <_dtoa_r+0x8d0>
 8004742:	f04f 0800 	mov.w	r8, #0
 8004746:	6933      	ldr	r3, [r6, #16]
 8004748:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800474c:	6918      	ldr	r0, [r3, #16]
 800474e:	f000 fba5 	bl	8004e9c <__hi0bits>
 8004752:	f1c0 0020 	rsb	r0, r0, #32
 8004756:	9b06      	ldr	r3, [sp, #24]
 8004758:	4418      	add	r0, r3
 800475a:	f010 001f 	ands.w	r0, r0, #31
 800475e:	f000 8094 	beq.w	800488a <_dtoa_r+0x922>
 8004762:	f1c0 0320 	rsb	r3, r0, #32
 8004766:	2b04      	cmp	r3, #4
 8004768:	f340 8085 	ble.w	8004876 <_dtoa_r+0x90e>
 800476c:	9b05      	ldr	r3, [sp, #20]
 800476e:	f1c0 001c 	rsb	r0, r0, #28
 8004772:	4403      	add	r3, r0
 8004774:	9305      	str	r3, [sp, #20]
 8004776:	9b06      	ldr	r3, [sp, #24]
 8004778:	4403      	add	r3, r0
 800477a:	4405      	add	r5, r0
 800477c:	9306      	str	r3, [sp, #24]
 800477e:	9b05      	ldr	r3, [sp, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	dd05      	ble.n	8004790 <_dtoa_r+0x828>
 8004784:	4651      	mov	r1, sl
 8004786:	461a      	mov	r2, r3
 8004788:	4620      	mov	r0, r4
 800478a:	f000 fcef 	bl	800516c <__lshift>
 800478e:	4682      	mov	sl, r0
 8004790:	9b06      	ldr	r3, [sp, #24]
 8004792:	2b00      	cmp	r3, #0
 8004794:	dd05      	ble.n	80047a2 <_dtoa_r+0x83a>
 8004796:	4631      	mov	r1, r6
 8004798:	461a      	mov	r2, r3
 800479a:	4620      	mov	r0, r4
 800479c:	f000 fce6 	bl	800516c <__lshift>
 80047a0:	4606      	mov	r6, r0
 80047a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d072      	beq.n	800488e <_dtoa_r+0x926>
 80047a8:	4631      	mov	r1, r6
 80047aa:	4650      	mov	r0, sl
 80047ac:	f000 fd4a 	bl	8005244 <__mcmp>
 80047b0:	2800      	cmp	r0, #0
 80047b2:	da6c      	bge.n	800488e <_dtoa_r+0x926>
 80047b4:	2300      	movs	r3, #0
 80047b6:	4651      	mov	r1, sl
 80047b8:	220a      	movs	r2, #10
 80047ba:	4620      	mov	r0, r4
 80047bc:	f000 fb28 	bl	8004e10 <__multadd>
 80047c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80047c6:	4682      	mov	sl, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 81b0 	beq.w	8004b2e <_dtoa_r+0xbc6>
 80047ce:	2300      	movs	r3, #0
 80047d0:	4639      	mov	r1, r7
 80047d2:	220a      	movs	r2, #10
 80047d4:	4620      	mov	r0, r4
 80047d6:	f000 fb1b 	bl	8004e10 <__multadd>
 80047da:	9b01      	ldr	r3, [sp, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	4607      	mov	r7, r0
 80047e0:	f300 8096 	bgt.w	8004910 <_dtoa_r+0x9a8>
 80047e4:	9b07      	ldr	r3, [sp, #28]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	dc59      	bgt.n	800489e <_dtoa_r+0x936>
 80047ea:	e091      	b.n	8004910 <_dtoa_r+0x9a8>
 80047ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80047ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80047f2:	e758      	b.n	80046a6 <_dtoa_r+0x73e>
 80047f4:	9b04      	ldr	r3, [sp, #16]
 80047f6:	1e5e      	subs	r6, r3, #1
 80047f8:	9b08      	ldr	r3, [sp, #32]
 80047fa:	42b3      	cmp	r3, r6
 80047fc:	bfbf      	itttt	lt
 80047fe:	9b08      	ldrlt	r3, [sp, #32]
 8004800:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8004802:	9608      	strlt	r6, [sp, #32]
 8004804:	1af3      	sublt	r3, r6, r3
 8004806:	bfb4      	ite	lt
 8004808:	18d2      	addlt	r2, r2, r3
 800480a:	1b9e      	subge	r6, r3, r6
 800480c:	9b04      	ldr	r3, [sp, #16]
 800480e:	bfbc      	itt	lt
 8004810:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8004812:	2600      	movlt	r6, #0
 8004814:	2b00      	cmp	r3, #0
 8004816:	bfb7      	itett	lt
 8004818:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800481c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004820:	1a9d      	sublt	r5, r3, r2
 8004822:	2300      	movlt	r3, #0
 8004824:	e741      	b.n	80046aa <_dtoa_r+0x742>
 8004826:	9e08      	ldr	r6, [sp, #32]
 8004828:	9d05      	ldr	r5, [sp, #20]
 800482a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800482c:	e748      	b.n	80046c0 <_dtoa_r+0x758>
 800482e:	9a08      	ldr	r2, [sp, #32]
 8004830:	e770      	b.n	8004714 <_dtoa_r+0x7ac>
 8004832:	9b07      	ldr	r3, [sp, #28]
 8004834:	2b01      	cmp	r3, #1
 8004836:	dc19      	bgt.n	800486c <_dtoa_r+0x904>
 8004838:	9b02      	ldr	r3, [sp, #8]
 800483a:	b9bb      	cbnz	r3, 800486c <_dtoa_r+0x904>
 800483c:	9b03      	ldr	r3, [sp, #12]
 800483e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004842:	b99b      	cbnz	r3, 800486c <_dtoa_r+0x904>
 8004844:	9b03      	ldr	r3, [sp, #12]
 8004846:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800484a:	0d1b      	lsrs	r3, r3, #20
 800484c:	051b      	lsls	r3, r3, #20
 800484e:	b183      	cbz	r3, 8004872 <_dtoa_r+0x90a>
 8004850:	9b05      	ldr	r3, [sp, #20]
 8004852:	3301      	adds	r3, #1
 8004854:	9305      	str	r3, [sp, #20]
 8004856:	9b06      	ldr	r3, [sp, #24]
 8004858:	3301      	adds	r3, #1
 800485a:	9306      	str	r3, [sp, #24]
 800485c:	f04f 0801 	mov.w	r8, #1
 8004860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004862:	2b00      	cmp	r3, #0
 8004864:	f47f af6f 	bne.w	8004746 <_dtoa_r+0x7de>
 8004868:	2001      	movs	r0, #1
 800486a:	e774      	b.n	8004756 <_dtoa_r+0x7ee>
 800486c:	f04f 0800 	mov.w	r8, #0
 8004870:	e7f6      	b.n	8004860 <_dtoa_r+0x8f8>
 8004872:	4698      	mov	r8, r3
 8004874:	e7f4      	b.n	8004860 <_dtoa_r+0x8f8>
 8004876:	d082      	beq.n	800477e <_dtoa_r+0x816>
 8004878:	9a05      	ldr	r2, [sp, #20]
 800487a:	331c      	adds	r3, #28
 800487c:	441a      	add	r2, r3
 800487e:	9205      	str	r2, [sp, #20]
 8004880:	9a06      	ldr	r2, [sp, #24]
 8004882:	441a      	add	r2, r3
 8004884:	441d      	add	r5, r3
 8004886:	9206      	str	r2, [sp, #24]
 8004888:	e779      	b.n	800477e <_dtoa_r+0x816>
 800488a:	4603      	mov	r3, r0
 800488c:	e7f4      	b.n	8004878 <_dtoa_r+0x910>
 800488e:	9b04      	ldr	r3, [sp, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	dc37      	bgt.n	8004904 <_dtoa_r+0x99c>
 8004894:	9b07      	ldr	r3, [sp, #28]
 8004896:	2b02      	cmp	r3, #2
 8004898:	dd34      	ble.n	8004904 <_dtoa_r+0x99c>
 800489a:	9b04      	ldr	r3, [sp, #16]
 800489c:	9301      	str	r3, [sp, #4]
 800489e:	9b01      	ldr	r3, [sp, #4]
 80048a0:	b963      	cbnz	r3, 80048bc <_dtoa_r+0x954>
 80048a2:	4631      	mov	r1, r6
 80048a4:	2205      	movs	r2, #5
 80048a6:	4620      	mov	r0, r4
 80048a8:	f000 fab2 	bl	8004e10 <__multadd>
 80048ac:	4601      	mov	r1, r0
 80048ae:	4606      	mov	r6, r0
 80048b0:	4650      	mov	r0, sl
 80048b2:	f000 fcc7 	bl	8005244 <__mcmp>
 80048b6:	2800      	cmp	r0, #0
 80048b8:	f73f adbb 	bgt.w	8004432 <_dtoa_r+0x4ca>
 80048bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048be:	9d00      	ldr	r5, [sp, #0]
 80048c0:	ea6f 0b03 	mvn.w	fp, r3
 80048c4:	f04f 0800 	mov.w	r8, #0
 80048c8:	4631      	mov	r1, r6
 80048ca:	4620      	mov	r0, r4
 80048cc:	f000 fa7e 	bl	8004dcc <_Bfree>
 80048d0:	2f00      	cmp	r7, #0
 80048d2:	f43f aeab 	beq.w	800462c <_dtoa_r+0x6c4>
 80048d6:	f1b8 0f00 	cmp.w	r8, #0
 80048da:	d005      	beq.n	80048e8 <_dtoa_r+0x980>
 80048dc:	45b8      	cmp	r8, r7
 80048de:	d003      	beq.n	80048e8 <_dtoa_r+0x980>
 80048e0:	4641      	mov	r1, r8
 80048e2:	4620      	mov	r0, r4
 80048e4:	f000 fa72 	bl	8004dcc <_Bfree>
 80048e8:	4639      	mov	r1, r7
 80048ea:	4620      	mov	r0, r4
 80048ec:	f000 fa6e 	bl	8004dcc <_Bfree>
 80048f0:	e69c      	b.n	800462c <_dtoa_r+0x6c4>
 80048f2:	2600      	movs	r6, #0
 80048f4:	4637      	mov	r7, r6
 80048f6:	e7e1      	b.n	80048bc <_dtoa_r+0x954>
 80048f8:	46bb      	mov	fp, r7
 80048fa:	4637      	mov	r7, r6
 80048fc:	e599      	b.n	8004432 <_dtoa_r+0x4ca>
 80048fe:	bf00      	nop
 8004900:	40240000 	.word	0x40240000
 8004904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 80c8 	beq.w	8004a9c <_dtoa_r+0xb34>
 800490c:	9b04      	ldr	r3, [sp, #16]
 800490e:	9301      	str	r3, [sp, #4]
 8004910:	2d00      	cmp	r5, #0
 8004912:	dd05      	ble.n	8004920 <_dtoa_r+0x9b8>
 8004914:	4639      	mov	r1, r7
 8004916:	462a      	mov	r2, r5
 8004918:	4620      	mov	r0, r4
 800491a:	f000 fc27 	bl	800516c <__lshift>
 800491e:	4607      	mov	r7, r0
 8004920:	f1b8 0f00 	cmp.w	r8, #0
 8004924:	d05b      	beq.n	80049de <_dtoa_r+0xa76>
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	4620      	mov	r0, r4
 800492a:	f000 fa0f 	bl	8004d4c <_Balloc>
 800492e:	4605      	mov	r5, r0
 8004930:	b928      	cbnz	r0, 800493e <_dtoa_r+0x9d6>
 8004932:	4b83      	ldr	r3, [pc, #524]	; (8004b40 <_dtoa_r+0xbd8>)
 8004934:	4602      	mov	r2, r0
 8004936:	f240 21ef 	movw	r1, #751	; 0x2ef
 800493a:	f7ff bb2e 	b.w	8003f9a <_dtoa_r+0x32>
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	3202      	adds	r2, #2
 8004942:	0092      	lsls	r2, r2, #2
 8004944:	f107 010c 	add.w	r1, r7, #12
 8004948:	300c      	adds	r0, #12
 800494a:	f000 ffab 	bl	80058a4 <memcpy>
 800494e:	2201      	movs	r2, #1
 8004950:	4629      	mov	r1, r5
 8004952:	4620      	mov	r0, r4
 8004954:	f000 fc0a 	bl	800516c <__lshift>
 8004958:	9b00      	ldr	r3, [sp, #0]
 800495a:	3301      	adds	r3, #1
 800495c:	9304      	str	r3, [sp, #16]
 800495e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004962:	4413      	add	r3, r2
 8004964:	9308      	str	r3, [sp, #32]
 8004966:	9b02      	ldr	r3, [sp, #8]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	46b8      	mov	r8, r7
 800496e:	9306      	str	r3, [sp, #24]
 8004970:	4607      	mov	r7, r0
 8004972:	9b04      	ldr	r3, [sp, #16]
 8004974:	4631      	mov	r1, r6
 8004976:	3b01      	subs	r3, #1
 8004978:	4650      	mov	r0, sl
 800497a:	9301      	str	r3, [sp, #4]
 800497c:	f7ff fa69 	bl	8003e52 <quorem>
 8004980:	4641      	mov	r1, r8
 8004982:	9002      	str	r0, [sp, #8]
 8004984:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004988:	4650      	mov	r0, sl
 800498a:	f000 fc5b 	bl	8005244 <__mcmp>
 800498e:	463a      	mov	r2, r7
 8004990:	9005      	str	r0, [sp, #20]
 8004992:	4631      	mov	r1, r6
 8004994:	4620      	mov	r0, r4
 8004996:	f000 fc71 	bl	800527c <__mdiff>
 800499a:	68c2      	ldr	r2, [r0, #12]
 800499c:	4605      	mov	r5, r0
 800499e:	bb02      	cbnz	r2, 80049e2 <_dtoa_r+0xa7a>
 80049a0:	4601      	mov	r1, r0
 80049a2:	4650      	mov	r0, sl
 80049a4:	f000 fc4e 	bl	8005244 <__mcmp>
 80049a8:	4602      	mov	r2, r0
 80049aa:	4629      	mov	r1, r5
 80049ac:	4620      	mov	r0, r4
 80049ae:	9209      	str	r2, [sp, #36]	; 0x24
 80049b0:	f000 fa0c 	bl	8004dcc <_Bfree>
 80049b4:	9b07      	ldr	r3, [sp, #28]
 80049b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049b8:	9d04      	ldr	r5, [sp, #16]
 80049ba:	ea43 0102 	orr.w	r1, r3, r2
 80049be:	9b06      	ldr	r3, [sp, #24]
 80049c0:	4319      	orrs	r1, r3
 80049c2:	d110      	bne.n	80049e6 <_dtoa_r+0xa7e>
 80049c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80049c8:	d029      	beq.n	8004a1e <_dtoa_r+0xab6>
 80049ca:	9b05      	ldr	r3, [sp, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	dd02      	ble.n	80049d6 <_dtoa_r+0xa6e>
 80049d0:	9b02      	ldr	r3, [sp, #8]
 80049d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80049d6:	9b01      	ldr	r3, [sp, #4]
 80049d8:	f883 9000 	strb.w	r9, [r3]
 80049dc:	e774      	b.n	80048c8 <_dtoa_r+0x960>
 80049de:	4638      	mov	r0, r7
 80049e0:	e7ba      	b.n	8004958 <_dtoa_r+0x9f0>
 80049e2:	2201      	movs	r2, #1
 80049e4:	e7e1      	b.n	80049aa <_dtoa_r+0xa42>
 80049e6:	9b05      	ldr	r3, [sp, #20]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	db04      	blt.n	80049f6 <_dtoa_r+0xa8e>
 80049ec:	9907      	ldr	r1, [sp, #28]
 80049ee:	430b      	orrs	r3, r1
 80049f0:	9906      	ldr	r1, [sp, #24]
 80049f2:	430b      	orrs	r3, r1
 80049f4:	d120      	bne.n	8004a38 <_dtoa_r+0xad0>
 80049f6:	2a00      	cmp	r2, #0
 80049f8:	dded      	ble.n	80049d6 <_dtoa_r+0xa6e>
 80049fa:	4651      	mov	r1, sl
 80049fc:	2201      	movs	r2, #1
 80049fe:	4620      	mov	r0, r4
 8004a00:	f000 fbb4 	bl	800516c <__lshift>
 8004a04:	4631      	mov	r1, r6
 8004a06:	4682      	mov	sl, r0
 8004a08:	f000 fc1c 	bl	8005244 <__mcmp>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	dc03      	bgt.n	8004a18 <_dtoa_r+0xab0>
 8004a10:	d1e1      	bne.n	80049d6 <_dtoa_r+0xa6e>
 8004a12:	f019 0f01 	tst.w	r9, #1
 8004a16:	d0de      	beq.n	80049d6 <_dtoa_r+0xa6e>
 8004a18:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004a1c:	d1d8      	bne.n	80049d0 <_dtoa_r+0xa68>
 8004a1e:	9a01      	ldr	r2, [sp, #4]
 8004a20:	2339      	movs	r3, #57	; 0x39
 8004a22:	7013      	strb	r3, [r2, #0]
 8004a24:	462b      	mov	r3, r5
 8004a26:	461d      	mov	r5, r3
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004a2e:	2a39      	cmp	r2, #57	; 0x39
 8004a30:	d06c      	beq.n	8004b0c <_dtoa_r+0xba4>
 8004a32:	3201      	adds	r2, #1
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	e747      	b.n	80048c8 <_dtoa_r+0x960>
 8004a38:	2a00      	cmp	r2, #0
 8004a3a:	dd07      	ble.n	8004a4c <_dtoa_r+0xae4>
 8004a3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004a40:	d0ed      	beq.n	8004a1e <_dtoa_r+0xab6>
 8004a42:	9a01      	ldr	r2, [sp, #4]
 8004a44:	f109 0301 	add.w	r3, r9, #1
 8004a48:	7013      	strb	r3, [r2, #0]
 8004a4a:	e73d      	b.n	80048c8 <_dtoa_r+0x960>
 8004a4c:	9b04      	ldr	r3, [sp, #16]
 8004a4e:	9a08      	ldr	r2, [sp, #32]
 8004a50:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d043      	beq.n	8004ae0 <_dtoa_r+0xb78>
 8004a58:	4651      	mov	r1, sl
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	220a      	movs	r2, #10
 8004a5e:	4620      	mov	r0, r4
 8004a60:	f000 f9d6 	bl	8004e10 <__multadd>
 8004a64:	45b8      	cmp	r8, r7
 8004a66:	4682      	mov	sl, r0
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	f04f 020a 	mov.w	r2, #10
 8004a70:	4641      	mov	r1, r8
 8004a72:	4620      	mov	r0, r4
 8004a74:	d107      	bne.n	8004a86 <_dtoa_r+0xb1e>
 8004a76:	f000 f9cb 	bl	8004e10 <__multadd>
 8004a7a:	4680      	mov	r8, r0
 8004a7c:	4607      	mov	r7, r0
 8004a7e:	9b04      	ldr	r3, [sp, #16]
 8004a80:	3301      	adds	r3, #1
 8004a82:	9304      	str	r3, [sp, #16]
 8004a84:	e775      	b.n	8004972 <_dtoa_r+0xa0a>
 8004a86:	f000 f9c3 	bl	8004e10 <__multadd>
 8004a8a:	4639      	mov	r1, r7
 8004a8c:	4680      	mov	r8, r0
 8004a8e:	2300      	movs	r3, #0
 8004a90:	220a      	movs	r2, #10
 8004a92:	4620      	mov	r0, r4
 8004a94:	f000 f9bc 	bl	8004e10 <__multadd>
 8004a98:	4607      	mov	r7, r0
 8004a9a:	e7f0      	b.n	8004a7e <_dtoa_r+0xb16>
 8004a9c:	9b04      	ldr	r3, [sp, #16]
 8004a9e:	9301      	str	r3, [sp, #4]
 8004aa0:	9d00      	ldr	r5, [sp, #0]
 8004aa2:	4631      	mov	r1, r6
 8004aa4:	4650      	mov	r0, sl
 8004aa6:	f7ff f9d4 	bl	8003e52 <quorem>
 8004aaa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004aae:	9b00      	ldr	r3, [sp, #0]
 8004ab0:	f805 9b01 	strb.w	r9, [r5], #1
 8004ab4:	1aea      	subs	r2, r5, r3
 8004ab6:	9b01      	ldr	r3, [sp, #4]
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	dd07      	ble.n	8004acc <_dtoa_r+0xb64>
 8004abc:	4651      	mov	r1, sl
 8004abe:	2300      	movs	r3, #0
 8004ac0:	220a      	movs	r2, #10
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	f000 f9a4 	bl	8004e10 <__multadd>
 8004ac8:	4682      	mov	sl, r0
 8004aca:	e7ea      	b.n	8004aa2 <_dtoa_r+0xb3a>
 8004acc:	9b01      	ldr	r3, [sp, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	bfc8      	it	gt
 8004ad2:	461d      	movgt	r5, r3
 8004ad4:	9b00      	ldr	r3, [sp, #0]
 8004ad6:	bfd8      	it	le
 8004ad8:	2501      	movle	r5, #1
 8004ada:	441d      	add	r5, r3
 8004adc:	f04f 0800 	mov.w	r8, #0
 8004ae0:	4651      	mov	r1, sl
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	f000 fb41 	bl	800516c <__lshift>
 8004aea:	4631      	mov	r1, r6
 8004aec:	4682      	mov	sl, r0
 8004aee:	f000 fba9 	bl	8005244 <__mcmp>
 8004af2:	2800      	cmp	r0, #0
 8004af4:	dc96      	bgt.n	8004a24 <_dtoa_r+0xabc>
 8004af6:	d102      	bne.n	8004afe <_dtoa_r+0xb96>
 8004af8:	f019 0f01 	tst.w	r9, #1
 8004afc:	d192      	bne.n	8004a24 <_dtoa_r+0xabc>
 8004afe:	462b      	mov	r3, r5
 8004b00:	461d      	mov	r5, r3
 8004b02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b06:	2a30      	cmp	r2, #48	; 0x30
 8004b08:	d0fa      	beq.n	8004b00 <_dtoa_r+0xb98>
 8004b0a:	e6dd      	b.n	80048c8 <_dtoa_r+0x960>
 8004b0c:	9a00      	ldr	r2, [sp, #0]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d189      	bne.n	8004a26 <_dtoa_r+0xabe>
 8004b12:	f10b 0b01 	add.w	fp, fp, #1
 8004b16:	2331      	movs	r3, #49	; 0x31
 8004b18:	e796      	b.n	8004a48 <_dtoa_r+0xae0>
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <_dtoa_r+0xbdc>)
 8004b1c:	f7ff ba99 	b.w	8004052 <_dtoa_r+0xea>
 8004b20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f47f aa6d 	bne.w	8004002 <_dtoa_r+0x9a>
 8004b28:	4b07      	ldr	r3, [pc, #28]	; (8004b48 <_dtoa_r+0xbe0>)
 8004b2a:	f7ff ba92 	b.w	8004052 <_dtoa_r+0xea>
 8004b2e:	9b01      	ldr	r3, [sp, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	dcb5      	bgt.n	8004aa0 <_dtoa_r+0xb38>
 8004b34:	9b07      	ldr	r3, [sp, #28]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	f73f aeb1 	bgt.w	800489e <_dtoa_r+0x936>
 8004b3c:	e7b0      	b.n	8004aa0 <_dtoa_r+0xb38>
 8004b3e:	bf00      	nop
 8004b40:	08006800 	.word	0x08006800
 8004b44:	08006760 	.word	0x08006760
 8004b48:	08006784 	.word	0x08006784

08004b4c <_free_r>:
 8004b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b4e:	2900      	cmp	r1, #0
 8004b50:	d044      	beq.n	8004bdc <_free_r+0x90>
 8004b52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b56:	9001      	str	r0, [sp, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f1a1 0404 	sub.w	r4, r1, #4
 8004b5e:	bfb8      	it	lt
 8004b60:	18e4      	addlt	r4, r4, r3
 8004b62:	f000 f8e7 	bl	8004d34 <__malloc_lock>
 8004b66:	4a1e      	ldr	r2, [pc, #120]	; (8004be0 <_free_r+0x94>)
 8004b68:	9801      	ldr	r0, [sp, #4]
 8004b6a:	6813      	ldr	r3, [r2, #0]
 8004b6c:	b933      	cbnz	r3, 8004b7c <_free_r+0x30>
 8004b6e:	6063      	str	r3, [r4, #4]
 8004b70:	6014      	str	r4, [r2, #0]
 8004b72:	b003      	add	sp, #12
 8004b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b78:	f000 b8e2 	b.w	8004d40 <__malloc_unlock>
 8004b7c:	42a3      	cmp	r3, r4
 8004b7e:	d908      	bls.n	8004b92 <_free_r+0x46>
 8004b80:	6825      	ldr	r5, [r4, #0]
 8004b82:	1961      	adds	r1, r4, r5
 8004b84:	428b      	cmp	r3, r1
 8004b86:	bf01      	itttt	eq
 8004b88:	6819      	ldreq	r1, [r3, #0]
 8004b8a:	685b      	ldreq	r3, [r3, #4]
 8004b8c:	1949      	addeq	r1, r1, r5
 8004b8e:	6021      	streq	r1, [r4, #0]
 8004b90:	e7ed      	b.n	8004b6e <_free_r+0x22>
 8004b92:	461a      	mov	r2, r3
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	b10b      	cbz	r3, 8004b9c <_free_r+0x50>
 8004b98:	42a3      	cmp	r3, r4
 8004b9a:	d9fa      	bls.n	8004b92 <_free_r+0x46>
 8004b9c:	6811      	ldr	r1, [r2, #0]
 8004b9e:	1855      	adds	r5, r2, r1
 8004ba0:	42a5      	cmp	r5, r4
 8004ba2:	d10b      	bne.n	8004bbc <_free_r+0x70>
 8004ba4:	6824      	ldr	r4, [r4, #0]
 8004ba6:	4421      	add	r1, r4
 8004ba8:	1854      	adds	r4, r2, r1
 8004baa:	42a3      	cmp	r3, r4
 8004bac:	6011      	str	r1, [r2, #0]
 8004bae:	d1e0      	bne.n	8004b72 <_free_r+0x26>
 8004bb0:	681c      	ldr	r4, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	6053      	str	r3, [r2, #4]
 8004bb6:	440c      	add	r4, r1
 8004bb8:	6014      	str	r4, [r2, #0]
 8004bba:	e7da      	b.n	8004b72 <_free_r+0x26>
 8004bbc:	d902      	bls.n	8004bc4 <_free_r+0x78>
 8004bbe:	230c      	movs	r3, #12
 8004bc0:	6003      	str	r3, [r0, #0]
 8004bc2:	e7d6      	b.n	8004b72 <_free_r+0x26>
 8004bc4:	6825      	ldr	r5, [r4, #0]
 8004bc6:	1961      	adds	r1, r4, r5
 8004bc8:	428b      	cmp	r3, r1
 8004bca:	bf04      	itt	eq
 8004bcc:	6819      	ldreq	r1, [r3, #0]
 8004bce:	685b      	ldreq	r3, [r3, #4]
 8004bd0:	6063      	str	r3, [r4, #4]
 8004bd2:	bf04      	itt	eq
 8004bd4:	1949      	addeq	r1, r1, r5
 8004bd6:	6021      	streq	r1, [r4, #0]
 8004bd8:	6054      	str	r4, [r2, #4]
 8004bda:	e7ca      	b.n	8004b72 <_free_r+0x26>
 8004bdc:	b003      	add	sp, #12
 8004bde:	bd30      	pop	{r4, r5, pc}
 8004be0:	20000410 	.word	0x20000410

08004be4 <malloc>:
 8004be4:	4b02      	ldr	r3, [pc, #8]	; (8004bf0 <malloc+0xc>)
 8004be6:	4601      	mov	r1, r0
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	f000 b823 	b.w	8004c34 <_malloc_r>
 8004bee:	bf00      	nop
 8004bf0:	2000007c 	.word	0x2000007c

08004bf4 <sbrk_aligned>:
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	4e0e      	ldr	r6, [pc, #56]	; (8004c30 <sbrk_aligned+0x3c>)
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	6831      	ldr	r1, [r6, #0]
 8004bfc:	4605      	mov	r5, r0
 8004bfe:	b911      	cbnz	r1, 8004c06 <sbrk_aligned+0x12>
 8004c00:	f000 fe40 	bl	8005884 <_sbrk_r>
 8004c04:	6030      	str	r0, [r6, #0]
 8004c06:	4621      	mov	r1, r4
 8004c08:	4628      	mov	r0, r5
 8004c0a:	f000 fe3b 	bl	8005884 <_sbrk_r>
 8004c0e:	1c43      	adds	r3, r0, #1
 8004c10:	d00a      	beq.n	8004c28 <sbrk_aligned+0x34>
 8004c12:	1cc4      	adds	r4, r0, #3
 8004c14:	f024 0403 	bic.w	r4, r4, #3
 8004c18:	42a0      	cmp	r0, r4
 8004c1a:	d007      	beq.n	8004c2c <sbrk_aligned+0x38>
 8004c1c:	1a21      	subs	r1, r4, r0
 8004c1e:	4628      	mov	r0, r5
 8004c20:	f000 fe30 	bl	8005884 <_sbrk_r>
 8004c24:	3001      	adds	r0, #1
 8004c26:	d101      	bne.n	8004c2c <sbrk_aligned+0x38>
 8004c28:	f04f 34ff 	mov.w	r4, #4294967295
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	bd70      	pop	{r4, r5, r6, pc}
 8004c30:	20000414 	.word	0x20000414

08004c34 <_malloc_r>:
 8004c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c38:	1ccd      	adds	r5, r1, #3
 8004c3a:	f025 0503 	bic.w	r5, r5, #3
 8004c3e:	3508      	adds	r5, #8
 8004c40:	2d0c      	cmp	r5, #12
 8004c42:	bf38      	it	cc
 8004c44:	250c      	movcc	r5, #12
 8004c46:	2d00      	cmp	r5, #0
 8004c48:	4607      	mov	r7, r0
 8004c4a:	db01      	blt.n	8004c50 <_malloc_r+0x1c>
 8004c4c:	42a9      	cmp	r1, r5
 8004c4e:	d905      	bls.n	8004c5c <_malloc_r+0x28>
 8004c50:	230c      	movs	r3, #12
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	2600      	movs	r6, #0
 8004c56:	4630      	mov	r0, r6
 8004c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004d30 <_malloc_r+0xfc>
 8004c60:	f000 f868 	bl	8004d34 <__malloc_lock>
 8004c64:	f8d8 3000 	ldr.w	r3, [r8]
 8004c68:	461c      	mov	r4, r3
 8004c6a:	bb5c      	cbnz	r4, 8004cc4 <_malloc_r+0x90>
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	4638      	mov	r0, r7
 8004c70:	f7ff ffc0 	bl	8004bf4 <sbrk_aligned>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	4604      	mov	r4, r0
 8004c78:	d155      	bne.n	8004d26 <_malloc_r+0xf2>
 8004c7a:	f8d8 4000 	ldr.w	r4, [r8]
 8004c7e:	4626      	mov	r6, r4
 8004c80:	2e00      	cmp	r6, #0
 8004c82:	d145      	bne.n	8004d10 <_malloc_r+0xdc>
 8004c84:	2c00      	cmp	r4, #0
 8004c86:	d048      	beq.n	8004d1a <_malloc_r+0xe6>
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	4638      	mov	r0, r7
 8004c8e:	eb04 0903 	add.w	r9, r4, r3
 8004c92:	f000 fdf7 	bl	8005884 <_sbrk_r>
 8004c96:	4581      	cmp	r9, r0
 8004c98:	d13f      	bne.n	8004d1a <_malloc_r+0xe6>
 8004c9a:	6821      	ldr	r1, [r4, #0]
 8004c9c:	1a6d      	subs	r5, r5, r1
 8004c9e:	4629      	mov	r1, r5
 8004ca0:	4638      	mov	r0, r7
 8004ca2:	f7ff ffa7 	bl	8004bf4 <sbrk_aligned>
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	d037      	beq.n	8004d1a <_malloc_r+0xe6>
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	442b      	add	r3, r5
 8004cae:	6023      	str	r3, [r4, #0]
 8004cb0:	f8d8 3000 	ldr.w	r3, [r8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d038      	beq.n	8004d2a <_malloc_r+0xf6>
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	42a2      	cmp	r2, r4
 8004cbc:	d12b      	bne.n	8004d16 <_malloc_r+0xe2>
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	605a      	str	r2, [r3, #4]
 8004cc2:	e00f      	b.n	8004ce4 <_malloc_r+0xb0>
 8004cc4:	6822      	ldr	r2, [r4, #0]
 8004cc6:	1b52      	subs	r2, r2, r5
 8004cc8:	d41f      	bmi.n	8004d0a <_malloc_r+0xd6>
 8004cca:	2a0b      	cmp	r2, #11
 8004ccc:	d917      	bls.n	8004cfe <_malloc_r+0xca>
 8004cce:	1961      	adds	r1, r4, r5
 8004cd0:	42a3      	cmp	r3, r4
 8004cd2:	6025      	str	r5, [r4, #0]
 8004cd4:	bf18      	it	ne
 8004cd6:	6059      	strne	r1, [r3, #4]
 8004cd8:	6863      	ldr	r3, [r4, #4]
 8004cda:	bf08      	it	eq
 8004cdc:	f8c8 1000 	streq.w	r1, [r8]
 8004ce0:	5162      	str	r2, [r4, r5]
 8004ce2:	604b      	str	r3, [r1, #4]
 8004ce4:	4638      	mov	r0, r7
 8004ce6:	f104 060b 	add.w	r6, r4, #11
 8004cea:	f000 f829 	bl	8004d40 <__malloc_unlock>
 8004cee:	f026 0607 	bic.w	r6, r6, #7
 8004cf2:	1d23      	adds	r3, r4, #4
 8004cf4:	1af2      	subs	r2, r6, r3
 8004cf6:	d0ae      	beq.n	8004c56 <_malloc_r+0x22>
 8004cf8:	1b9b      	subs	r3, r3, r6
 8004cfa:	50a3      	str	r3, [r4, r2]
 8004cfc:	e7ab      	b.n	8004c56 <_malloc_r+0x22>
 8004cfe:	42a3      	cmp	r3, r4
 8004d00:	6862      	ldr	r2, [r4, #4]
 8004d02:	d1dd      	bne.n	8004cc0 <_malloc_r+0x8c>
 8004d04:	f8c8 2000 	str.w	r2, [r8]
 8004d08:	e7ec      	b.n	8004ce4 <_malloc_r+0xb0>
 8004d0a:	4623      	mov	r3, r4
 8004d0c:	6864      	ldr	r4, [r4, #4]
 8004d0e:	e7ac      	b.n	8004c6a <_malloc_r+0x36>
 8004d10:	4634      	mov	r4, r6
 8004d12:	6876      	ldr	r6, [r6, #4]
 8004d14:	e7b4      	b.n	8004c80 <_malloc_r+0x4c>
 8004d16:	4613      	mov	r3, r2
 8004d18:	e7cc      	b.n	8004cb4 <_malloc_r+0x80>
 8004d1a:	230c      	movs	r3, #12
 8004d1c:	603b      	str	r3, [r7, #0]
 8004d1e:	4638      	mov	r0, r7
 8004d20:	f000 f80e 	bl	8004d40 <__malloc_unlock>
 8004d24:	e797      	b.n	8004c56 <_malloc_r+0x22>
 8004d26:	6025      	str	r5, [r4, #0]
 8004d28:	e7dc      	b.n	8004ce4 <_malloc_r+0xb0>
 8004d2a:	605b      	str	r3, [r3, #4]
 8004d2c:	deff      	udf	#255	; 0xff
 8004d2e:	bf00      	nop
 8004d30:	20000410 	.word	0x20000410

08004d34 <__malloc_lock>:
 8004d34:	4801      	ldr	r0, [pc, #4]	; (8004d3c <__malloc_lock+0x8>)
 8004d36:	f7ff b88a 	b.w	8003e4e <__retarget_lock_acquire_recursive>
 8004d3a:	bf00      	nop
 8004d3c:	2000040c 	.word	0x2000040c

08004d40 <__malloc_unlock>:
 8004d40:	4801      	ldr	r0, [pc, #4]	; (8004d48 <__malloc_unlock+0x8>)
 8004d42:	f7ff b885 	b.w	8003e50 <__retarget_lock_release_recursive>
 8004d46:	bf00      	nop
 8004d48:	2000040c 	.word	0x2000040c

08004d4c <_Balloc>:
 8004d4c:	b570      	push	{r4, r5, r6, lr}
 8004d4e:	69c6      	ldr	r6, [r0, #28]
 8004d50:	4604      	mov	r4, r0
 8004d52:	460d      	mov	r5, r1
 8004d54:	b976      	cbnz	r6, 8004d74 <_Balloc+0x28>
 8004d56:	2010      	movs	r0, #16
 8004d58:	f7ff ff44 	bl	8004be4 <malloc>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	61e0      	str	r0, [r4, #28]
 8004d60:	b920      	cbnz	r0, 8004d6c <_Balloc+0x20>
 8004d62:	4b18      	ldr	r3, [pc, #96]	; (8004dc4 <_Balloc+0x78>)
 8004d64:	4818      	ldr	r0, [pc, #96]	; (8004dc8 <_Balloc+0x7c>)
 8004d66:	216b      	movs	r1, #107	; 0x6b
 8004d68:	f000 fdaa 	bl	80058c0 <__assert_func>
 8004d6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d70:	6006      	str	r6, [r0, #0]
 8004d72:	60c6      	str	r6, [r0, #12]
 8004d74:	69e6      	ldr	r6, [r4, #28]
 8004d76:	68f3      	ldr	r3, [r6, #12]
 8004d78:	b183      	cbz	r3, 8004d9c <_Balloc+0x50>
 8004d7a:	69e3      	ldr	r3, [r4, #28]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004d82:	b9b8      	cbnz	r0, 8004db4 <_Balloc+0x68>
 8004d84:	2101      	movs	r1, #1
 8004d86:	fa01 f605 	lsl.w	r6, r1, r5
 8004d8a:	1d72      	adds	r2, r6, #5
 8004d8c:	0092      	lsls	r2, r2, #2
 8004d8e:	4620      	mov	r0, r4
 8004d90:	f000 fdb4 	bl	80058fc <_calloc_r>
 8004d94:	b160      	cbz	r0, 8004db0 <_Balloc+0x64>
 8004d96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004d9a:	e00e      	b.n	8004dba <_Balloc+0x6e>
 8004d9c:	2221      	movs	r2, #33	; 0x21
 8004d9e:	2104      	movs	r1, #4
 8004da0:	4620      	mov	r0, r4
 8004da2:	f000 fdab 	bl	80058fc <_calloc_r>
 8004da6:	69e3      	ldr	r3, [r4, #28]
 8004da8:	60f0      	str	r0, [r6, #12]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e4      	bne.n	8004d7a <_Balloc+0x2e>
 8004db0:	2000      	movs	r0, #0
 8004db2:	bd70      	pop	{r4, r5, r6, pc}
 8004db4:	6802      	ldr	r2, [r0, #0]
 8004db6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004dba:	2300      	movs	r3, #0
 8004dbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004dc0:	e7f7      	b.n	8004db2 <_Balloc+0x66>
 8004dc2:	bf00      	nop
 8004dc4:	08006791 	.word	0x08006791
 8004dc8:	08006811 	.word	0x08006811

08004dcc <_Bfree>:
 8004dcc:	b570      	push	{r4, r5, r6, lr}
 8004dce:	69c6      	ldr	r6, [r0, #28]
 8004dd0:	4605      	mov	r5, r0
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	b976      	cbnz	r6, 8004df4 <_Bfree+0x28>
 8004dd6:	2010      	movs	r0, #16
 8004dd8:	f7ff ff04 	bl	8004be4 <malloc>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	61e8      	str	r0, [r5, #28]
 8004de0:	b920      	cbnz	r0, 8004dec <_Bfree+0x20>
 8004de2:	4b09      	ldr	r3, [pc, #36]	; (8004e08 <_Bfree+0x3c>)
 8004de4:	4809      	ldr	r0, [pc, #36]	; (8004e0c <_Bfree+0x40>)
 8004de6:	218f      	movs	r1, #143	; 0x8f
 8004de8:	f000 fd6a 	bl	80058c0 <__assert_func>
 8004dec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004df0:	6006      	str	r6, [r0, #0]
 8004df2:	60c6      	str	r6, [r0, #12]
 8004df4:	b13c      	cbz	r4, 8004e06 <_Bfree+0x3a>
 8004df6:	69eb      	ldr	r3, [r5, #28]
 8004df8:	6862      	ldr	r2, [r4, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e00:	6021      	str	r1, [r4, #0]
 8004e02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004e06:	bd70      	pop	{r4, r5, r6, pc}
 8004e08:	08006791 	.word	0x08006791
 8004e0c:	08006811 	.word	0x08006811

08004e10 <__multadd>:
 8004e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e14:	690d      	ldr	r5, [r1, #16]
 8004e16:	4607      	mov	r7, r0
 8004e18:	460c      	mov	r4, r1
 8004e1a:	461e      	mov	r6, r3
 8004e1c:	f101 0c14 	add.w	ip, r1, #20
 8004e20:	2000      	movs	r0, #0
 8004e22:	f8dc 3000 	ldr.w	r3, [ip]
 8004e26:	b299      	uxth	r1, r3
 8004e28:	fb02 6101 	mla	r1, r2, r1, r6
 8004e2c:	0c1e      	lsrs	r6, r3, #16
 8004e2e:	0c0b      	lsrs	r3, r1, #16
 8004e30:	fb02 3306 	mla	r3, r2, r6, r3
 8004e34:	b289      	uxth	r1, r1
 8004e36:	3001      	adds	r0, #1
 8004e38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004e3c:	4285      	cmp	r5, r0
 8004e3e:	f84c 1b04 	str.w	r1, [ip], #4
 8004e42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004e46:	dcec      	bgt.n	8004e22 <__multadd+0x12>
 8004e48:	b30e      	cbz	r6, 8004e8e <__multadd+0x7e>
 8004e4a:	68a3      	ldr	r3, [r4, #8]
 8004e4c:	42ab      	cmp	r3, r5
 8004e4e:	dc19      	bgt.n	8004e84 <__multadd+0x74>
 8004e50:	6861      	ldr	r1, [r4, #4]
 8004e52:	4638      	mov	r0, r7
 8004e54:	3101      	adds	r1, #1
 8004e56:	f7ff ff79 	bl	8004d4c <_Balloc>
 8004e5a:	4680      	mov	r8, r0
 8004e5c:	b928      	cbnz	r0, 8004e6a <__multadd+0x5a>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <__multadd+0x84>)
 8004e62:	480d      	ldr	r0, [pc, #52]	; (8004e98 <__multadd+0x88>)
 8004e64:	21ba      	movs	r1, #186	; 0xba
 8004e66:	f000 fd2b 	bl	80058c0 <__assert_func>
 8004e6a:	6922      	ldr	r2, [r4, #16]
 8004e6c:	3202      	adds	r2, #2
 8004e6e:	f104 010c 	add.w	r1, r4, #12
 8004e72:	0092      	lsls	r2, r2, #2
 8004e74:	300c      	adds	r0, #12
 8004e76:	f000 fd15 	bl	80058a4 <memcpy>
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	4638      	mov	r0, r7
 8004e7e:	f7ff ffa5 	bl	8004dcc <_Bfree>
 8004e82:	4644      	mov	r4, r8
 8004e84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004e88:	3501      	adds	r5, #1
 8004e8a:	615e      	str	r6, [r3, #20]
 8004e8c:	6125      	str	r5, [r4, #16]
 8004e8e:	4620      	mov	r0, r4
 8004e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e94:	08006800 	.word	0x08006800
 8004e98:	08006811 	.word	0x08006811

08004e9c <__hi0bits>:
 8004e9c:	0c03      	lsrs	r3, r0, #16
 8004e9e:	041b      	lsls	r3, r3, #16
 8004ea0:	b9d3      	cbnz	r3, 8004ed8 <__hi0bits+0x3c>
 8004ea2:	0400      	lsls	r0, r0, #16
 8004ea4:	2310      	movs	r3, #16
 8004ea6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004eaa:	bf04      	itt	eq
 8004eac:	0200      	lsleq	r0, r0, #8
 8004eae:	3308      	addeq	r3, #8
 8004eb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004eb4:	bf04      	itt	eq
 8004eb6:	0100      	lsleq	r0, r0, #4
 8004eb8:	3304      	addeq	r3, #4
 8004eba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004ebe:	bf04      	itt	eq
 8004ec0:	0080      	lsleq	r0, r0, #2
 8004ec2:	3302      	addeq	r3, #2
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	db05      	blt.n	8004ed4 <__hi0bits+0x38>
 8004ec8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004ecc:	f103 0301 	add.w	r3, r3, #1
 8004ed0:	bf08      	it	eq
 8004ed2:	2320      	moveq	r3, #32
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	4770      	bx	lr
 8004ed8:	2300      	movs	r3, #0
 8004eda:	e7e4      	b.n	8004ea6 <__hi0bits+0xa>

08004edc <__lo0bits>:
 8004edc:	6803      	ldr	r3, [r0, #0]
 8004ede:	f013 0207 	ands.w	r2, r3, #7
 8004ee2:	d00c      	beq.n	8004efe <__lo0bits+0x22>
 8004ee4:	07d9      	lsls	r1, r3, #31
 8004ee6:	d422      	bmi.n	8004f2e <__lo0bits+0x52>
 8004ee8:	079a      	lsls	r2, r3, #30
 8004eea:	bf49      	itett	mi
 8004eec:	085b      	lsrmi	r3, r3, #1
 8004eee:	089b      	lsrpl	r3, r3, #2
 8004ef0:	6003      	strmi	r3, [r0, #0]
 8004ef2:	2201      	movmi	r2, #1
 8004ef4:	bf5c      	itt	pl
 8004ef6:	6003      	strpl	r3, [r0, #0]
 8004ef8:	2202      	movpl	r2, #2
 8004efa:	4610      	mov	r0, r2
 8004efc:	4770      	bx	lr
 8004efe:	b299      	uxth	r1, r3
 8004f00:	b909      	cbnz	r1, 8004f06 <__lo0bits+0x2a>
 8004f02:	0c1b      	lsrs	r3, r3, #16
 8004f04:	2210      	movs	r2, #16
 8004f06:	b2d9      	uxtb	r1, r3
 8004f08:	b909      	cbnz	r1, 8004f0e <__lo0bits+0x32>
 8004f0a:	3208      	adds	r2, #8
 8004f0c:	0a1b      	lsrs	r3, r3, #8
 8004f0e:	0719      	lsls	r1, r3, #28
 8004f10:	bf04      	itt	eq
 8004f12:	091b      	lsreq	r3, r3, #4
 8004f14:	3204      	addeq	r2, #4
 8004f16:	0799      	lsls	r1, r3, #30
 8004f18:	bf04      	itt	eq
 8004f1a:	089b      	lsreq	r3, r3, #2
 8004f1c:	3202      	addeq	r2, #2
 8004f1e:	07d9      	lsls	r1, r3, #31
 8004f20:	d403      	bmi.n	8004f2a <__lo0bits+0x4e>
 8004f22:	085b      	lsrs	r3, r3, #1
 8004f24:	f102 0201 	add.w	r2, r2, #1
 8004f28:	d003      	beq.n	8004f32 <__lo0bits+0x56>
 8004f2a:	6003      	str	r3, [r0, #0]
 8004f2c:	e7e5      	b.n	8004efa <__lo0bits+0x1e>
 8004f2e:	2200      	movs	r2, #0
 8004f30:	e7e3      	b.n	8004efa <__lo0bits+0x1e>
 8004f32:	2220      	movs	r2, #32
 8004f34:	e7e1      	b.n	8004efa <__lo0bits+0x1e>
	...

08004f38 <__i2b>:
 8004f38:	b510      	push	{r4, lr}
 8004f3a:	460c      	mov	r4, r1
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	f7ff ff05 	bl	8004d4c <_Balloc>
 8004f42:	4602      	mov	r2, r0
 8004f44:	b928      	cbnz	r0, 8004f52 <__i2b+0x1a>
 8004f46:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <__i2b+0x24>)
 8004f48:	4805      	ldr	r0, [pc, #20]	; (8004f60 <__i2b+0x28>)
 8004f4a:	f240 1145 	movw	r1, #325	; 0x145
 8004f4e:	f000 fcb7 	bl	80058c0 <__assert_func>
 8004f52:	2301      	movs	r3, #1
 8004f54:	6144      	str	r4, [r0, #20]
 8004f56:	6103      	str	r3, [r0, #16]
 8004f58:	bd10      	pop	{r4, pc}
 8004f5a:	bf00      	nop
 8004f5c:	08006800 	.word	0x08006800
 8004f60:	08006811 	.word	0x08006811

08004f64 <__multiply>:
 8004f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f68:	4691      	mov	r9, r2
 8004f6a:	690a      	ldr	r2, [r1, #16]
 8004f6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	bfb8      	it	lt
 8004f74:	460b      	movlt	r3, r1
 8004f76:	460c      	mov	r4, r1
 8004f78:	bfbc      	itt	lt
 8004f7a:	464c      	movlt	r4, r9
 8004f7c:	4699      	movlt	r9, r3
 8004f7e:	6927      	ldr	r7, [r4, #16]
 8004f80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004f84:	68a3      	ldr	r3, [r4, #8]
 8004f86:	6861      	ldr	r1, [r4, #4]
 8004f88:	eb07 060a 	add.w	r6, r7, sl
 8004f8c:	42b3      	cmp	r3, r6
 8004f8e:	b085      	sub	sp, #20
 8004f90:	bfb8      	it	lt
 8004f92:	3101      	addlt	r1, #1
 8004f94:	f7ff feda 	bl	8004d4c <_Balloc>
 8004f98:	b930      	cbnz	r0, 8004fa8 <__multiply+0x44>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	4b44      	ldr	r3, [pc, #272]	; (80050b0 <__multiply+0x14c>)
 8004f9e:	4845      	ldr	r0, [pc, #276]	; (80050b4 <__multiply+0x150>)
 8004fa0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004fa4:	f000 fc8c 	bl	80058c0 <__assert_func>
 8004fa8:	f100 0514 	add.w	r5, r0, #20
 8004fac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004fb0:	462b      	mov	r3, r5
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	4543      	cmp	r3, r8
 8004fb6:	d321      	bcc.n	8004ffc <__multiply+0x98>
 8004fb8:	f104 0314 	add.w	r3, r4, #20
 8004fbc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004fc0:	f109 0314 	add.w	r3, r9, #20
 8004fc4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004fc8:	9202      	str	r2, [sp, #8]
 8004fca:	1b3a      	subs	r2, r7, r4
 8004fcc:	3a15      	subs	r2, #21
 8004fce:	f022 0203 	bic.w	r2, r2, #3
 8004fd2:	3204      	adds	r2, #4
 8004fd4:	f104 0115 	add.w	r1, r4, #21
 8004fd8:	428f      	cmp	r7, r1
 8004fda:	bf38      	it	cc
 8004fdc:	2204      	movcc	r2, #4
 8004fde:	9201      	str	r2, [sp, #4]
 8004fe0:	9a02      	ldr	r2, [sp, #8]
 8004fe2:	9303      	str	r3, [sp, #12]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d80c      	bhi.n	8005002 <__multiply+0x9e>
 8004fe8:	2e00      	cmp	r6, #0
 8004fea:	dd03      	ble.n	8004ff4 <__multiply+0x90>
 8004fec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d05b      	beq.n	80050ac <__multiply+0x148>
 8004ff4:	6106      	str	r6, [r0, #16]
 8004ff6:	b005      	add	sp, #20
 8004ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ffc:	f843 2b04 	str.w	r2, [r3], #4
 8005000:	e7d8      	b.n	8004fb4 <__multiply+0x50>
 8005002:	f8b3 a000 	ldrh.w	sl, [r3]
 8005006:	f1ba 0f00 	cmp.w	sl, #0
 800500a:	d024      	beq.n	8005056 <__multiply+0xf2>
 800500c:	f104 0e14 	add.w	lr, r4, #20
 8005010:	46a9      	mov	r9, r5
 8005012:	f04f 0c00 	mov.w	ip, #0
 8005016:	f85e 2b04 	ldr.w	r2, [lr], #4
 800501a:	f8d9 1000 	ldr.w	r1, [r9]
 800501e:	fa1f fb82 	uxth.w	fp, r2
 8005022:	b289      	uxth	r1, r1
 8005024:	fb0a 110b 	mla	r1, sl, fp, r1
 8005028:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800502c:	f8d9 2000 	ldr.w	r2, [r9]
 8005030:	4461      	add	r1, ip
 8005032:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005036:	fb0a c20b 	mla	r2, sl, fp, ip
 800503a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800503e:	b289      	uxth	r1, r1
 8005040:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005044:	4577      	cmp	r7, lr
 8005046:	f849 1b04 	str.w	r1, [r9], #4
 800504a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800504e:	d8e2      	bhi.n	8005016 <__multiply+0xb2>
 8005050:	9a01      	ldr	r2, [sp, #4]
 8005052:	f845 c002 	str.w	ip, [r5, r2]
 8005056:	9a03      	ldr	r2, [sp, #12]
 8005058:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800505c:	3304      	adds	r3, #4
 800505e:	f1b9 0f00 	cmp.w	r9, #0
 8005062:	d021      	beq.n	80050a8 <__multiply+0x144>
 8005064:	6829      	ldr	r1, [r5, #0]
 8005066:	f104 0c14 	add.w	ip, r4, #20
 800506a:	46ae      	mov	lr, r5
 800506c:	f04f 0a00 	mov.w	sl, #0
 8005070:	f8bc b000 	ldrh.w	fp, [ip]
 8005074:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005078:	fb09 220b 	mla	r2, r9, fp, r2
 800507c:	4452      	add	r2, sl
 800507e:	b289      	uxth	r1, r1
 8005080:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005084:	f84e 1b04 	str.w	r1, [lr], #4
 8005088:	f85c 1b04 	ldr.w	r1, [ip], #4
 800508c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005090:	f8be 1000 	ldrh.w	r1, [lr]
 8005094:	fb09 110a 	mla	r1, r9, sl, r1
 8005098:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800509c:	4567      	cmp	r7, ip
 800509e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80050a2:	d8e5      	bhi.n	8005070 <__multiply+0x10c>
 80050a4:	9a01      	ldr	r2, [sp, #4]
 80050a6:	50a9      	str	r1, [r5, r2]
 80050a8:	3504      	adds	r5, #4
 80050aa:	e799      	b.n	8004fe0 <__multiply+0x7c>
 80050ac:	3e01      	subs	r6, #1
 80050ae:	e79b      	b.n	8004fe8 <__multiply+0x84>
 80050b0:	08006800 	.word	0x08006800
 80050b4:	08006811 	.word	0x08006811

080050b8 <__pow5mult>:
 80050b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050bc:	4615      	mov	r5, r2
 80050be:	f012 0203 	ands.w	r2, r2, #3
 80050c2:	4606      	mov	r6, r0
 80050c4:	460f      	mov	r7, r1
 80050c6:	d007      	beq.n	80050d8 <__pow5mult+0x20>
 80050c8:	4c25      	ldr	r4, [pc, #148]	; (8005160 <__pow5mult+0xa8>)
 80050ca:	3a01      	subs	r2, #1
 80050cc:	2300      	movs	r3, #0
 80050ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80050d2:	f7ff fe9d 	bl	8004e10 <__multadd>
 80050d6:	4607      	mov	r7, r0
 80050d8:	10ad      	asrs	r5, r5, #2
 80050da:	d03d      	beq.n	8005158 <__pow5mult+0xa0>
 80050dc:	69f4      	ldr	r4, [r6, #28]
 80050de:	b97c      	cbnz	r4, 8005100 <__pow5mult+0x48>
 80050e0:	2010      	movs	r0, #16
 80050e2:	f7ff fd7f 	bl	8004be4 <malloc>
 80050e6:	4602      	mov	r2, r0
 80050e8:	61f0      	str	r0, [r6, #28]
 80050ea:	b928      	cbnz	r0, 80050f8 <__pow5mult+0x40>
 80050ec:	4b1d      	ldr	r3, [pc, #116]	; (8005164 <__pow5mult+0xac>)
 80050ee:	481e      	ldr	r0, [pc, #120]	; (8005168 <__pow5mult+0xb0>)
 80050f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80050f4:	f000 fbe4 	bl	80058c0 <__assert_func>
 80050f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80050fc:	6004      	str	r4, [r0, #0]
 80050fe:	60c4      	str	r4, [r0, #12]
 8005100:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005104:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005108:	b94c      	cbnz	r4, 800511e <__pow5mult+0x66>
 800510a:	f240 2171 	movw	r1, #625	; 0x271
 800510e:	4630      	mov	r0, r6
 8005110:	f7ff ff12 	bl	8004f38 <__i2b>
 8005114:	2300      	movs	r3, #0
 8005116:	f8c8 0008 	str.w	r0, [r8, #8]
 800511a:	4604      	mov	r4, r0
 800511c:	6003      	str	r3, [r0, #0]
 800511e:	f04f 0900 	mov.w	r9, #0
 8005122:	07eb      	lsls	r3, r5, #31
 8005124:	d50a      	bpl.n	800513c <__pow5mult+0x84>
 8005126:	4639      	mov	r1, r7
 8005128:	4622      	mov	r2, r4
 800512a:	4630      	mov	r0, r6
 800512c:	f7ff ff1a 	bl	8004f64 <__multiply>
 8005130:	4639      	mov	r1, r7
 8005132:	4680      	mov	r8, r0
 8005134:	4630      	mov	r0, r6
 8005136:	f7ff fe49 	bl	8004dcc <_Bfree>
 800513a:	4647      	mov	r7, r8
 800513c:	106d      	asrs	r5, r5, #1
 800513e:	d00b      	beq.n	8005158 <__pow5mult+0xa0>
 8005140:	6820      	ldr	r0, [r4, #0]
 8005142:	b938      	cbnz	r0, 8005154 <__pow5mult+0x9c>
 8005144:	4622      	mov	r2, r4
 8005146:	4621      	mov	r1, r4
 8005148:	4630      	mov	r0, r6
 800514a:	f7ff ff0b 	bl	8004f64 <__multiply>
 800514e:	6020      	str	r0, [r4, #0]
 8005150:	f8c0 9000 	str.w	r9, [r0]
 8005154:	4604      	mov	r4, r0
 8005156:	e7e4      	b.n	8005122 <__pow5mult+0x6a>
 8005158:	4638      	mov	r0, r7
 800515a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800515e:	bf00      	nop
 8005160:	08006960 	.word	0x08006960
 8005164:	08006791 	.word	0x08006791
 8005168:	08006811 	.word	0x08006811

0800516c <__lshift>:
 800516c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005170:	460c      	mov	r4, r1
 8005172:	6849      	ldr	r1, [r1, #4]
 8005174:	6923      	ldr	r3, [r4, #16]
 8005176:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800517a:	68a3      	ldr	r3, [r4, #8]
 800517c:	4607      	mov	r7, r0
 800517e:	4691      	mov	r9, r2
 8005180:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005184:	f108 0601 	add.w	r6, r8, #1
 8005188:	42b3      	cmp	r3, r6
 800518a:	db0b      	blt.n	80051a4 <__lshift+0x38>
 800518c:	4638      	mov	r0, r7
 800518e:	f7ff fddd 	bl	8004d4c <_Balloc>
 8005192:	4605      	mov	r5, r0
 8005194:	b948      	cbnz	r0, 80051aa <__lshift+0x3e>
 8005196:	4602      	mov	r2, r0
 8005198:	4b28      	ldr	r3, [pc, #160]	; (800523c <__lshift+0xd0>)
 800519a:	4829      	ldr	r0, [pc, #164]	; (8005240 <__lshift+0xd4>)
 800519c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80051a0:	f000 fb8e 	bl	80058c0 <__assert_func>
 80051a4:	3101      	adds	r1, #1
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	e7ee      	b.n	8005188 <__lshift+0x1c>
 80051aa:	2300      	movs	r3, #0
 80051ac:	f100 0114 	add.w	r1, r0, #20
 80051b0:	f100 0210 	add.w	r2, r0, #16
 80051b4:	4618      	mov	r0, r3
 80051b6:	4553      	cmp	r3, sl
 80051b8:	db33      	blt.n	8005222 <__lshift+0xb6>
 80051ba:	6920      	ldr	r0, [r4, #16]
 80051bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80051c0:	f104 0314 	add.w	r3, r4, #20
 80051c4:	f019 091f 	ands.w	r9, r9, #31
 80051c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80051cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80051d0:	d02b      	beq.n	800522a <__lshift+0xbe>
 80051d2:	f1c9 0e20 	rsb	lr, r9, #32
 80051d6:	468a      	mov	sl, r1
 80051d8:	2200      	movs	r2, #0
 80051da:	6818      	ldr	r0, [r3, #0]
 80051dc:	fa00 f009 	lsl.w	r0, r0, r9
 80051e0:	4310      	orrs	r0, r2
 80051e2:	f84a 0b04 	str.w	r0, [sl], #4
 80051e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80051ea:	459c      	cmp	ip, r3
 80051ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80051f0:	d8f3      	bhi.n	80051da <__lshift+0x6e>
 80051f2:	ebac 0304 	sub.w	r3, ip, r4
 80051f6:	3b15      	subs	r3, #21
 80051f8:	f023 0303 	bic.w	r3, r3, #3
 80051fc:	3304      	adds	r3, #4
 80051fe:	f104 0015 	add.w	r0, r4, #21
 8005202:	4584      	cmp	ip, r0
 8005204:	bf38      	it	cc
 8005206:	2304      	movcc	r3, #4
 8005208:	50ca      	str	r2, [r1, r3]
 800520a:	b10a      	cbz	r2, 8005210 <__lshift+0xa4>
 800520c:	f108 0602 	add.w	r6, r8, #2
 8005210:	3e01      	subs	r6, #1
 8005212:	4638      	mov	r0, r7
 8005214:	612e      	str	r6, [r5, #16]
 8005216:	4621      	mov	r1, r4
 8005218:	f7ff fdd8 	bl	8004dcc <_Bfree>
 800521c:	4628      	mov	r0, r5
 800521e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005222:	f842 0f04 	str.w	r0, [r2, #4]!
 8005226:	3301      	adds	r3, #1
 8005228:	e7c5      	b.n	80051b6 <__lshift+0x4a>
 800522a:	3904      	subs	r1, #4
 800522c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005230:	f841 2f04 	str.w	r2, [r1, #4]!
 8005234:	459c      	cmp	ip, r3
 8005236:	d8f9      	bhi.n	800522c <__lshift+0xc0>
 8005238:	e7ea      	b.n	8005210 <__lshift+0xa4>
 800523a:	bf00      	nop
 800523c:	08006800 	.word	0x08006800
 8005240:	08006811 	.word	0x08006811

08005244 <__mcmp>:
 8005244:	b530      	push	{r4, r5, lr}
 8005246:	6902      	ldr	r2, [r0, #16]
 8005248:	690c      	ldr	r4, [r1, #16]
 800524a:	1b12      	subs	r2, r2, r4
 800524c:	d10e      	bne.n	800526c <__mcmp+0x28>
 800524e:	f100 0314 	add.w	r3, r0, #20
 8005252:	3114      	adds	r1, #20
 8005254:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005258:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800525c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005260:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005264:	42a5      	cmp	r5, r4
 8005266:	d003      	beq.n	8005270 <__mcmp+0x2c>
 8005268:	d305      	bcc.n	8005276 <__mcmp+0x32>
 800526a:	2201      	movs	r2, #1
 800526c:	4610      	mov	r0, r2
 800526e:	bd30      	pop	{r4, r5, pc}
 8005270:	4283      	cmp	r3, r0
 8005272:	d3f3      	bcc.n	800525c <__mcmp+0x18>
 8005274:	e7fa      	b.n	800526c <__mcmp+0x28>
 8005276:	f04f 32ff 	mov.w	r2, #4294967295
 800527a:	e7f7      	b.n	800526c <__mcmp+0x28>

0800527c <__mdiff>:
 800527c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005280:	460c      	mov	r4, r1
 8005282:	4606      	mov	r6, r0
 8005284:	4611      	mov	r1, r2
 8005286:	4620      	mov	r0, r4
 8005288:	4690      	mov	r8, r2
 800528a:	f7ff ffdb 	bl	8005244 <__mcmp>
 800528e:	1e05      	subs	r5, r0, #0
 8005290:	d110      	bne.n	80052b4 <__mdiff+0x38>
 8005292:	4629      	mov	r1, r5
 8005294:	4630      	mov	r0, r6
 8005296:	f7ff fd59 	bl	8004d4c <_Balloc>
 800529a:	b930      	cbnz	r0, 80052aa <__mdiff+0x2e>
 800529c:	4b3a      	ldr	r3, [pc, #232]	; (8005388 <__mdiff+0x10c>)
 800529e:	4602      	mov	r2, r0
 80052a0:	f240 2137 	movw	r1, #567	; 0x237
 80052a4:	4839      	ldr	r0, [pc, #228]	; (800538c <__mdiff+0x110>)
 80052a6:	f000 fb0b 	bl	80058c0 <__assert_func>
 80052aa:	2301      	movs	r3, #1
 80052ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80052b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052b4:	bfa4      	itt	ge
 80052b6:	4643      	movge	r3, r8
 80052b8:	46a0      	movge	r8, r4
 80052ba:	4630      	mov	r0, r6
 80052bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80052c0:	bfa6      	itte	ge
 80052c2:	461c      	movge	r4, r3
 80052c4:	2500      	movge	r5, #0
 80052c6:	2501      	movlt	r5, #1
 80052c8:	f7ff fd40 	bl	8004d4c <_Balloc>
 80052cc:	b920      	cbnz	r0, 80052d8 <__mdiff+0x5c>
 80052ce:	4b2e      	ldr	r3, [pc, #184]	; (8005388 <__mdiff+0x10c>)
 80052d0:	4602      	mov	r2, r0
 80052d2:	f240 2145 	movw	r1, #581	; 0x245
 80052d6:	e7e5      	b.n	80052a4 <__mdiff+0x28>
 80052d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80052dc:	6926      	ldr	r6, [r4, #16]
 80052de:	60c5      	str	r5, [r0, #12]
 80052e0:	f104 0914 	add.w	r9, r4, #20
 80052e4:	f108 0514 	add.w	r5, r8, #20
 80052e8:	f100 0e14 	add.w	lr, r0, #20
 80052ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80052f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80052f4:	f108 0210 	add.w	r2, r8, #16
 80052f8:	46f2      	mov	sl, lr
 80052fa:	2100      	movs	r1, #0
 80052fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8005300:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005304:	fa11 f88b 	uxtah	r8, r1, fp
 8005308:	b299      	uxth	r1, r3
 800530a:	0c1b      	lsrs	r3, r3, #16
 800530c:	eba8 0801 	sub.w	r8, r8, r1
 8005310:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005314:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005318:	fa1f f888 	uxth.w	r8, r8
 800531c:	1419      	asrs	r1, r3, #16
 800531e:	454e      	cmp	r6, r9
 8005320:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005324:	f84a 3b04 	str.w	r3, [sl], #4
 8005328:	d8e8      	bhi.n	80052fc <__mdiff+0x80>
 800532a:	1b33      	subs	r3, r6, r4
 800532c:	3b15      	subs	r3, #21
 800532e:	f023 0303 	bic.w	r3, r3, #3
 8005332:	3304      	adds	r3, #4
 8005334:	3415      	adds	r4, #21
 8005336:	42a6      	cmp	r6, r4
 8005338:	bf38      	it	cc
 800533a:	2304      	movcc	r3, #4
 800533c:	441d      	add	r5, r3
 800533e:	4473      	add	r3, lr
 8005340:	469e      	mov	lr, r3
 8005342:	462e      	mov	r6, r5
 8005344:	4566      	cmp	r6, ip
 8005346:	d30e      	bcc.n	8005366 <__mdiff+0xea>
 8005348:	f10c 0203 	add.w	r2, ip, #3
 800534c:	1b52      	subs	r2, r2, r5
 800534e:	f022 0203 	bic.w	r2, r2, #3
 8005352:	3d03      	subs	r5, #3
 8005354:	45ac      	cmp	ip, r5
 8005356:	bf38      	it	cc
 8005358:	2200      	movcc	r2, #0
 800535a:	4413      	add	r3, r2
 800535c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005360:	b17a      	cbz	r2, 8005382 <__mdiff+0x106>
 8005362:	6107      	str	r7, [r0, #16]
 8005364:	e7a4      	b.n	80052b0 <__mdiff+0x34>
 8005366:	f856 8b04 	ldr.w	r8, [r6], #4
 800536a:	fa11 f288 	uxtah	r2, r1, r8
 800536e:	1414      	asrs	r4, r2, #16
 8005370:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005374:	b292      	uxth	r2, r2
 8005376:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800537a:	f84e 2b04 	str.w	r2, [lr], #4
 800537e:	1421      	asrs	r1, r4, #16
 8005380:	e7e0      	b.n	8005344 <__mdiff+0xc8>
 8005382:	3f01      	subs	r7, #1
 8005384:	e7ea      	b.n	800535c <__mdiff+0xe0>
 8005386:	bf00      	nop
 8005388:	08006800 	.word	0x08006800
 800538c:	08006811 	.word	0x08006811

08005390 <__d2b>:
 8005390:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005394:	460f      	mov	r7, r1
 8005396:	2101      	movs	r1, #1
 8005398:	ec59 8b10 	vmov	r8, r9, d0
 800539c:	4616      	mov	r6, r2
 800539e:	f7ff fcd5 	bl	8004d4c <_Balloc>
 80053a2:	4604      	mov	r4, r0
 80053a4:	b930      	cbnz	r0, 80053b4 <__d2b+0x24>
 80053a6:	4602      	mov	r2, r0
 80053a8:	4b24      	ldr	r3, [pc, #144]	; (800543c <__d2b+0xac>)
 80053aa:	4825      	ldr	r0, [pc, #148]	; (8005440 <__d2b+0xb0>)
 80053ac:	f240 310f 	movw	r1, #783	; 0x30f
 80053b0:	f000 fa86 	bl	80058c0 <__assert_func>
 80053b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80053b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80053bc:	bb2d      	cbnz	r5, 800540a <__d2b+0x7a>
 80053be:	9301      	str	r3, [sp, #4]
 80053c0:	f1b8 0300 	subs.w	r3, r8, #0
 80053c4:	d026      	beq.n	8005414 <__d2b+0x84>
 80053c6:	4668      	mov	r0, sp
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	f7ff fd87 	bl	8004edc <__lo0bits>
 80053ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80053d2:	b1e8      	cbz	r0, 8005410 <__d2b+0x80>
 80053d4:	f1c0 0320 	rsb	r3, r0, #32
 80053d8:	fa02 f303 	lsl.w	r3, r2, r3
 80053dc:	430b      	orrs	r3, r1
 80053de:	40c2      	lsrs	r2, r0
 80053e0:	6163      	str	r3, [r4, #20]
 80053e2:	9201      	str	r2, [sp, #4]
 80053e4:	9b01      	ldr	r3, [sp, #4]
 80053e6:	61a3      	str	r3, [r4, #24]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	bf14      	ite	ne
 80053ec:	2202      	movne	r2, #2
 80053ee:	2201      	moveq	r2, #1
 80053f0:	6122      	str	r2, [r4, #16]
 80053f2:	b1bd      	cbz	r5, 8005424 <__d2b+0x94>
 80053f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80053f8:	4405      	add	r5, r0
 80053fa:	603d      	str	r5, [r7, #0]
 80053fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005400:	6030      	str	r0, [r6, #0]
 8005402:	4620      	mov	r0, r4
 8005404:	b003      	add	sp, #12
 8005406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800540a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800540e:	e7d6      	b.n	80053be <__d2b+0x2e>
 8005410:	6161      	str	r1, [r4, #20]
 8005412:	e7e7      	b.n	80053e4 <__d2b+0x54>
 8005414:	a801      	add	r0, sp, #4
 8005416:	f7ff fd61 	bl	8004edc <__lo0bits>
 800541a:	9b01      	ldr	r3, [sp, #4]
 800541c:	6163      	str	r3, [r4, #20]
 800541e:	3020      	adds	r0, #32
 8005420:	2201      	movs	r2, #1
 8005422:	e7e5      	b.n	80053f0 <__d2b+0x60>
 8005424:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005428:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800542c:	6038      	str	r0, [r7, #0]
 800542e:	6918      	ldr	r0, [r3, #16]
 8005430:	f7ff fd34 	bl	8004e9c <__hi0bits>
 8005434:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005438:	e7e2      	b.n	8005400 <__d2b+0x70>
 800543a:	bf00      	nop
 800543c:	08006800 	.word	0x08006800
 8005440:	08006811 	.word	0x08006811

08005444 <__ssputs_r>:
 8005444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005448:	688e      	ldr	r6, [r1, #8]
 800544a:	461f      	mov	r7, r3
 800544c:	42be      	cmp	r6, r7
 800544e:	680b      	ldr	r3, [r1, #0]
 8005450:	4682      	mov	sl, r0
 8005452:	460c      	mov	r4, r1
 8005454:	4690      	mov	r8, r2
 8005456:	d82c      	bhi.n	80054b2 <__ssputs_r+0x6e>
 8005458:	898a      	ldrh	r2, [r1, #12]
 800545a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800545e:	d026      	beq.n	80054ae <__ssputs_r+0x6a>
 8005460:	6965      	ldr	r5, [r4, #20]
 8005462:	6909      	ldr	r1, [r1, #16]
 8005464:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005468:	eba3 0901 	sub.w	r9, r3, r1
 800546c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005470:	1c7b      	adds	r3, r7, #1
 8005472:	444b      	add	r3, r9
 8005474:	106d      	asrs	r5, r5, #1
 8005476:	429d      	cmp	r5, r3
 8005478:	bf38      	it	cc
 800547a:	461d      	movcc	r5, r3
 800547c:	0553      	lsls	r3, r2, #21
 800547e:	d527      	bpl.n	80054d0 <__ssputs_r+0x8c>
 8005480:	4629      	mov	r1, r5
 8005482:	f7ff fbd7 	bl	8004c34 <_malloc_r>
 8005486:	4606      	mov	r6, r0
 8005488:	b360      	cbz	r0, 80054e4 <__ssputs_r+0xa0>
 800548a:	6921      	ldr	r1, [r4, #16]
 800548c:	464a      	mov	r2, r9
 800548e:	f000 fa09 	bl	80058a4 <memcpy>
 8005492:	89a3      	ldrh	r3, [r4, #12]
 8005494:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800549c:	81a3      	strh	r3, [r4, #12]
 800549e:	6126      	str	r6, [r4, #16]
 80054a0:	6165      	str	r5, [r4, #20]
 80054a2:	444e      	add	r6, r9
 80054a4:	eba5 0509 	sub.w	r5, r5, r9
 80054a8:	6026      	str	r6, [r4, #0]
 80054aa:	60a5      	str	r5, [r4, #8]
 80054ac:	463e      	mov	r6, r7
 80054ae:	42be      	cmp	r6, r7
 80054b0:	d900      	bls.n	80054b4 <__ssputs_r+0x70>
 80054b2:	463e      	mov	r6, r7
 80054b4:	6820      	ldr	r0, [r4, #0]
 80054b6:	4632      	mov	r2, r6
 80054b8:	4641      	mov	r1, r8
 80054ba:	f000 f9c9 	bl	8005850 <memmove>
 80054be:	68a3      	ldr	r3, [r4, #8]
 80054c0:	1b9b      	subs	r3, r3, r6
 80054c2:	60a3      	str	r3, [r4, #8]
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	4433      	add	r3, r6
 80054c8:	6023      	str	r3, [r4, #0]
 80054ca:	2000      	movs	r0, #0
 80054cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d0:	462a      	mov	r2, r5
 80054d2:	f000 fa3b 	bl	800594c <_realloc_r>
 80054d6:	4606      	mov	r6, r0
 80054d8:	2800      	cmp	r0, #0
 80054da:	d1e0      	bne.n	800549e <__ssputs_r+0x5a>
 80054dc:	6921      	ldr	r1, [r4, #16]
 80054de:	4650      	mov	r0, sl
 80054e0:	f7ff fb34 	bl	8004b4c <_free_r>
 80054e4:	230c      	movs	r3, #12
 80054e6:	f8ca 3000 	str.w	r3, [sl]
 80054ea:	89a3      	ldrh	r3, [r4, #12]
 80054ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054f0:	81a3      	strh	r3, [r4, #12]
 80054f2:	f04f 30ff 	mov.w	r0, #4294967295
 80054f6:	e7e9      	b.n	80054cc <__ssputs_r+0x88>

080054f8 <_svfiprintf_r>:
 80054f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	4698      	mov	r8, r3
 80054fe:	898b      	ldrh	r3, [r1, #12]
 8005500:	061b      	lsls	r3, r3, #24
 8005502:	b09d      	sub	sp, #116	; 0x74
 8005504:	4607      	mov	r7, r0
 8005506:	460d      	mov	r5, r1
 8005508:	4614      	mov	r4, r2
 800550a:	d50e      	bpl.n	800552a <_svfiprintf_r+0x32>
 800550c:	690b      	ldr	r3, [r1, #16]
 800550e:	b963      	cbnz	r3, 800552a <_svfiprintf_r+0x32>
 8005510:	2140      	movs	r1, #64	; 0x40
 8005512:	f7ff fb8f 	bl	8004c34 <_malloc_r>
 8005516:	6028      	str	r0, [r5, #0]
 8005518:	6128      	str	r0, [r5, #16]
 800551a:	b920      	cbnz	r0, 8005526 <_svfiprintf_r+0x2e>
 800551c:	230c      	movs	r3, #12
 800551e:	603b      	str	r3, [r7, #0]
 8005520:	f04f 30ff 	mov.w	r0, #4294967295
 8005524:	e0d0      	b.n	80056c8 <_svfiprintf_r+0x1d0>
 8005526:	2340      	movs	r3, #64	; 0x40
 8005528:	616b      	str	r3, [r5, #20]
 800552a:	2300      	movs	r3, #0
 800552c:	9309      	str	r3, [sp, #36]	; 0x24
 800552e:	2320      	movs	r3, #32
 8005530:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005534:	f8cd 800c 	str.w	r8, [sp, #12]
 8005538:	2330      	movs	r3, #48	; 0x30
 800553a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80056e0 <_svfiprintf_r+0x1e8>
 800553e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005542:	f04f 0901 	mov.w	r9, #1
 8005546:	4623      	mov	r3, r4
 8005548:	469a      	mov	sl, r3
 800554a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800554e:	b10a      	cbz	r2, 8005554 <_svfiprintf_r+0x5c>
 8005550:	2a25      	cmp	r2, #37	; 0x25
 8005552:	d1f9      	bne.n	8005548 <_svfiprintf_r+0x50>
 8005554:	ebba 0b04 	subs.w	fp, sl, r4
 8005558:	d00b      	beq.n	8005572 <_svfiprintf_r+0x7a>
 800555a:	465b      	mov	r3, fp
 800555c:	4622      	mov	r2, r4
 800555e:	4629      	mov	r1, r5
 8005560:	4638      	mov	r0, r7
 8005562:	f7ff ff6f 	bl	8005444 <__ssputs_r>
 8005566:	3001      	adds	r0, #1
 8005568:	f000 80a9 	beq.w	80056be <_svfiprintf_r+0x1c6>
 800556c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800556e:	445a      	add	r2, fp
 8005570:	9209      	str	r2, [sp, #36]	; 0x24
 8005572:	f89a 3000 	ldrb.w	r3, [sl]
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 80a1 	beq.w	80056be <_svfiprintf_r+0x1c6>
 800557c:	2300      	movs	r3, #0
 800557e:	f04f 32ff 	mov.w	r2, #4294967295
 8005582:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005586:	f10a 0a01 	add.w	sl, sl, #1
 800558a:	9304      	str	r3, [sp, #16]
 800558c:	9307      	str	r3, [sp, #28]
 800558e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005592:	931a      	str	r3, [sp, #104]	; 0x68
 8005594:	4654      	mov	r4, sl
 8005596:	2205      	movs	r2, #5
 8005598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800559c:	4850      	ldr	r0, [pc, #320]	; (80056e0 <_svfiprintf_r+0x1e8>)
 800559e:	f7fa fe1f 	bl	80001e0 <memchr>
 80055a2:	9a04      	ldr	r2, [sp, #16]
 80055a4:	b9d8      	cbnz	r0, 80055de <_svfiprintf_r+0xe6>
 80055a6:	06d0      	lsls	r0, r2, #27
 80055a8:	bf44      	itt	mi
 80055aa:	2320      	movmi	r3, #32
 80055ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055b0:	0711      	lsls	r1, r2, #28
 80055b2:	bf44      	itt	mi
 80055b4:	232b      	movmi	r3, #43	; 0x2b
 80055b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055ba:	f89a 3000 	ldrb.w	r3, [sl]
 80055be:	2b2a      	cmp	r3, #42	; 0x2a
 80055c0:	d015      	beq.n	80055ee <_svfiprintf_r+0xf6>
 80055c2:	9a07      	ldr	r2, [sp, #28]
 80055c4:	4654      	mov	r4, sl
 80055c6:	2000      	movs	r0, #0
 80055c8:	f04f 0c0a 	mov.w	ip, #10
 80055cc:	4621      	mov	r1, r4
 80055ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055d2:	3b30      	subs	r3, #48	; 0x30
 80055d4:	2b09      	cmp	r3, #9
 80055d6:	d94d      	bls.n	8005674 <_svfiprintf_r+0x17c>
 80055d8:	b1b0      	cbz	r0, 8005608 <_svfiprintf_r+0x110>
 80055da:	9207      	str	r2, [sp, #28]
 80055dc:	e014      	b.n	8005608 <_svfiprintf_r+0x110>
 80055de:	eba0 0308 	sub.w	r3, r0, r8
 80055e2:	fa09 f303 	lsl.w	r3, r9, r3
 80055e6:	4313      	orrs	r3, r2
 80055e8:	9304      	str	r3, [sp, #16]
 80055ea:	46a2      	mov	sl, r4
 80055ec:	e7d2      	b.n	8005594 <_svfiprintf_r+0x9c>
 80055ee:	9b03      	ldr	r3, [sp, #12]
 80055f0:	1d19      	adds	r1, r3, #4
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	9103      	str	r1, [sp, #12]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	bfbb      	ittet	lt
 80055fa:	425b      	neglt	r3, r3
 80055fc:	f042 0202 	orrlt.w	r2, r2, #2
 8005600:	9307      	strge	r3, [sp, #28]
 8005602:	9307      	strlt	r3, [sp, #28]
 8005604:	bfb8      	it	lt
 8005606:	9204      	strlt	r2, [sp, #16]
 8005608:	7823      	ldrb	r3, [r4, #0]
 800560a:	2b2e      	cmp	r3, #46	; 0x2e
 800560c:	d10c      	bne.n	8005628 <_svfiprintf_r+0x130>
 800560e:	7863      	ldrb	r3, [r4, #1]
 8005610:	2b2a      	cmp	r3, #42	; 0x2a
 8005612:	d134      	bne.n	800567e <_svfiprintf_r+0x186>
 8005614:	9b03      	ldr	r3, [sp, #12]
 8005616:	1d1a      	adds	r2, r3, #4
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	9203      	str	r2, [sp, #12]
 800561c:	2b00      	cmp	r3, #0
 800561e:	bfb8      	it	lt
 8005620:	f04f 33ff 	movlt.w	r3, #4294967295
 8005624:	3402      	adds	r4, #2
 8005626:	9305      	str	r3, [sp, #20]
 8005628:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80056f0 <_svfiprintf_r+0x1f8>
 800562c:	7821      	ldrb	r1, [r4, #0]
 800562e:	2203      	movs	r2, #3
 8005630:	4650      	mov	r0, sl
 8005632:	f7fa fdd5 	bl	80001e0 <memchr>
 8005636:	b138      	cbz	r0, 8005648 <_svfiprintf_r+0x150>
 8005638:	9b04      	ldr	r3, [sp, #16]
 800563a:	eba0 000a 	sub.w	r0, r0, sl
 800563e:	2240      	movs	r2, #64	; 0x40
 8005640:	4082      	lsls	r2, r0
 8005642:	4313      	orrs	r3, r2
 8005644:	3401      	adds	r4, #1
 8005646:	9304      	str	r3, [sp, #16]
 8005648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800564c:	4825      	ldr	r0, [pc, #148]	; (80056e4 <_svfiprintf_r+0x1ec>)
 800564e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005652:	2206      	movs	r2, #6
 8005654:	f7fa fdc4 	bl	80001e0 <memchr>
 8005658:	2800      	cmp	r0, #0
 800565a:	d038      	beq.n	80056ce <_svfiprintf_r+0x1d6>
 800565c:	4b22      	ldr	r3, [pc, #136]	; (80056e8 <_svfiprintf_r+0x1f0>)
 800565e:	bb1b      	cbnz	r3, 80056a8 <_svfiprintf_r+0x1b0>
 8005660:	9b03      	ldr	r3, [sp, #12]
 8005662:	3307      	adds	r3, #7
 8005664:	f023 0307 	bic.w	r3, r3, #7
 8005668:	3308      	adds	r3, #8
 800566a:	9303      	str	r3, [sp, #12]
 800566c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800566e:	4433      	add	r3, r6
 8005670:	9309      	str	r3, [sp, #36]	; 0x24
 8005672:	e768      	b.n	8005546 <_svfiprintf_r+0x4e>
 8005674:	fb0c 3202 	mla	r2, ip, r2, r3
 8005678:	460c      	mov	r4, r1
 800567a:	2001      	movs	r0, #1
 800567c:	e7a6      	b.n	80055cc <_svfiprintf_r+0xd4>
 800567e:	2300      	movs	r3, #0
 8005680:	3401      	adds	r4, #1
 8005682:	9305      	str	r3, [sp, #20]
 8005684:	4619      	mov	r1, r3
 8005686:	f04f 0c0a 	mov.w	ip, #10
 800568a:	4620      	mov	r0, r4
 800568c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005690:	3a30      	subs	r2, #48	; 0x30
 8005692:	2a09      	cmp	r2, #9
 8005694:	d903      	bls.n	800569e <_svfiprintf_r+0x1a6>
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0c6      	beq.n	8005628 <_svfiprintf_r+0x130>
 800569a:	9105      	str	r1, [sp, #20]
 800569c:	e7c4      	b.n	8005628 <_svfiprintf_r+0x130>
 800569e:	fb0c 2101 	mla	r1, ip, r1, r2
 80056a2:	4604      	mov	r4, r0
 80056a4:	2301      	movs	r3, #1
 80056a6:	e7f0      	b.n	800568a <_svfiprintf_r+0x192>
 80056a8:	ab03      	add	r3, sp, #12
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	462a      	mov	r2, r5
 80056ae:	4b0f      	ldr	r3, [pc, #60]	; (80056ec <_svfiprintf_r+0x1f4>)
 80056b0:	a904      	add	r1, sp, #16
 80056b2:	4638      	mov	r0, r7
 80056b4:	f7fd fe62 	bl	800337c <_printf_float>
 80056b8:	1c42      	adds	r2, r0, #1
 80056ba:	4606      	mov	r6, r0
 80056bc:	d1d6      	bne.n	800566c <_svfiprintf_r+0x174>
 80056be:	89ab      	ldrh	r3, [r5, #12]
 80056c0:	065b      	lsls	r3, r3, #25
 80056c2:	f53f af2d 	bmi.w	8005520 <_svfiprintf_r+0x28>
 80056c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056c8:	b01d      	add	sp, #116	; 0x74
 80056ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ce:	ab03      	add	r3, sp, #12
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	462a      	mov	r2, r5
 80056d4:	4b05      	ldr	r3, [pc, #20]	; (80056ec <_svfiprintf_r+0x1f4>)
 80056d6:	a904      	add	r1, sp, #16
 80056d8:	4638      	mov	r0, r7
 80056da:	f7fe f8f3 	bl	80038c4 <_printf_i>
 80056de:	e7eb      	b.n	80056b8 <_svfiprintf_r+0x1c0>
 80056e0:	0800696c 	.word	0x0800696c
 80056e4:	08006976 	.word	0x08006976
 80056e8:	0800337d 	.word	0x0800337d
 80056ec:	08005445 	.word	0x08005445
 80056f0:	08006972 	.word	0x08006972

080056f4 <__sflush_r>:
 80056f4:	898a      	ldrh	r2, [r1, #12]
 80056f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056fa:	4605      	mov	r5, r0
 80056fc:	0710      	lsls	r0, r2, #28
 80056fe:	460c      	mov	r4, r1
 8005700:	d458      	bmi.n	80057b4 <__sflush_r+0xc0>
 8005702:	684b      	ldr	r3, [r1, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	dc05      	bgt.n	8005714 <__sflush_r+0x20>
 8005708:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	dc02      	bgt.n	8005714 <__sflush_r+0x20>
 800570e:	2000      	movs	r0, #0
 8005710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005714:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005716:	2e00      	cmp	r6, #0
 8005718:	d0f9      	beq.n	800570e <__sflush_r+0x1a>
 800571a:	2300      	movs	r3, #0
 800571c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005720:	682f      	ldr	r7, [r5, #0]
 8005722:	6a21      	ldr	r1, [r4, #32]
 8005724:	602b      	str	r3, [r5, #0]
 8005726:	d032      	beq.n	800578e <__sflush_r+0x9a>
 8005728:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800572a:	89a3      	ldrh	r3, [r4, #12]
 800572c:	075a      	lsls	r2, r3, #29
 800572e:	d505      	bpl.n	800573c <__sflush_r+0x48>
 8005730:	6863      	ldr	r3, [r4, #4]
 8005732:	1ac0      	subs	r0, r0, r3
 8005734:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005736:	b10b      	cbz	r3, 800573c <__sflush_r+0x48>
 8005738:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800573a:	1ac0      	subs	r0, r0, r3
 800573c:	2300      	movs	r3, #0
 800573e:	4602      	mov	r2, r0
 8005740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005742:	6a21      	ldr	r1, [r4, #32]
 8005744:	4628      	mov	r0, r5
 8005746:	47b0      	blx	r6
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	89a3      	ldrh	r3, [r4, #12]
 800574c:	d106      	bne.n	800575c <__sflush_r+0x68>
 800574e:	6829      	ldr	r1, [r5, #0]
 8005750:	291d      	cmp	r1, #29
 8005752:	d82b      	bhi.n	80057ac <__sflush_r+0xb8>
 8005754:	4a29      	ldr	r2, [pc, #164]	; (80057fc <__sflush_r+0x108>)
 8005756:	410a      	asrs	r2, r1
 8005758:	07d6      	lsls	r6, r2, #31
 800575a:	d427      	bmi.n	80057ac <__sflush_r+0xb8>
 800575c:	2200      	movs	r2, #0
 800575e:	6062      	str	r2, [r4, #4]
 8005760:	04d9      	lsls	r1, r3, #19
 8005762:	6922      	ldr	r2, [r4, #16]
 8005764:	6022      	str	r2, [r4, #0]
 8005766:	d504      	bpl.n	8005772 <__sflush_r+0x7e>
 8005768:	1c42      	adds	r2, r0, #1
 800576a:	d101      	bne.n	8005770 <__sflush_r+0x7c>
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	b903      	cbnz	r3, 8005772 <__sflush_r+0x7e>
 8005770:	6560      	str	r0, [r4, #84]	; 0x54
 8005772:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005774:	602f      	str	r7, [r5, #0]
 8005776:	2900      	cmp	r1, #0
 8005778:	d0c9      	beq.n	800570e <__sflush_r+0x1a>
 800577a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800577e:	4299      	cmp	r1, r3
 8005780:	d002      	beq.n	8005788 <__sflush_r+0x94>
 8005782:	4628      	mov	r0, r5
 8005784:	f7ff f9e2 	bl	8004b4c <_free_r>
 8005788:	2000      	movs	r0, #0
 800578a:	6360      	str	r0, [r4, #52]	; 0x34
 800578c:	e7c0      	b.n	8005710 <__sflush_r+0x1c>
 800578e:	2301      	movs	r3, #1
 8005790:	4628      	mov	r0, r5
 8005792:	47b0      	blx	r6
 8005794:	1c41      	adds	r1, r0, #1
 8005796:	d1c8      	bne.n	800572a <__sflush_r+0x36>
 8005798:	682b      	ldr	r3, [r5, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0c5      	beq.n	800572a <__sflush_r+0x36>
 800579e:	2b1d      	cmp	r3, #29
 80057a0:	d001      	beq.n	80057a6 <__sflush_r+0xb2>
 80057a2:	2b16      	cmp	r3, #22
 80057a4:	d101      	bne.n	80057aa <__sflush_r+0xb6>
 80057a6:	602f      	str	r7, [r5, #0]
 80057a8:	e7b1      	b.n	800570e <__sflush_r+0x1a>
 80057aa:	89a3      	ldrh	r3, [r4, #12]
 80057ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057b0:	81a3      	strh	r3, [r4, #12]
 80057b2:	e7ad      	b.n	8005710 <__sflush_r+0x1c>
 80057b4:	690f      	ldr	r7, [r1, #16]
 80057b6:	2f00      	cmp	r7, #0
 80057b8:	d0a9      	beq.n	800570e <__sflush_r+0x1a>
 80057ba:	0793      	lsls	r3, r2, #30
 80057bc:	680e      	ldr	r6, [r1, #0]
 80057be:	bf08      	it	eq
 80057c0:	694b      	ldreq	r3, [r1, #20]
 80057c2:	600f      	str	r7, [r1, #0]
 80057c4:	bf18      	it	ne
 80057c6:	2300      	movne	r3, #0
 80057c8:	eba6 0807 	sub.w	r8, r6, r7
 80057cc:	608b      	str	r3, [r1, #8]
 80057ce:	f1b8 0f00 	cmp.w	r8, #0
 80057d2:	dd9c      	ble.n	800570e <__sflush_r+0x1a>
 80057d4:	6a21      	ldr	r1, [r4, #32]
 80057d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80057d8:	4643      	mov	r3, r8
 80057da:	463a      	mov	r2, r7
 80057dc:	4628      	mov	r0, r5
 80057de:	47b0      	blx	r6
 80057e0:	2800      	cmp	r0, #0
 80057e2:	dc06      	bgt.n	80057f2 <__sflush_r+0xfe>
 80057e4:	89a3      	ldrh	r3, [r4, #12]
 80057e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057ea:	81a3      	strh	r3, [r4, #12]
 80057ec:	f04f 30ff 	mov.w	r0, #4294967295
 80057f0:	e78e      	b.n	8005710 <__sflush_r+0x1c>
 80057f2:	4407      	add	r7, r0
 80057f4:	eba8 0800 	sub.w	r8, r8, r0
 80057f8:	e7e9      	b.n	80057ce <__sflush_r+0xda>
 80057fa:	bf00      	nop
 80057fc:	dfbffffe 	.word	0xdfbffffe

08005800 <_fflush_r>:
 8005800:	b538      	push	{r3, r4, r5, lr}
 8005802:	690b      	ldr	r3, [r1, #16]
 8005804:	4605      	mov	r5, r0
 8005806:	460c      	mov	r4, r1
 8005808:	b913      	cbnz	r3, 8005810 <_fflush_r+0x10>
 800580a:	2500      	movs	r5, #0
 800580c:	4628      	mov	r0, r5
 800580e:	bd38      	pop	{r3, r4, r5, pc}
 8005810:	b118      	cbz	r0, 800581a <_fflush_r+0x1a>
 8005812:	6a03      	ldr	r3, [r0, #32]
 8005814:	b90b      	cbnz	r3, 800581a <_fflush_r+0x1a>
 8005816:	f7fe fa03 	bl	8003c20 <__sinit>
 800581a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0f3      	beq.n	800580a <_fflush_r+0xa>
 8005822:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005824:	07d0      	lsls	r0, r2, #31
 8005826:	d404      	bmi.n	8005832 <_fflush_r+0x32>
 8005828:	0599      	lsls	r1, r3, #22
 800582a:	d402      	bmi.n	8005832 <_fflush_r+0x32>
 800582c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800582e:	f7fe fb0e 	bl	8003e4e <__retarget_lock_acquire_recursive>
 8005832:	4628      	mov	r0, r5
 8005834:	4621      	mov	r1, r4
 8005836:	f7ff ff5d 	bl	80056f4 <__sflush_r>
 800583a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800583c:	07da      	lsls	r2, r3, #31
 800583e:	4605      	mov	r5, r0
 8005840:	d4e4      	bmi.n	800580c <_fflush_r+0xc>
 8005842:	89a3      	ldrh	r3, [r4, #12]
 8005844:	059b      	lsls	r3, r3, #22
 8005846:	d4e1      	bmi.n	800580c <_fflush_r+0xc>
 8005848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800584a:	f7fe fb01 	bl	8003e50 <__retarget_lock_release_recursive>
 800584e:	e7dd      	b.n	800580c <_fflush_r+0xc>

08005850 <memmove>:
 8005850:	4288      	cmp	r0, r1
 8005852:	b510      	push	{r4, lr}
 8005854:	eb01 0402 	add.w	r4, r1, r2
 8005858:	d902      	bls.n	8005860 <memmove+0x10>
 800585a:	4284      	cmp	r4, r0
 800585c:	4623      	mov	r3, r4
 800585e:	d807      	bhi.n	8005870 <memmove+0x20>
 8005860:	1e43      	subs	r3, r0, #1
 8005862:	42a1      	cmp	r1, r4
 8005864:	d008      	beq.n	8005878 <memmove+0x28>
 8005866:	f811 2b01 	ldrb.w	r2, [r1], #1
 800586a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800586e:	e7f8      	b.n	8005862 <memmove+0x12>
 8005870:	4402      	add	r2, r0
 8005872:	4601      	mov	r1, r0
 8005874:	428a      	cmp	r2, r1
 8005876:	d100      	bne.n	800587a <memmove+0x2a>
 8005878:	bd10      	pop	{r4, pc}
 800587a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800587e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005882:	e7f7      	b.n	8005874 <memmove+0x24>

08005884 <_sbrk_r>:
 8005884:	b538      	push	{r3, r4, r5, lr}
 8005886:	4d06      	ldr	r5, [pc, #24]	; (80058a0 <_sbrk_r+0x1c>)
 8005888:	2300      	movs	r3, #0
 800588a:	4604      	mov	r4, r0
 800588c:	4608      	mov	r0, r1
 800588e:	602b      	str	r3, [r5, #0]
 8005890:	f7fc f980 	bl	8001b94 <_sbrk>
 8005894:	1c43      	adds	r3, r0, #1
 8005896:	d102      	bne.n	800589e <_sbrk_r+0x1a>
 8005898:	682b      	ldr	r3, [r5, #0]
 800589a:	b103      	cbz	r3, 800589e <_sbrk_r+0x1a>
 800589c:	6023      	str	r3, [r4, #0]
 800589e:	bd38      	pop	{r3, r4, r5, pc}
 80058a0:	20000408 	.word	0x20000408

080058a4 <memcpy>:
 80058a4:	440a      	add	r2, r1
 80058a6:	4291      	cmp	r1, r2
 80058a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80058ac:	d100      	bne.n	80058b0 <memcpy+0xc>
 80058ae:	4770      	bx	lr
 80058b0:	b510      	push	{r4, lr}
 80058b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058ba:	4291      	cmp	r1, r2
 80058bc:	d1f9      	bne.n	80058b2 <memcpy+0xe>
 80058be:	bd10      	pop	{r4, pc}

080058c0 <__assert_func>:
 80058c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80058c2:	4614      	mov	r4, r2
 80058c4:	461a      	mov	r2, r3
 80058c6:	4b09      	ldr	r3, [pc, #36]	; (80058ec <__assert_func+0x2c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4605      	mov	r5, r0
 80058cc:	68d8      	ldr	r0, [r3, #12]
 80058ce:	b14c      	cbz	r4, 80058e4 <__assert_func+0x24>
 80058d0:	4b07      	ldr	r3, [pc, #28]	; (80058f0 <__assert_func+0x30>)
 80058d2:	9100      	str	r1, [sp, #0]
 80058d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80058d8:	4906      	ldr	r1, [pc, #24]	; (80058f4 <__assert_func+0x34>)
 80058da:	462b      	mov	r3, r5
 80058dc:	f000 f872 	bl	80059c4 <fiprintf>
 80058e0:	f000 f882 	bl	80059e8 <abort>
 80058e4:	4b04      	ldr	r3, [pc, #16]	; (80058f8 <__assert_func+0x38>)
 80058e6:	461c      	mov	r4, r3
 80058e8:	e7f3      	b.n	80058d2 <__assert_func+0x12>
 80058ea:	bf00      	nop
 80058ec:	2000007c 	.word	0x2000007c
 80058f0:	08006987 	.word	0x08006987
 80058f4:	08006994 	.word	0x08006994
 80058f8:	080069c2 	.word	0x080069c2

080058fc <_calloc_r>:
 80058fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058fe:	fba1 2402 	umull	r2, r4, r1, r2
 8005902:	b94c      	cbnz	r4, 8005918 <_calloc_r+0x1c>
 8005904:	4611      	mov	r1, r2
 8005906:	9201      	str	r2, [sp, #4]
 8005908:	f7ff f994 	bl	8004c34 <_malloc_r>
 800590c:	9a01      	ldr	r2, [sp, #4]
 800590e:	4605      	mov	r5, r0
 8005910:	b930      	cbnz	r0, 8005920 <_calloc_r+0x24>
 8005912:	4628      	mov	r0, r5
 8005914:	b003      	add	sp, #12
 8005916:	bd30      	pop	{r4, r5, pc}
 8005918:	220c      	movs	r2, #12
 800591a:	6002      	str	r2, [r0, #0]
 800591c:	2500      	movs	r5, #0
 800591e:	e7f8      	b.n	8005912 <_calloc_r+0x16>
 8005920:	4621      	mov	r1, r4
 8005922:	f7fe fa16 	bl	8003d52 <memset>
 8005926:	e7f4      	b.n	8005912 <_calloc_r+0x16>

08005928 <__ascii_mbtowc>:
 8005928:	b082      	sub	sp, #8
 800592a:	b901      	cbnz	r1, 800592e <__ascii_mbtowc+0x6>
 800592c:	a901      	add	r1, sp, #4
 800592e:	b142      	cbz	r2, 8005942 <__ascii_mbtowc+0x1a>
 8005930:	b14b      	cbz	r3, 8005946 <__ascii_mbtowc+0x1e>
 8005932:	7813      	ldrb	r3, [r2, #0]
 8005934:	600b      	str	r3, [r1, #0]
 8005936:	7812      	ldrb	r2, [r2, #0]
 8005938:	1e10      	subs	r0, r2, #0
 800593a:	bf18      	it	ne
 800593c:	2001      	movne	r0, #1
 800593e:	b002      	add	sp, #8
 8005940:	4770      	bx	lr
 8005942:	4610      	mov	r0, r2
 8005944:	e7fb      	b.n	800593e <__ascii_mbtowc+0x16>
 8005946:	f06f 0001 	mvn.w	r0, #1
 800594a:	e7f8      	b.n	800593e <__ascii_mbtowc+0x16>

0800594c <_realloc_r>:
 800594c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005950:	4680      	mov	r8, r0
 8005952:	4614      	mov	r4, r2
 8005954:	460e      	mov	r6, r1
 8005956:	b921      	cbnz	r1, 8005962 <_realloc_r+0x16>
 8005958:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800595c:	4611      	mov	r1, r2
 800595e:	f7ff b969 	b.w	8004c34 <_malloc_r>
 8005962:	b92a      	cbnz	r2, 8005970 <_realloc_r+0x24>
 8005964:	f7ff f8f2 	bl	8004b4c <_free_r>
 8005968:	4625      	mov	r5, r4
 800596a:	4628      	mov	r0, r5
 800596c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005970:	f000 f841 	bl	80059f6 <_malloc_usable_size_r>
 8005974:	4284      	cmp	r4, r0
 8005976:	4607      	mov	r7, r0
 8005978:	d802      	bhi.n	8005980 <_realloc_r+0x34>
 800597a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800597e:	d812      	bhi.n	80059a6 <_realloc_r+0x5a>
 8005980:	4621      	mov	r1, r4
 8005982:	4640      	mov	r0, r8
 8005984:	f7ff f956 	bl	8004c34 <_malloc_r>
 8005988:	4605      	mov	r5, r0
 800598a:	2800      	cmp	r0, #0
 800598c:	d0ed      	beq.n	800596a <_realloc_r+0x1e>
 800598e:	42bc      	cmp	r4, r7
 8005990:	4622      	mov	r2, r4
 8005992:	4631      	mov	r1, r6
 8005994:	bf28      	it	cs
 8005996:	463a      	movcs	r2, r7
 8005998:	f7ff ff84 	bl	80058a4 <memcpy>
 800599c:	4631      	mov	r1, r6
 800599e:	4640      	mov	r0, r8
 80059a0:	f7ff f8d4 	bl	8004b4c <_free_r>
 80059a4:	e7e1      	b.n	800596a <_realloc_r+0x1e>
 80059a6:	4635      	mov	r5, r6
 80059a8:	e7df      	b.n	800596a <_realloc_r+0x1e>

080059aa <__ascii_wctomb>:
 80059aa:	b149      	cbz	r1, 80059c0 <__ascii_wctomb+0x16>
 80059ac:	2aff      	cmp	r2, #255	; 0xff
 80059ae:	bf85      	ittet	hi
 80059b0:	238a      	movhi	r3, #138	; 0x8a
 80059b2:	6003      	strhi	r3, [r0, #0]
 80059b4:	700a      	strbls	r2, [r1, #0]
 80059b6:	f04f 30ff 	movhi.w	r0, #4294967295
 80059ba:	bf98      	it	ls
 80059bc:	2001      	movls	r0, #1
 80059be:	4770      	bx	lr
 80059c0:	4608      	mov	r0, r1
 80059c2:	4770      	bx	lr

080059c4 <fiprintf>:
 80059c4:	b40e      	push	{r1, r2, r3}
 80059c6:	b503      	push	{r0, r1, lr}
 80059c8:	4601      	mov	r1, r0
 80059ca:	ab03      	add	r3, sp, #12
 80059cc:	4805      	ldr	r0, [pc, #20]	; (80059e4 <fiprintf+0x20>)
 80059ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80059d2:	6800      	ldr	r0, [r0, #0]
 80059d4:	9301      	str	r3, [sp, #4]
 80059d6:	f000 f83f 	bl	8005a58 <_vfiprintf_r>
 80059da:	b002      	add	sp, #8
 80059dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80059e0:	b003      	add	sp, #12
 80059e2:	4770      	bx	lr
 80059e4:	2000007c 	.word	0x2000007c

080059e8 <abort>:
 80059e8:	b508      	push	{r3, lr}
 80059ea:	2006      	movs	r0, #6
 80059ec:	f000 fa0c 	bl	8005e08 <raise>
 80059f0:	2001      	movs	r0, #1
 80059f2:	f7fc f857 	bl	8001aa4 <_exit>

080059f6 <_malloc_usable_size_r>:
 80059f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059fa:	1f18      	subs	r0, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	bfbc      	itt	lt
 8005a00:	580b      	ldrlt	r3, [r1, r0]
 8005a02:	18c0      	addlt	r0, r0, r3
 8005a04:	4770      	bx	lr

08005a06 <__sfputc_r>:
 8005a06:	6893      	ldr	r3, [r2, #8]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	b410      	push	{r4}
 8005a0e:	6093      	str	r3, [r2, #8]
 8005a10:	da08      	bge.n	8005a24 <__sfputc_r+0x1e>
 8005a12:	6994      	ldr	r4, [r2, #24]
 8005a14:	42a3      	cmp	r3, r4
 8005a16:	db01      	blt.n	8005a1c <__sfputc_r+0x16>
 8005a18:	290a      	cmp	r1, #10
 8005a1a:	d103      	bne.n	8005a24 <__sfputc_r+0x1e>
 8005a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a20:	f000 b934 	b.w	8005c8c <__swbuf_r>
 8005a24:	6813      	ldr	r3, [r2, #0]
 8005a26:	1c58      	adds	r0, r3, #1
 8005a28:	6010      	str	r0, [r2, #0]
 8005a2a:	7019      	strb	r1, [r3, #0]
 8005a2c:	4608      	mov	r0, r1
 8005a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <__sfputs_r>:
 8005a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a36:	4606      	mov	r6, r0
 8005a38:	460f      	mov	r7, r1
 8005a3a:	4614      	mov	r4, r2
 8005a3c:	18d5      	adds	r5, r2, r3
 8005a3e:	42ac      	cmp	r4, r5
 8005a40:	d101      	bne.n	8005a46 <__sfputs_r+0x12>
 8005a42:	2000      	movs	r0, #0
 8005a44:	e007      	b.n	8005a56 <__sfputs_r+0x22>
 8005a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a4a:	463a      	mov	r2, r7
 8005a4c:	4630      	mov	r0, r6
 8005a4e:	f7ff ffda 	bl	8005a06 <__sfputc_r>
 8005a52:	1c43      	adds	r3, r0, #1
 8005a54:	d1f3      	bne.n	8005a3e <__sfputs_r+0xa>
 8005a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a58 <_vfiprintf_r>:
 8005a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a5c:	460d      	mov	r5, r1
 8005a5e:	b09d      	sub	sp, #116	; 0x74
 8005a60:	4614      	mov	r4, r2
 8005a62:	4698      	mov	r8, r3
 8005a64:	4606      	mov	r6, r0
 8005a66:	b118      	cbz	r0, 8005a70 <_vfiprintf_r+0x18>
 8005a68:	6a03      	ldr	r3, [r0, #32]
 8005a6a:	b90b      	cbnz	r3, 8005a70 <_vfiprintf_r+0x18>
 8005a6c:	f7fe f8d8 	bl	8003c20 <__sinit>
 8005a70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a72:	07d9      	lsls	r1, r3, #31
 8005a74:	d405      	bmi.n	8005a82 <_vfiprintf_r+0x2a>
 8005a76:	89ab      	ldrh	r3, [r5, #12]
 8005a78:	059a      	lsls	r2, r3, #22
 8005a7a:	d402      	bmi.n	8005a82 <_vfiprintf_r+0x2a>
 8005a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a7e:	f7fe f9e6 	bl	8003e4e <__retarget_lock_acquire_recursive>
 8005a82:	89ab      	ldrh	r3, [r5, #12]
 8005a84:	071b      	lsls	r3, r3, #28
 8005a86:	d501      	bpl.n	8005a8c <_vfiprintf_r+0x34>
 8005a88:	692b      	ldr	r3, [r5, #16]
 8005a8a:	b99b      	cbnz	r3, 8005ab4 <_vfiprintf_r+0x5c>
 8005a8c:	4629      	mov	r1, r5
 8005a8e:	4630      	mov	r0, r6
 8005a90:	f000 f93a 	bl	8005d08 <__swsetup_r>
 8005a94:	b170      	cbz	r0, 8005ab4 <_vfiprintf_r+0x5c>
 8005a96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a98:	07dc      	lsls	r4, r3, #31
 8005a9a:	d504      	bpl.n	8005aa6 <_vfiprintf_r+0x4e>
 8005a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa0:	b01d      	add	sp, #116	; 0x74
 8005aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa6:	89ab      	ldrh	r3, [r5, #12]
 8005aa8:	0598      	lsls	r0, r3, #22
 8005aaa:	d4f7      	bmi.n	8005a9c <_vfiprintf_r+0x44>
 8005aac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005aae:	f7fe f9cf 	bl	8003e50 <__retarget_lock_release_recursive>
 8005ab2:	e7f3      	b.n	8005a9c <_vfiprintf_r+0x44>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ab8:	2320      	movs	r3, #32
 8005aba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005abe:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ac2:	2330      	movs	r3, #48	; 0x30
 8005ac4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005c78 <_vfiprintf_r+0x220>
 8005ac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005acc:	f04f 0901 	mov.w	r9, #1
 8005ad0:	4623      	mov	r3, r4
 8005ad2:	469a      	mov	sl, r3
 8005ad4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ad8:	b10a      	cbz	r2, 8005ade <_vfiprintf_r+0x86>
 8005ada:	2a25      	cmp	r2, #37	; 0x25
 8005adc:	d1f9      	bne.n	8005ad2 <_vfiprintf_r+0x7a>
 8005ade:	ebba 0b04 	subs.w	fp, sl, r4
 8005ae2:	d00b      	beq.n	8005afc <_vfiprintf_r+0xa4>
 8005ae4:	465b      	mov	r3, fp
 8005ae6:	4622      	mov	r2, r4
 8005ae8:	4629      	mov	r1, r5
 8005aea:	4630      	mov	r0, r6
 8005aec:	f7ff ffa2 	bl	8005a34 <__sfputs_r>
 8005af0:	3001      	adds	r0, #1
 8005af2:	f000 80a9 	beq.w	8005c48 <_vfiprintf_r+0x1f0>
 8005af6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005af8:	445a      	add	r2, fp
 8005afa:	9209      	str	r2, [sp, #36]	; 0x24
 8005afc:	f89a 3000 	ldrb.w	r3, [sl]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	f000 80a1 	beq.w	8005c48 <_vfiprintf_r+0x1f0>
 8005b06:	2300      	movs	r3, #0
 8005b08:	f04f 32ff 	mov.w	r2, #4294967295
 8005b0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b10:	f10a 0a01 	add.w	sl, sl, #1
 8005b14:	9304      	str	r3, [sp, #16]
 8005b16:	9307      	str	r3, [sp, #28]
 8005b18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b1c:	931a      	str	r3, [sp, #104]	; 0x68
 8005b1e:	4654      	mov	r4, sl
 8005b20:	2205      	movs	r2, #5
 8005b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b26:	4854      	ldr	r0, [pc, #336]	; (8005c78 <_vfiprintf_r+0x220>)
 8005b28:	f7fa fb5a 	bl	80001e0 <memchr>
 8005b2c:	9a04      	ldr	r2, [sp, #16]
 8005b2e:	b9d8      	cbnz	r0, 8005b68 <_vfiprintf_r+0x110>
 8005b30:	06d1      	lsls	r1, r2, #27
 8005b32:	bf44      	itt	mi
 8005b34:	2320      	movmi	r3, #32
 8005b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b3a:	0713      	lsls	r3, r2, #28
 8005b3c:	bf44      	itt	mi
 8005b3e:	232b      	movmi	r3, #43	; 0x2b
 8005b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b44:	f89a 3000 	ldrb.w	r3, [sl]
 8005b48:	2b2a      	cmp	r3, #42	; 0x2a
 8005b4a:	d015      	beq.n	8005b78 <_vfiprintf_r+0x120>
 8005b4c:	9a07      	ldr	r2, [sp, #28]
 8005b4e:	4654      	mov	r4, sl
 8005b50:	2000      	movs	r0, #0
 8005b52:	f04f 0c0a 	mov.w	ip, #10
 8005b56:	4621      	mov	r1, r4
 8005b58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b5c:	3b30      	subs	r3, #48	; 0x30
 8005b5e:	2b09      	cmp	r3, #9
 8005b60:	d94d      	bls.n	8005bfe <_vfiprintf_r+0x1a6>
 8005b62:	b1b0      	cbz	r0, 8005b92 <_vfiprintf_r+0x13a>
 8005b64:	9207      	str	r2, [sp, #28]
 8005b66:	e014      	b.n	8005b92 <_vfiprintf_r+0x13a>
 8005b68:	eba0 0308 	sub.w	r3, r0, r8
 8005b6c:	fa09 f303 	lsl.w	r3, r9, r3
 8005b70:	4313      	orrs	r3, r2
 8005b72:	9304      	str	r3, [sp, #16]
 8005b74:	46a2      	mov	sl, r4
 8005b76:	e7d2      	b.n	8005b1e <_vfiprintf_r+0xc6>
 8005b78:	9b03      	ldr	r3, [sp, #12]
 8005b7a:	1d19      	adds	r1, r3, #4
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	9103      	str	r1, [sp, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	bfbb      	ittet	lt
 8005b84:	425b      	neglt	r3, r3
 8005b86:	f042 0202 	orrlt.w	r2, r2, #2
 8005b8a:	9307      	strge	r3, [sp, #28]
 8005b8c:	9307      	strlt	r3, [sp, #28]
 8005b8e:	bfb8      	it	lt
 8005b90:	9204      	strlt	r2, [sp, #16]
 8005b92:	7823      	ldrb	r3, [r4, #0]
 8005b94:	2b2e      	cmp	r3, #46	; 0x2e
 8005b96:	d10c      	bne.n	8005bb2 <_vfiprintf_r+0x15a>
 8005b98:	7863      	ldrb	r3, [r4, #1]
 8005b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b9c:	d134      	bne.n	8005c08 <_vfiprintf_r+0x1b0>
 8005b9e:	9b03      	ldr	r3, [sp, #12]
 8005ba0:	1d1a      	adds	r2, r3, #4
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	9203      	str	r2, [sp, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	bfb8      	it	lt
 8005baa:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bae:	3402      	adds	r4, #2
 8005bb0:	9305      	str	r3, [sp, #20]
 8005bb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005c88 <_vfiprintf_r+0x230>
 8005bb6:	7821      	ldrb	r1, [r4, #0]
 8005bb8:	2203      	movs	r2, #3
 8005bba:	4650      	mov	r0, sl
 8005bbc:	f7fa fb10 	bl	80001e0 <memchr>
 8005bc0:	b138      	cbz	r0, 8005bd2 <_vfiprintf_r+0x17a>
 8005bc2:	9b04      	ldr	r3, [sp, #16]
 8005bc4:	eba0 000a 	sub.w	r0, r0, sl
 8005bc8:	2240      	movs	r2, #64	; 0x40
 8005bca:	4082      	lsls	r2, r0
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	3401      	adds	r4, #1
 8005bd0:	9304      	str	r3, [sp, #16]
 8005bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bd6:	4829      	ldr	r0, [pc, #164]	; (8005c7c <_vfiprintf_r+0x224>)
 8005bd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bdc:	2206      	movs	r2, #6
 8005bde:	f7fa faff 	bl	80001e0 <memchr>
 8005be2:	2800      	cmp	r0, #0
 8005be4:	d03f      	beq.n	8005c66 <_vfiprintf_r+0x20e>
 8005be6:	4b26      	ldr	r3, [pc, #152]	; (8005c80 <_vfiprintf_r+0x228>)
 8005be8:	bb1b      	cbnz	r3, 8005c32 <_vfiprintf_r+0x1da>
 8005bea:	9b03      	ldr	r3, [sp, #12]
 8005bec:	3307      	adds	r3, #7
 8005bee:	f023 0307 	bic.w	r3, r3, #7
 8005bf2:	3308      	adds	r3, #8
 8005bf4:	9303      	str	r3, [sp, #12]
 8005bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf8:	443b      	add	r3, r7
 8005bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8005bfc:	e768      	b.n	8005ad0 <_vfiprintf_r+0x78>
 8005bfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c02:	460c      	mov	r4, r1
 8005c04:	2001      	movs	r0, #1
 8005c06:	e7a6      	b.n	8005b56 <_vfiprintf_r+0xfe>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	3401      	adds	r4, #1
 8005c0c:	9305      	str	r3, [sp, #20]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	f04f 0c0a 	mov.w	ip, #10
 8005c14:	4620      	mov	r0, r4
 8005c16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c1a:	3a30      	subs	r2, #48	; 0x30
 8005c1c:	2a09      	cmp	r2, #9
 8005c1e:	d903      	bls.n	8005c28 <_vfiprintf_r+0x1d0>
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0c6      	beq.n	8005bb2 <_vfiprintf_r+0x15a>
 8005c24:	9105      	str	r1, [sp, #20]
 8005c26:	e7c4      	b.n	8005bb2 <_vfiprintf_r+0x15a>
 8005c28:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c2c:	4604      	mov	r4, r0
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e7f0      	b.n	8005c14 <_vfiprintf_r+0x1bc>
 8005c32:	ab03      	add	r3, sp, #12
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	462a      	mov	r2, r5
 8005c38:	4b12      	ldr	r3, [pc, #72]	; (8005c84 <_vfiprintf_r+0x22c>)
 8005c3a:	a904      	add	r1, sp, #16
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f7fd fb9d 	bl	800337c <_printf_float>
 8005c42:	4607      	mov	r7, r0
 8005c44:	1c78      	adds	r0, r7, #1
 8005c46:	d1d6      	bne.n	8005bf6 <_vfiprintf_r+0x19e>
 8005c48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c4a:	07d9      	lsls	r1, r3, #31
 8005c4c:	d405      	bmi.n	8005c5a <_vfiprintf_r+0x202>
 8005c4e:	89ab      	ldrh	r3, [r5, #12]
 8005c50:	059a      	lsls	r2, r3, #22
 8005c52:	d402      	bmi.n	8005c5a <_vfiprintf_r+0x202>
 8005c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c56:	f7fe f8fb 	bl	8003e50 <__retarget_lock_release_recursive>
 8005c5a:	89ab      	ldrh	r3, [r5, #12]
 8005c5c:	065b      	lsls	r3, r3, #25
 8005c5e:	f53f af1d 	bmi.w	8005a9c <_vfiprintf_r+0x44>
 8005c62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c64:	e71c      	b.n	8005aa0 <_vfiprintf_r+0x48>
 8005c66:	ab03      	add	r3, sp, #12
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	462a      	mov	r2, r5
 8005c6c:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <_vfiprintf_r+0x22c>)
 8005c6e:	a904      	add	r1, sp, #16
 8005c70:	4630      	mov	r0, r6
 8005c72:	f7fd fe27 	bl	80038c4 <_printf_i>
 8005c76:	e7e4      	b.n	8005c42 <_vfiprintf_r+0x1ea>
 8005c78:	0800696c 	.word	0x0800696c
 8005c7c:	08006976 	.word	0x08006976
 8005c80:	0800337d 	.word	0x0800337d
 8005c84:	08005a35 	.word	0x08005a35
 8005c88:	08006972 	.word	0x08006972

08005c8c <__swbuf_r>:
 8005c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8e:	460e      	mov	r6, r1
 8005c90:	4614      	mov	r4, r2
 8005c92:	4605      	mov	r5, r0
 8005c94:	b118      	cbz	r0, 8005c9e <__swbuf_r+0x12>
 8005c96:	6a03      	ldr	r3, [r0, #32]
 8005c98:	b90b      	cbnz	r3, 8005c9e <__swbuf_r+0x12>
 8005c9a:	f7fd ffc1 	bl	8003c20 <__sinit>
 8005c9e:	69a3      	ldr	r3, [r4, #24]
 8005ca0:	60a3      	str	r3, [r4, #8]
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	071a      	lsls	r2, r3, #28
 8005ca6:	d525      	bpl.n	8005cf4 <__swbuf_r+0x68>
 8005ca8:	6923      	ldr	r3, [r4, #16]
 8005caa:	b31b      	cbz	r3, 8005cf4 <__swbuf_r+0x68>
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	6922      	ldr	r2, [r4, #16]
 8005cb0:	1a98      	subs	r0, r3, r2
 8005cb2:	6963      	ldr	r3, [r4, #20]
 8005cb4:	b2f6      	uxtb	r6, r6
 8005cb6:	4283      	cmp	r3, r0
 8005cb8:	4637      	mov	r7, r6
 8005cba:	dc04      	bgt.n	8005cc6 <__swbuf_r+0x3a>
 8005cbc:	4621      	mov	r1, r4
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f7ff fd9e 	bl	8005800 <_fflush_r>
 8005cc4:	b9e0      	cbnz	r0, 8005d00 <__swbuf_r+0x74>
 8005cc6:	68a3      	ldr	r3, [r4, #8]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	60a3      	str	r3, [r4, #8]
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	1c5a      	adds	r2, r3, #1
 8005cd0:	6022      	str	r2, [r4, #0]
 8005cd2:	701e      	strb	r6, [r3, #0]
 8005cd4:	6962      	ldr	r2, [r4, #20]
 8005cd6:	1c43      	adds	r3, r0, #1
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d004      	beq.n	8005ce6 <__swbuf_r+0x5a>
 8005cdc:	89a3      	ldrh	r3, [r4, #12]
 8005cde:	07db      	lsls	r3, r3, #31
 8005ce0:	d506      	bpl.n	8005cf0 <__swbuf_r+0x64>
 8005ce2:	2e0a      	cmp	r6, #10
 8005ce4:	d104      	bne.n	8005cf0 <__swbuf_r+0x64>
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	4628      	mov	r0, r5
 8005cea:	f7ff fd89 	bl	8005800 <_fflush_r>
 8005cee:	b938      	cbnz	r0, 8005d00 <__swbuf_r+0x74>
 8005cf0:	4638      	mov	r0, r7
 8005cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f000 f806 	bl	8005d08 <__swsetup_r>
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	d0d5      	beq.n	8005cac <__swbuf_r+0x20>
 8005d00:	f04f 37ff 	mov.w	r7, #4294967295
 8005d04:	e7f4      	b.n	8005cf0 <__swbuf_r+0x64>
	...

08005d08 <__swsetup_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	4b2a      	ldr	r3, [pc, #168]	; (8005db4 <__swsetup_r+0xac>)
 8005d0c:	4605      	mov	r5, r0
 8005d0e:	6818      	ldr	r0, [r3, #0]
 8005d10:	460c      	mov	r4, r1
 8005d12:	b118      	cbz	r0, 8005d1c <__swsetup_r+0x14>
 8005d14:	6a03      	ldr	r3, [r0, #32]
 8005d16:	b90b      	cbnz	r3, 8005d1c <__swsetup_r+0x14>
 8005d18:	f7fd ff82 	bl	8003c20 <__sinit>
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d22:	0718      	lsls	r0, r3, #28
 8005d24:	d422      	bmi.n	8005d6c <__swsetup_r+0x64>
 8005d26:	06d9      	lsls	r1, r3, #27
 8005d28:	d407      	bmi.n	8005d3a <__swsetup_r+0x32>
 8005d2a:	2309      	movs	r3, #9
 8005d2c:	602b      	str	r3, [r5, #0]
 8005d2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d32:	81a3      	strh	r3, [r4, #12]
 8005d34:	f04f 30ff 	mov.w	r0, #4294967295
 8005d38:	e034      	b.n	8005da4 <__swsetup_r+0x9c>
 8005d3a:	0758      	lsls	r0, r3, #29
 8005d3c:	d512      	bpl.n	8005d64 <__swsetup_r+0x5c>
 8005d3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d40:	b141      	cbz	r1, 8005d54 <__swsetup_r+0x4c>
 8005d42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d46:	4299      	cmp	r1, r3
 8005d48:	d002      	beq.n	8005d50 <__swsetup_r+0x48>
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	f7fe fefe 	bl	8004b4c <_free_r>
 8005d50:	2300      	movs	r3, #0
 8005d52:	6363      	str	r3, [r4, #52]	; 0x34
 8005d54:	89a3      	ldrh	r3, [r4, #12]
 8005d56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d5a:	81a3      	strh	r3, [r4, #12]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	6063      	str	r3, [r4, #4]
 8005d60:	6923      	ldr	r3, [r4, #16]
 8005d62:	6023      	str	r3, [r4, #0]
 8005d64:	89a3      	ldrh	r3, [r4, #12]
 8005d66:	f043 0308 	orr.w	r3, r3, #8
 8005d6a:	81a3      	strh	r3, [r4, #12]
 8005d6c:	6923      	ldr	r3, [r4, #16]
 8005d6e:	b94b      	cbnz	r3, 8005d84 <__swsetup_r+0x7c>
 8005d70:	89a3      	ldrh	r3, [r4, #12]
 8005d72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d7a:	d003      	beq.n	8005d84 <__swsetup_r+0x7c>
 8005d7c:	4621      	mov	r1, r4
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f000 f884 	bl	8005e8c <__smakebuf_r>
 8005d84:	89a0      	ldrh	r0, [r4, #12]
 8005d86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d8a:	f010 0301 	ands.w	r3, r0, #1
 8005d8e:	d00a      	beq.n	8005da6 <__swsetup_r+0x9e>
 8005d90:	2300      	movs	r3, #0
 8005d92:	60a3      	str	r3, [r4, #8]
 8005d94:	6963      	ldr	r3, [r4, #20]
 8005d96:	425b      	negs	r3, r3
 8005d98:	61a3      	str	r3, [r4, #24]
 8005d9a:	6923      	ldr	r3, [r4, #16]
 8005d9c:	b943      	cbnz	r3, 8005db0 <__swsetup_r+0xa8>
 8005d9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005da2:	d1c4      	bne.n	8005d2e <__swsetup_r+0x26>
 8005da4:	bd38      	pop	{r3, r4, r5, pc}
 8005da6:	0781      	lsls	r1, r0, #30
 8005da8:	bf58      	it	pl
 8005daa:	6963      	ldrpl	r3, [r4, #20]
 8005dac:	60a3      	str	r3, [r4, #8]
 8005dae:	e7f4      	b.n	8005d9a <__swsetup_r+0x92>
 8005db0:	2000      	movs	r0, #0
 8005db2:	e7f7      	b.n	8005da4 <__swsetup_r+0x9c>
 8005db4:	2000007c 	.word	0x2000007c

08005db8 <_raise_r>:
 8005db8:	291f      	cmp	r1, #31
 8005dba:	b538      	push	{r3, r4, r5, lr}
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	460d      	mov	r5, r1
 8005dc0:	d904      	bls.n	8005dcc <_raise_r+0x14>
 8005dc2:	2316      	movs	r3, #22
 8005dc4:	6003      	str	r3, [r0, #0]
 8005dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8005dca:	bd38      	pop	{r3, r4, r5, pc}
 8005dcc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005dce:	b112      	cbz	r2, 8005dd6 <_raise_r+0x1e>
 8005dd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005dd4:	b94b      	cbnz	r3, 8005dea <_raise_r+0x32>
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	f000 f830 	bl	8005e3c <_getpid_r>
 8005ddc:	462a      	mov	r2, r5
 8005dde:	4601      	mov	r1, r0
 8005de0:	4620      	mov	r0, r4
 8005de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005de6:	f000 b817 	b.w	8005e18 <_kill_r>
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d00a      	beq.n	8005e04 <_raise_r+0x4c>
 8005dee:	1c59      	adds	r1, r3, #1
 8005df0:	d103      	bne.n	8005dfa <_raise_r+0x42>
 8005df2:	2316      	movs	r3, #22
 8005df4:	6003      	str	r3, [r0, #0]
 8005df6:	2001      	movs	r0, #1
 8005df8:	e7e7      	b.n	8005dca <_raise_r+0x12>
 8005dfa:	2400      	movs	r4, #0
 8005dfc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005e00:	4628      	mov	r0, r5
 8005e02:	4798      	blx	r3
 8005e04:	2000      	movs	r0, #0
 8005e06:	e7e0      	b.n	8005dca <_raise_r+0x12>

08005e08 <raise>:
 8005e08:	4b02      	ldr	r3, [pc, #8]	; (8005e14 <raise+0xc>)
 8005e0a:	4601      	mov	r1, r0
 8005e0c:	6818      	ldr	r0, [r3, #0]
 8005e0e:	f7ff bfd3 	b.w	8005db8 <_raise_r>
 8005e12:	bf00      	nop
 8005e14:	2000007c 	.word	0x2000007c

08005e18 <_kill_r>:
 8005e18:	b538      	push	{r3, r4, r5, lr}
 8005e1a:	4d07      	ldr	r5, [pc, #28]	; (8005e38 <_kill_r+0x20>)
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	4604      	mov	r4, r0
 8005e20:	4608      	mov	r0, r1
 8005e22:	4611      	mov	r1, r2
 8005e24:	602b      	str	r3, [r5, #0]
 8005e26:	f7fb fe2d 	bl	8001a84 <_kill>
 8005e2a:	1c43      	adds	r3, r0, #1
 8005e2c:	d102      	bne.n	8005e34 <_kill_r+0x1c>
 8005e2e:	682b      	ldr	r3, [r5, #0]
 8005e30:	b103      	cbz	r3, 8005e34 <_kill_r+0x1c>
 8005e32:	6023      	str	r3, [r4, #0]
 8005e34:	bd38      	pop	{r3, r4, r5, pc}
 8005e36:	bf00      	nop
 8005e38:	20000408 	.word	0x20000408

08005e3c <_getpid_r>:
 8005e3c:	f7fb be1a 	b.w	8001a74 <_getpid>

08005e40 <__swhatbuf_r>:
 8005e40:	b570      	push	{r4, r5, r6, lr}
 8005e42:	460c      	mov	r4, r1
 8005e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e48:	2900      	cmp	r1, #0
 8005e4a:	b096      	sub	sp, #88	; 0x58
 8005e4c:	4615      	mov	r5, r2
 8005e4e:	461e      	mov	r6, r3
 8005e50:	da0d      	bge.n	8005e6e <__swhatbuf_r+0x2e>
 8005e52:	89a3      	ldrh	r3, [r4, #12]
 8005e54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e58:	f04f 0100 	mov.w	r1, #0
 8005e5c:	bf0c      	ite	eq
 8005e5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005e62:	2340      	movne	r3, #64	; 0x40
 8005e64:	2000      	movs	r0, #0
 8005e66:	6031      	str	r1, [r6, #0]
 8005e68:	602b      	str	r3, [r5, #0]
 8005e6a:	b016      	add	sp, #88	; 0x58
 8005e6c:	bd70      	pop	{r4, r5, r6, pc}
 8005e6e:	466a      	mov	r2, sp
 8005e70:	f000 f848 	bl	8005f04 <_fstat_r>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	dbec      	blt.n	8005e52 <__swhatbuf_r+0x12>
 8005e78:	9901      	ldr	r1, [sp, #4]
 8005e7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005e7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005e82:	4259      	negs	r1, r3
 8005e84:	4159      	adcs	r1, r3
 8005e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e8a:	e7eb      	b.n	8005e64 <__swhatbuf_r+0x24>

08005e8c <__smakebuf_r>:
 8005e8c:	898b      	ldrh	r3, [r1, #12]
 8005e8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e90:	079d      	lsls	r5, r3, #30
 8005e92:	4606      	mov	r6, r0
 8005e94:	460c      	mov	r4, r1
 8005e96:	d507      	bpl.n	8005ea8 <__smakebuf_r+0x1c>
 8005e98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e9c:	6023      	str	r3, [r4, #0]
 8005e9e:	6123      	str	r3, [r4, #16]
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	6163      	str	r3, [r4, #20]
 8005ea4:	b002      	add	sp, #8
 8005ea6:	bd70      	pop	{r4, r5, r6, pc}
 8005ea8:	ab01      	add	r3, sp, #4
 8005eaa:	466a      	mov	r2, sp
 8005eac:	f7ff ffc8 	bl	8005e40 <__swhatbuf_r>
 8005eb0:	9900      	ldr	r1, [sp, #0]
 8005eb2:	4605      	mov	r5, r0
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f7fe febd 	bl	8004c34 <_malloc_r>
 8005eba:	b948      	cbnz	r0, 8005ed0 <__smakebuf_r+0x44>
 8005ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ec0:	059a      	lsls	r2, r3, #22
 8005ec2:	d4ef      	bmi.n	8005ea4 <__smakebuf_r+0x18>
 8005ec4:	f023 0303 	bic.w	r3, r3, #3
 8005ec8:	f043 0302 	orr.w	r3, r3, #2
 8005ecc:	81a3      	strh	r3, [r4, #12]
 8005ece:	e7e3      	b.n	8005e98 <__smakebuf_r+0xc>
 8005ed0:	89a3      	ldrh	r3, [r4, #12]
 8005ed2:	6020      	str	r0, [r4, #0]
 8005ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed8:	81a3      	strh	r3, [r4, #12]
 8005eda:	9b00      	ldr	r3, [sp, #0]
 8005edc:	6163      	str	r3, [r4, #20]
 8005ede:	9b01      	ldr	r3, [sp, #4]
 8005ee0:	6120      	str	r0, [r4, #16]
 8005ee2:	b15b      	cbz	r3, 8005efc <__smakebuf_r+0x70>
 8005ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ee8:	4630      	mov	r0, r6
 8005eea:	f000 f81d 	bl	8005f28 <_isatty_r>
 8005eee:	b128      	cbz	r0, 8005efc <__smakebuf_r+0x70>
 8005ef0:	89a3      	ldrh	r3, [r4, #12]
 8005ef2:	f023 0303 	bic.w	r3, r3, #3
 8005ef6:	f043 0301 	orr.w	r3, r3, #1
 8005efa:	81a3      	strh	r3, [r4, #12]
 8005efc:	89a3      	ldrh	r3, [r4, #12]
 8005efe:	431d      	orrs	r5, r3
 8005f00:	81a5      	strh	r5, [r4, #12]
 8005f02:	e7cf      	b.n	8005ea4 <__smakebuf_r+0x18>

08005f04 <_fstat_r>:
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	4d07      	ldr	r5, [pc, #28]	; (8005f24 <_fstat_r+0x20>)
 8005f08:	2300      	movs	r3, #0
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	4608      	mov	r0, r1
 8005f0e:	4611      	mov	r1, r2
 8005f10:	602b      	str	r3, [r5, #0]
 8005f12:	f7fb fe16 	bl	8001b42 <_fstat>
 8005f16:	1c43      	adds	r3, r0, #1
 8005f18:	d102      	bne.n	8005f20 <_fstat_r+0x1c>
 8005f1a:	682b      	ldr	r3, [r5, #0]
 8005f1c:	b103      	cbz	r3, 8005f20 <_fstat_r+0x1c>
 8005f1e:	6023      	str	r3, [r4, #0]
 8005f20:	bd38      	pop	{r3, r4, r5, pc}
 8005f22:	bf00      	nop
 8005f24:	20000408 	.word	0x20000408

08005f28 <_isatty_r>:
 8005f28:	b538      	push	{r3, r4, r5, lr}
 8005f2a:	4d06      	ldr	r5, [pc, #24]	; (8005f44 <_isatty_r+0x1c>)
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	4604      	mov	r4, r0
 8005f30:	4608      	mov	r0, r1
 8005f32:	602b      	str	r3, [r5, #0]
 8005f34:	f7fb fe15 	bl	8001b62 <_isatty>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	d102      	bne.n	8005f42 <_isatty_r+0x1a>
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	b103      	cbz	r3, 8005f42 <_isatty_r+0x1a>
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	bd38      	pop	{r3, r4, r5, pc}
 8005f44:	20000408 	.word	0x20000408

08005f48 <powf>:
 8005f48:	b508      	push	{r3, lr}
 8005f4a:	ed2d 8b04 	vpush	{d8-d9}
 8005f4e:	eeb0 8a60 	vmov.f32	s16, s1
 8005f52:	eeb0 9a40 	vmov.f32	s18, s0
 8005f56:	f000 f85b 	bl	8006010 <__ieee754_powf>
 8005f5a:	eeb4 8a48 	vcmp.f32	s16, s16
 8005f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f62:	eef0 8a40 	vmov.f32	s17, s0
 8005f66:	d63e      	bvs.n	8005fe6 <powf+0x9e>
 8005f68:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8005f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f70:	d112      	bne.n	8005f98 <powf+0x50>
 8005f72:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f7a:	d039      	beq.n	8005ff0 <powf+0xa8>
 8005f7c:	eeb0 0a48 	vmov.f32	s0, s16
 8005f80:	f000 f839 	bl	8005ff6 <finitef>
 8005f84:	b378      	cbz	r0, 8005fe6 <powf+0x9e>
 8005f86:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f8e:	d52a      	bpl.n	8005fe6 <powf+0x9e>
 8005f90:	f7fd ff32 	bl	8003df8 <__errno>
 8005f94:	2322      	movs	r3, #34	; 0x22
 8005f96:	e014      	b.n	8005fc2 <powf+0x7a>
 8005f98:	f000 f82d 	bl	8005ff6 <finitef>
 8005f9c:	b998      	cbnz	r0, 8005fc6 <powf+0x7e>
 8005f9e:	eeb0 0a49 	vmov.f32	s0, s18
 8005fa2:	f000 f828 	bl	8005ff6 <finitef>
 8005fa6:	b170      	cbz	r0, 8005fc6 <powf+0x7e>
 8005fa8:	eeb0 0a48 	vmov.f32	s0, s16
 8005fac:	f000 f823 	bl	8005ff6 <finitef>
 8005fb0:	b148      	cbz	r0, 8005fc6 <powf+0x7e>
 8005fb2:	eef4 8a68 	vcmp.f32	s17, s17
 8005fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fba:	d7e9      	bvc.n	8005f90 <powf+0x48>
 8005fbc:	f7fd ff1c 	bl	8003df8 <__errno>
 8005fc0:	2321      	movs	r3, #33	; 0x21
 8005fc2:	6003      	str	r3, [r0, #0]
 8005fc4:	e00f      	b.n	8005fe6 <powf+0x9e>
 8005fc6:	eef5 8a40 	vcmp.f32	s17, #0.0
 8005fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fce:	d10a      	bne.n	8005fe6 <powf+0x9e>
 8005fd0:	eeb0 0a49 	vmov.f32	s0, s18
 8005fd4:	f000 f80f 	bl	8005ff6 <finitef>
 8005fd8:	b128      	cbz	r0, 8005fe6 <powf+0x9e>
 8005fda:	eeb0 0a48 	vmov.f32	s0, s16
 8005fde:	f000 f80a 	bl	8005ff6 <finitef>
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	d1d4      	bne.n	8005f90 <powf+0x48>
 8005fe6:	eeb0 0a68 	vmov.f32	s0, s17
 8005fea:	ecbd 8b04 	vpop	{d8-d9}
 8005fee:	bd08      	pop	{r3, pc}
 8005ff0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8005ff4:	e7f7      	b.n	8005fe6 <powf+0x9e>

08005ff6 <finitef>:
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	ed8d 0a01 	vstr	s0, [sp, #4]
 8005ffc:	9801      	ldr	r0, [sp, #4]
 8005ffe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006002:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006006:	bfac      	ite	ge
 8006008:	2000      	movge	r0, #0
 800600a:	2001      	movlt	r0, #1
 800600c:	b002      	add	sp, #8
 800600e:	4770      	bx	lr

08006010 <__ieee754_powf>:
 8006010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006014:	ee10 4a90 	vmov	r4, s1
 8006018:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800601c:	ed2d 8b02 	vpush	{d8}
 8006020:	ee10 7a10 	vmov	r7, s0
 8006024:	eeb0 8a40 	vmov.f32	s16, s0
 8006028:	eef0 8a60 	vmov.f32	s17, s1
 800602c:	d10c      	bne.n	8006048 <__ieee754_powf+0x38>
 800602e:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 8006032:	007f      	lsls	r7, r7, #1
 8006034:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 8006038:	f240 8292 	bls.w	8006560 <__ieee754_powf+0x550>
 800603c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8006040:	ecbd 8b02 	vpop	{d8}
 8006044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006048:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 800604c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8006050:	dcf4      	bgt.n	800603c <__ieee754_powf+0x2c>
 8006052:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8006056:	dd08      	ble.n	800606a <__ieee754_powf+0x5a>
 8006058:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800605c:	d1ee      	bne.n	800603c <__ieee754_powf+0x2c>
 800605e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8006062:	0064      	lsls	r4, r4, #1
 8006064:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8006068:	e7e6      	b.n	8006038 <__ieee754_powf+0x28>
 800606a:	2f00      	cmp	r7, #0
 800606c:	da20      	bge.n	80060b0 <__ieee754_powf+0xa0>
 800606e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8006072:	da2d      	bge.n	80060d0 <__ieee754_powf+0xc0>
 8006074:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8006078:	f2c0 827b 	blt.w	8006572 <__ieee754_powf+0x562>
 800607c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8006080:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006084:	fa48 f603 	asr.w	r6, r8, r3
 8006088:	fa06 f303 	lsl.w	r3, r6, r3
 800608c:	4543      	cmp	r3, r8
 800608e:	f040 8270 	bne.w	8006572 <__ieee754_powf+0x562>
 8006092:	f006 0601 	and.w	r6, r6, #1
 8006096:	f1c6 0602 	rsb	r6, r6, #2
 800609a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800609e:	d11f      	bne.n	80060e0 <__ieee754_powf+0xd0>
 80060a0:	2c00      	cmp	r4, #0
 80060a2:	f280 8263 	bge.w	800656c <__ieee754_powf+0x55c>
 80060a6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80060aa:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80060ae:	e7c7      	b.n	8006040 <__ieee754_powf+0x30>
 80060b0:	2600      	movs	r6, #0
 80060b2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80060b6:	d1f0      	bne.n	800609a <__ieee754_powf+0x8a>
 80060b8:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80060bc:	f000 8250 	beq.w	8006560 <__ieee754_powf+0x550>
 80060c0:	dd08      	ble.n	80060d4 <__ieee754_powf+0xc4>
 80060c2:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 80063c8 <__ieee754_powf+0x3b8>
 80060c6:	2c00      	cmp	r4, #0
 80060c8:	bfa8      	it	ge
 80060ca:	eeb0 0a68 	vmovge.f32	s0, s17
 80060ce:	e7b7      	b.n	8006040 <__ieee754_powf+0x30>
 80060d0:	2602      	movs	r6, #2
 80060d2:	e7ee      	b.n	80060b2 <__ieee754_powf+0xa2>
 80060d4:	2c00      	cmp	r4, #0
 80060d6:	f280 8246 	bge.w	8006566 <__ieee754_powf+0x556>
 80060da:	eeb1 0a68 	vneg.f32	s0, s17
 80060de:	e7af      	b.n	8006040 <__ieee754_powf+0x30>
 80060e0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80060e4:	d102      	bne.n	80060ec <__ieee754_powf+0xdc>
 80060e6:	ee28 0a08 	vmul.f32	s0, s16, s16
 80060ea:	e7a9      	b.n	8006040 <__ieee754_powf+0x30>
 80060ec:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80060f0:	eeb0 0a48 	vmov.f32	s0, s16
 80060f4:	d107      	bne.n	8006106 <__ieee754_powf+0xf6>
 80060f6:	2f00      	cmp	r7, #0
 80060f8:	db05      	blt.n	8006106 <__ieee754_powf+0xf6>
 80060fa:	ecbd 8b02 	vpop	{d8}
 80060fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006102:	f000 badf 	b.w	80066c4 <__ieee754_sqrtf>
 8006106:	f000 fa4d 	bl	80065a4 <fabsf>
 800610a:	b125      	cbz	r5, 8006116 <__ieee754_powf+0x106>
 800610c:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8006110:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8006114:	d115      	bne.n	8006142 <__ieee754_powf+0x132>
 8006116:	2c00      	cmp	r4, #0
 8006118:	bfbc      	itt	lt
 800611a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800611e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8006122:	2f00      	cmp	r7, #0
 8006124:	da8c      	bge.n	8006040 <__ieee754_powf+0x30>
 8006126:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800612a:	4335      	orrs	r5, r6
 800612c:	d104      	bne.n	8006138 <__ieee754_powf+0x128>
 800612e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006132:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006136:	e783      	b.n	8006040 <__ieee754_powf+0x30>
 8006138:	2e01      	cmp	r6, #1
 800613a:	d181      	bne.n	8006040 <__ieee754_powf+0x30>
 800613c:	eeb1 0a40 	vneg.f32	s0, s0
 8006140:	e77e      	b.n	8006040 <__ieee754_powf+0x30>
 8006142:	0ff8      	lsrs	r0, r7, #31
 8006144:	3801      	subs	r0, #1
 8006146:	ea56 0300 	orrs.w	r3, r6, r0
 800614a:	d104      	bne.n	8006156 <__ieee754_powf+0x146>
 800614c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8006150:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8006154:	e774      	b.n	8006040 <__ieee754_powf+0x30>
 8006156:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800615a:	dd73      	ble.n	8006244 <__ieee754_powf+0x234>
 800615c:	4b9b      	ldr	r3, [pc, #620]	; (80063cc <__ieee754_powf+0x3bc>)
 800615e:	429d      	cmp	r5, r3
 8006160:	dc08      	bgt.n	8006174 <__ieee754_powf+0x164>
 8006162:	2c00      	cmp	r4, #0
 8006164:	da0b      	bge.n	800617e <__ieee754_powf+0x16e>
 8006166:	2000      	movs	r0, #0
 8006168:	ecbd 8b02 	vpop	{d8}
 800616c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006170:	f000 baa2 	b.w	80066b8 <__math_oflowf>
 8006174:	4b96      	ldr	r3, [pc, #600]	; (80063d0 <__ieee754_powf+0x3c0>)
 8006176:	429d      	cmp	r5, r3
 8006178:	dd08      	ble.n	800618c <__ieee754_powf+0x17c>
 800617a:	2c00      	cmp	r4, #0
 800617c:	dcf3      	bgt.n	8006166 <__ieee754_powf+0x156>
 800617e:	2000      	movs	r0, #0
 8006180:	ecbd 8b02 	vpop	{d8}
 8006184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006188:	f000 ba90 	b.w	80066ac <__math_uflowf>
 800618c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006190:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006194:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80063d4 <__ieee754_powf+0x3c4>
 8006198:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800619c:	eee0 6a67 	vfms.f32	s13, s0, s15
 80061a0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80061a4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80061a8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80061ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061b0:	eddf 7a89 	vldr	s15, [pc, #548]	; 80063d8 <__ieee754_powf+0x3c8>
 80061b4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80061b8:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80063dc <__ieee754_powf+0x3cc>
 80061bc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80061c0:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80063e0 <__ieee754_powf+0x3d0>
 80061c4:	eef0 6a67 	vmov.f32	s13, s15
 80061c8:	eee0 6a07 	vfma.f32	s13, s0, s14
 80061cc:	ee16 3a90 	vmov	r3, s13
 80061d0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80061d4:	f023 030f 	bic.w	r3, r3, #15
 80061d8:	ee06 3a90 	vmov	s13, r3
 80061dc:	eee0 6a47 	vfms.f32	s13, s0, s14
 80061e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80061e4:	3e01      	subs	r6, #1
 80061e6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80061ea:	4306      	orrs	r6, r0
 80061ec:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80061f0:	f024 040f 	bic.w	r4, r4, #15
 80061f4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80061f8:	bf08      	it	eq
 80061fa:	eeb0 8a47 	vmoveq.f32	s16, s14
 80061fe:	ee07 4a10 	vmov	s14, r4
 8006202:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8006206:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800620a:	ee07 3a90 	vmov	s15, r3
 800620e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8006212:	ee07 4a10 	vmov	s14, r4
 8006216:	ee67 7a87 	vmul.f32	s15, s15, s14
 800621a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800621e:	ee17 1a10 	vmov	r1, s14
 8006222:	2900      	cmp	r1, #0
 8006224:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006228:	f340 817c 	ble.w	8006524 <__ieee754_powf+0x514>
 800622c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8006230:	f340 80f8 	ble.w	8006424 <__ieee754_powf+0x414>
 8006234:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800623c:	bf4c      	ite	mi
 800623e:	2001      	movmi	r0, #1
 8006240:	2000      	movpl	r0, #0
 8006242:	e791      	b.n	8006168 <__ieee754_powf+0x158>
 8006244:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 8006248:	bf01      	itttt	eq
 800624a:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80063e4 <__ieee754_powf+0x3d4>
 800624e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8006252:	f06f 0317 	mvneq.w	r3, #23
 8006256:	ee17 5a90 	vmoveq	r5, s15
 800625a:	ea4f 52e5 	mov.w	r2, r5, asr #23
 800625e:	bf18      	it	ne
 8006260:	2300      	movne	r3, #0
 8006262:	3a7f      	subs	r2, #127	; 0x7f
 8006264:	441a      	add	r2, r3
 8006266:	4b60      	ldr	r3, [pc, #384]	; (80063e8 <__ieee754_powf+0x3d8>)
 8006268:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800626c:	429d      	cmp	r5, r3
 800626e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8006272:	dd06      	ble.n	8006282 <__ieee754_powf+0x272>
 8006274:	4b5d      	ldr	r3, [pc, #372]	; (80063ec <__ieee754_powf+0x3dc>)
 8006276:	429d      	cmp	r5, r3
 8006278:	f340 80a4 	ble.w	80063c4 <__ieee754_powf+0x3b4>
 800627c:	3201      	adds	r2, #1
 800627e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8006282:	2500      	movs	r5, #0
 8006284:	4b5a      	ldr	r3, [pc, #360]	; (80063f0 <__ieee754_powf+0x3e0>)
 8006286:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800628a:	ee07 1a10 	vmov	s14, r1
 800628e:	edd3 5a00 	vldr	s11, [r3]
 8006292:	4b58      	ldr	r3, [pc, #352]	; (80063f4 <__ieee754_powf+0x3e4>)
 8006294:	ee75 7a87 	vadd.f32	s15, s11, s14
 8006298:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800629c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80062a0:	1049      	asrs	r1, r1, #1
 80062a2:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80062a6:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80062aa:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80062ae:	ee37 6a65 	vsub.f32	s12, s14, s11
 80062b2:	ee07 1a90 	vmov	s15, r1
 80062b6:	ee26 5a24 	vmul.f32	s10, s12, s9
 80062ba:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80062be:	ee15 7a10 	vmov	r7, s10
 80062c2:	401f      	ands	r7, r3
 80062c4:	ee06 7a90 	vmov	s13, r7
 80062c8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80062cc:	ee37 7a65 	vsub.f32	s14, s14, s11
 80062d0:	ee65 7a05 	vmul.f32	s15, s10, s10
 80062d4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80062d8:	eddf 5a47 	vldr	s11, [pc, #284]	; 80063f8 <__ieee754_powf+0x3e8>
 80062dc:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80063fc <__ieee754_powf+0x3ec>
 80062e0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80062e4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8006400 <__ieee754_powf+0x3f0>
 80062e8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80062ec:	eddf 5a39 	vldr	s11, [pc, #228]	; 80063d4 <__ieee754_powf+0x3c4>
 80062f0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80062f4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8006404 <__ieee754_powf+0x3f4>
 80062f8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80062fc:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006408 <__ieee754_powf+0x3f8>
 8006300:	ee26 6a24 	vmul.f32	s12, s12, s9
 8006304:	eee7 5a27 	vfma.f32	s11, s14, s15
 8006308:	ee35 7a26 	vadd.f32	s14, s10, s13
 800630c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8006310:	ee27 7a06 	vmul.f32	s14, s14, s12
 8006314:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8006318:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800631c:	eef0 5a67 	vmov.f32	s11, s15
 8006320:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8006324:	ee75 5a87 	vadd.f32	s11, s11, s14
 8006328:	ee15 1a90 	vmov	r1, s11
 800632c:	4019      	ands	r1, r3
 800632e:	ee05 1a90 	vmov	s11, r1
 8006332:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8006336:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800633a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800633e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8006342:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006346:	eeb0 6a67 	vmov.f32	s12, s15
 800634a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800634e:	ee16 1a10 	vmov	r1, s12
 8006352:	4019      	ands	r1, r3
 8006354:	ee07 1a10 	vmov	s14, r1
 8006358:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800635c:	ee06 1a10 	vmov	s12, r1
 8006360:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006364:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800640c <__ieee754_powf+0x3fc>
 8006368:	4929      	ldr	r1, [pc, #164]	; (8006410 <__ieee754_powf+0x400>)
 800636a:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8006414 <__ieee754_powf+0x404>
 800636e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006372:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8006418 <__ieee754_powf+0x408>
 8006376:	eee6 7a07 	vfma.f32	s15, s12, s14
 800637a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800637e:	ed91 7a00 	vldr	s14, [r1]
 8006382:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006386:	ee07 2a10 	vmov	s14, r2
 800638a:	eef0 6a67 	vmov.f32	s13, s15
 800638e:	4a23      	ldr	r2, [pc, #140]	; (800641c <__ieee754_powf+0x40c>)
 8006390:	eee6 6a25 	vfma.f32	s13, s12, s11
 8006394:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8006398:	ed92 5a00 	vldr	s10, [r2]
 800639c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80063a0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80063a4:	ee76 6a87 	vadd.f32	s13, s13, s14
 80063a8:	ee16 2a90 	vmov	r2, s13
 80063ac:	4013      	ands	r3, r2
 80063ae:	ee06 3a90 	vmov	s13, r3
 80063b2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80063b6:	ee37 7a45 	vsub.f32	s14, s14, s10
 80063ba:	eea6 7a65 	vfms.f32	s14, s12, s11
 80063be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80063c2:	e70f      	b.n	80061e4 <__ieee754_powf+0x1d4>
 80063c4:	2501      	movs	r5, #1
 80063c6:	e75d      	b.n	8006284 <__ieee754_powf+0x274>
 80063c8:	00000000 	.word	0x00000000
 80063cc:	3f7ffff3 	.word	0x3f7ffff3
 80063d0:	3f800007 	.word	0x3f800007
 80063d4:	3eaaaaab 	.word	0x3eaaaaab
 80063d8:	3fb8aa3b 	.word	0x3fb8aa3b
 80063dc:	36eca570 	.word	0x36eca570
 80063e0:	3fb8aa00 	.word	0x3fb8aa00
 80063e4:	4b800000 	.word	0x4b800000
 80063e8:	001cc471 	.word	0x001cc471
 80063ec:	005db3d6 	.word	0x005db3d6
 80063f0:	08006ac4 	.word	0x08006ac4
 80063f4:	fffff000 	.word	0xfffff000
 80063f8:	3e6c3255 	.word	0x3e6c3255
 80063fc:	3e53f142 	.word	0x3e53f142
 8006400:	3e8ba305 	.word	0x3e8ba305
 8006404:	3edb6db7 	.word	0x3edb6db7
 8006408:	3f19999a 	.word	0x3f19999a
 800640c:	3f76384f 	.word	0x3f76384f
 8006410:	08006ad4 	.word	0x08006ad4
 8006414:	3f763800 	.word	0x3f763800
 8006418:	369dc3a0 	.word	0x369dc3a0
 800641c:	08006acc 	.word	0x08006acc
 8006420:	3338aa3c 	.word	0x3338aa3c
 8006424:	f040 8093 	bne.w	800654e <__ieee754_powf+0x53e>
 8006428:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8006420 <__ieee754_powf+0x410>
 800642c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006430:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8006434:	eef4 6ac7 	vcmpe.f32	s13, s14
 8006438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800643c:	f73f aefa 	bgt.w	8006234 <__ieee754_powf+0x224>
 8006440:	15db      	asrs	r3, r3, #23
 8006442:	3b7e      	subs	r3, #126	; 0x7e
 8006444:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006448:	4118      	asrs	r0, r3
 800644a:	4408      	add	r0, r1
 800644c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006450:	4a49      	ldr	r2, [pc, #292]	; (8006578 <__ieee754_powf+0x568>)
 8006452:	3b7f      	subs	r3, #127	; 0x7f
 8006454:	411a      	asrs	r2, r3
 8006456:	4002      	ands	r2, r0
 8006458:	ee07 2a10 	vmov	s14, r2
 800645c:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8006460:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006464:	f1c3 0317 	rsb	r3, r3, #23
 8006468:	4118      	asrs	r0, r3
 800646a:	2900      	cmp	r1, #0
 800646c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006470:	bfb8      	it	lt
 8006472:	4240      	neglt	r0, r0
 8006474:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8006478:	eddf 6a40 	vldr	s13, [pc, #256]	; 800657c <__ieee754_powf+0x56c>
 800647c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8006580 <__ieee754_powf+0x570>
 8006480:	ee17 3a10 	vmov	r3, s14
 8006484:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006488:	f023 030f 	bic.w	r3, r3, #15
 800648c:	ee07 3a10 	vmov	s14, r3
 8006490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006494:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006498:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800649c:	eddf 7a39 	vldr	s15, [pc, #228]	; 8006584 <__ieee754_powf+0x574>
 80064a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a4:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80064a8:	eef0 6a67 	vmov.f32	s13, s15
 80064ac:	eee7 6a06 	vfma.f32	s13, s14, s12
 80064b0:	eef0 5a66 	vmov.f32	s11, s13
 80064b4:	eee7 5a46 	vfms.f32	s11, s14, s12
 80064b8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80064bc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80064c0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8006588 <__ieee754_powf+0x578>
 80064c4:	eddf 5a31 	vldr	s11, [pc, #196]	; 800658c <__ieee754_powf+0x57c>
 80064c8:	eea7 6a25 	vfma.f32	s12, s14, s11
 80064cc:	eddf 5a30 	vldr	s11, [pc, #192]	; 8006590 <__ieee754_powf+0x580>
 80064d0:	eee6 5a07 	vfma.f32	s11, s12, s14
 80064d4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8006594 <__ieee754_powf+0x584>
 80064d8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80064dc:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006598 <__ieee754_powf+0x588>
 80064e0:	eee6 5a07 	vfma.f32	s11, s12, s14
 80064e4:	eeb0 6a66 	vmov.f32	s12, s13
 80064e8:	eea5 6ac7 	vfms.f32	s12, s11, s14
 80064ec:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80064f0:	ee66 5a86 	vmul.f32	s11, s13, s12
 80064f4:	ee36 6a47 	vsub.f32	s12, s12, s14
 80064f8:	eee6 7aa7 	vfma.f32	s15, s13, s15
 80064fc:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8006500:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006504:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006508:	ee30 0a67 	vsub.f32	s0, s0, s15
 800650c:	ee10 3a10 	vmov	r3, s0
 8006510:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8006514:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006518:	da1f      	bge.n	800655a <__ieee754_powf+0x54a>
 800651a:	f000 f84b 	bl	80065b4 <scalbnf>
 800651e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006522:	e58d      	b.n	8006040 <__ieee754_powf+0x30>
 8006524:	4a1d      	ldr	r2, [pc, #116]	; (800659c <__ieee754_powf+0x58c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	dd07      	ble.n	800653a <__ieee754_powf+0x52a>
 800652a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800652e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006532:	bf4c      	ite	mi
 8006534:	2001      	movmi	r0, #1
 8006536:	2000      	movpl	r0, #0
 8006538:	e622      	b.n	8006180 <__ieee754_powf+0x170>
 800653a:	d108      	bne.n	800654e <__ieee754_powf+0x53e>
 800653c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006540:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8006544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006548:	f6ff af7a 	blt.w	8006440 <__ieee754_powf+0x430>
 800654c:	e7ed      	b.n	800652a <__ieee754_powf+0x51a>
 800654e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8006552:	f73f af75 	bgt.w	8006440 <__ieee754_powf+0x430>
 8006556:	2000      	movs	r0, #0
 8006558:	e78c      	b.n	8006474 <__ieee754_powf+0x464>
 800655a:	ee00 3a10 	vmov	s0, r3
 800655e:	e7de      	b.n	800651e <__ieee754_powf+0x50e>
 8006560:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006564:	e56c      	b.n	8006040 <__ieee754_powf+0x30>
 8006566:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80065a0 <__ieee754_powf+0x590>
 800656a:	e569      	b.n	8006040 <__ieee754_powf+0x30>
 800656c:	eeb0 0a48 	vmov.f32	s0, s16
 8006570:	e566      	b.n	8006040 <__ieee754_powf+0x30>
 8006572:	2600      	movs	r6, #0
 8006574:	e591      	b.n	800609a <__ieee754_powf+0x8a>
 8006576:	bf00      	nop
 8006578:	ff800000 	.word	0xff800000
 800657c:	3f317218 	.word	0x3f317218
 8006580:	3f317200 	.word	0x3f317200
 8006584:	35bfbe8c 	.word	0x35bfbe8c
 8006588:	b5ddea0e 	.word	0xb5ddea0e
 800658c:	3331bb4c 	.word	0x3331bb4c
 8006590:	388ab355 	.word	0x388ab355
 8006594:	bb360b61 	.word	0xbb360b61
 8006598:	3e2aaaab 	.word	0x3e2aaaab
 800659c:	43160000 	.word	0x43160000
 80065a0:	00000000 	.word	0x00000000

080065a4 <fabsf>:
 80065a4:	ee10 3a10 	vmov	r3, s0
 80065a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065ac:	ee00 3a10 	vmov	s0, r3
 80065b0:	4770      	bx	lr
	...

080065b4 <scalbnf>:
 80065b4:	ee10 3a10 	vmov	r3, s0
 80065b8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80065bc:	d02b      	beq.n	8006616 <scalbnf+0x62>
 80065be:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80065c2:	d302      	bcc.n	80065ca <scalbnf+0x16>
 80065c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80065c8:	4770      	bx	lr
 80065ca:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80065ce:	d123      	bne.n	8006618 <scalbnf+0x64>
 80065d0:	4b24      	ldr	r3, [pc, #144]	; (8006664 <scalbnf+0xb0>)
 80065d2:	eddf 7a25 	vldr	s15, [pc, #148]	; 8006668 <scalbnf+0xb4>
 80065d6:	4298      	cmp	r0, r3
 80065d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80065dc:	db17      	blt.n	800660e <scalbnf+0x5a>
 80065de:	ee10 3a10 	vmov	r3, s0
 80065e2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80065e6:	3a19      	subs	r2, #25
 80065e8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80065ec:	4288      	cmp	r0, r1
 80065ee:	dd15      	ble.n	800661c <scalbnf+0x68>
 80065f0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800666c <scalbnf+0xb8>
 80065f4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8006670 <scalbnf+0xbc>
 80065f8:	ee10 3a10 	vmov	r3, s0
 80065fc:	eeb0 7a67 	vmov.f32	s14, s15
 8006600:	2b00      	cmp	r3, #0
 8006602:	bfb8      	it	lt
 8006604:	eef0 7a66 	vmovlt.f32	s15, s13
 8006608:	ee27 0a87 	vmul.f32	s0, s15, s14
 800660c:	4770      	bx	lr
 800660e:	eddf 7a19 	vldr	s15, [pc, #100]	; 8006674 <scalbnf+0xc0>
 8006612:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006616:	4770      	bx	lr
 8006618:	0dd2      	lsrs	r2, r2, #23
 800661a:	e7e5      	b.n	80065e8 <scalbnf+0x34>
 800661c:	4410      	add	r0, r2
 800661e:	28fe      	cmp	r0, #254	; 0xfe
 8006620:	dce6      	bgt.n	80065f0 <scalbnf+0x3c>
 8006622:	2800      	cmp	r0, #0
 8006624:	dd06      	ble.n	8006634 <scalbnf+0x80>
 8006626:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800662a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800662e:	ee00 3a10 	vmov	s0, r3
 8006632:	4770      	bx	lr
 8006634:	f110 0f16 	cmn.w	r0, #22
 8006638:	da09      	bge.n	800664e <scalbnf+0x9a>
 800663a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8006674 <scalbnf+0xc0>
 800663e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006678 <scalbnf+0xc4>
 8006642:	ee10 3a10 	vmov	r3, s0
 8006646:	eeb0 7a67 	vmov.f32	s14, s15
 800664a:	2b00      	cmp	r3, #0
 800664c:	e7d9      	b.n	8006602 <scalbnf+0x4e>
 800664e:	3019      	adds	r0, #25
 8006650:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006654:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006658:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800667c <scalbnf+0xc8>
 800665c:	ee07 3a90 	vmov	s15, r3
 8006660:	e7d7      	b.n	8006612 <scalbnf+0x5e>
 8006662:	bf00      	nop
 8006664:	ffff3cb0 	.word	0xffff3cb0
 8006668:	4c000000 	.word	0x4c000000
 800666c:	7149f2ca 	.word	0x7149f2ca
 8006670:	f149f2ca 	.word	0xf149f2ca
 8006674:	0da24260 	.word	0x0da24260
 8006678:	8da24260 	.word	0x8da24260
 800667c:	33000000 	.word	0x33000000

08006680 <with_errnof>:
 8006680:	b513      	push	{r0, r1, r4, lr}
 8006682:	4604      	mov	r4, r0
 8006684:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006688:	f7fd fbb6 	bl	8003df8 <__errno>
 800668c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006690:	6004      	str	r4, [r0, #0]
 8006692:	b002      	add	sp, #8
 8006694:	bd10      	pop	{r4, pc}

08006696 <xflowf>:
 8006696:	b130      	cbz	r0, 80066a6 <xflowf+0x10>
 8006698:	eef1 7a40 	vneg.f32	s15, s0
 800669c:	ee27 0a80 	vmul.f32	s0, s15, s0
 80066a0:	2022      	movs	r0, #34	; 0x22
 80066a2:	f7ff bfed 	b.w	8006680 <with_errnof>
 80066a6:	eef0 7a40 	vmov.f32	s15, s0
 80066aa:	e7f7      	b.n	800669c <xflowf+0x6>

080066ac <__math_uflowf>:
 80066ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80066b4 <__math_uflowf+0x8>
 80066b0:	f7ff bff1 	b.w	8006696 <xflowf>
 80066b4:	10000000 	.word	0x10000000

080066b8 <__math_oflowf>:
 80066b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80066c0 <__math_oflowf+0x8>
 80066bc:	f7ff bfeb 	b.w	8006696 <xflowf>
 80066c0:	70000000 	.word	0x70000000

080066c4 <__ieee754_sqrtf>:
 80066c4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80066c8:	4770      	bx	lr
	...

080066cc <_init>:
 80066cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ce:	bf00      	nop
 80066d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066d2:	bc08      	pop	{r3}
 80066d4:	469e      	mov	lr, r3
 80066d6:	4770      	bx	lr

080066d8 <_fini>:
 80066d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066da:	bf00      	nop
 80066dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066de:	bc08      	pop	{r3}
 80066e0:	469e      	mov	lr, r3
 80066e2:	4770      	bx	lr
