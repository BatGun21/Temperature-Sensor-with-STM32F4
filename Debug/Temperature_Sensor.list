
Temperature_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000657c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08006720  08006720  00016720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b0c  08006b0c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08006b0c  08006b0c  00016b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b14  08006b14  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b14  08006b14  00016b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b18  08006b18  00016b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08006b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  200001ec  08006d08  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08006d08  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000857c  00000000  00000000  0002025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001608  00000000  00000000  000287db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000798  00000000  00000000  00029de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005c5  00000000  00000000  0002a580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016458  00000000  00000000  0002ab45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008e4e  00000000  00000000  00040f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087c9e  00000000  00000000  00049deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000318c  00000000  00000000  000d1a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000d4c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006704 	.word	0x08006704

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	08006704 	.word	0x08006704

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	; (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fac:	f000 fe82 	bl	8001cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb0:	f000 f83c 	bl	800102c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Init(Clock_Frequency);
 8000fb4:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8000fb8:	f000 fb36 	bl	8001628 <SysTick_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fbc:	f000 f8be 	bl	800113c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fc0:	f000 f892 	bl	80010e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LED_init();
 8000fc4:	f000 fa70 	bl	80014a8 <LED_init>
  adc_init();
 8000fc8:	f000 fab4 	bl	8001534 <adc_init>
  ConfigureVoltageSourcePin();
 8000fcc:	f000 fa48 	bl	8001460 <ConfigureVoltageSourcePin>
  Timer3_Init();
 8000fd0:	f000 f9f0 	bl	80013b4 <Timer3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SetWaitPidLoopUpdate();
 8000fd4:	f000 f8ee 	bl	80011b4 <SetWaitPidLoopUpdate>

	  if (time_expired(pidLoopUpdateWait.delayTime, pidLoopUpdateWait.currentTime)){
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <main+0x7c>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	4a11      	ldr	r2, [pc, #68]	; (8001024 <main+0x7c>)
 8000fde:	6812      	ldr	r2, [r2, #0]
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 fa8a 	bl	80014fc <time_expired>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d004      	beq.n	8000ff8 <main+0x50>
		  PIDControlLoop();
 8000fee:	f000 f931 	bl	8001254 <PIDControlLoop>
		  pidLoopUpdateWait.activeFlag = 0;
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <main+0x7c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
	  }

	  SetWaitOneSec();
 8000ff8:	f000 f8f2 	bl	80011e0 <SetWaitOneSec>

	  if (time_expired(OneSec.delayTime, OneSec.currentTime)){\
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <main+0x80>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	4a09      	ldr	r2, [pc, #36]	; (8001028 <main+0x80>)
 8001002:	6812      	ldr	r2, [r2, #0]
 8001004:	4611      	mov	r1, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f000 fa78 	bl	80014fc <time_expired>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0e0      	beq.n	8000fd4 <main+0x2c>
		  print_pidOutpuVal();
 8001012:	f000 f8ad 	bl	8001170 <print_pidOutpuVal>
	  	  TemperaturePrint();
 8001016:	f000 fb99 	bl	800174c <TemperaturePrint>
//	  	  Voltage_Print();
		  OneSec.activeFlag = 0;
 800101a:	4b03      	ldr	r3, [pc, #12]	; (8001028 <main+0x80>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
	  SetWaitPidLoopUpdate();
 8001020:	e7d8      	b.n	8000fd4 <main+0x2c>
 8001022:	bf00      	nop
 8001024:	20000000 	.word	0x20000000
 8001028:	2000000c 	.word	0x2000000c

0800102c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b094      	sub	sp, #80	; 0x50
 8001030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001032:	f107 0320 	add.w	r3, r7, #32
 8001036:	2230      	movs	r2, #48	; 0x30
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f002 fea7 	bl	8003d8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <SystemClock_Config+0xb4>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	4a21      	ldr	r2, [pc, #132]	; (80010e0 <SystemClock_Config+0xb4>)
 800105a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105e:	6413      	str	r3, [r2, #64]	; 0x40
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <SystemClock_Config+0xb4>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <SystemClock_Config+0xb8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a1b      	ldr	r2, [pc, #108]	; (80010e4 <SystemClock_Config+0xb8>)
 8001076:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <SystemClock_Config+0xb8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001088:	2302      	movs	r3, #2
 800108a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800108c:	2301      	movs	r3, #1
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001090:	2310      	movs	r3, #16
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001094:	2300      	movs	r3, #0
 8001096:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001098:	f107 0320 	add.w	r3, r7, #32
 800109c:	4618      	mov	r0, r3
 800109e:	f001 f8d1 	bl	8002244 <HAL_RCC_OscConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010a8:	f000 fc68 	bl	800197c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ac:	230f      	movs	r3, #15
 80010ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f001 fb34 	bl	8002734 <HAL_RCC_ClockConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010d2:	f000 fc53 	bl	800197c <Error_Handler>
  }
}
 80010d6:	bf00      	nop
 80010d8:	3750      	adds	r7, #80	; 0x50
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40007000 	.word	0x40007000

080010e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_USART2_UART_Init+0x4c>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	; (8001138 <MX_USART2_UART_Init+0x50>)
 80010f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <MX_USART2_UART_Init+0x4c>)
 80010f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_USART2_UART_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_USART2_UART_Init+0x4c>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <MX_USART2_UART_Init+0x4c>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_USART2_UART_Init+0x4c>)
 800110e:	220c      	movs	r2, #12
 8001110:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <MX_USART2_UART_Init+0x4c>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_USART2_UART_Init+0x4c>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_USART2_UART_Init+0x4c>)
 8001120:	f001 fce8 	bl	8002af4 <HAL_UART_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800112a:	f000 fc27 	bl	800197c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000208 	.word	0x20000208
 8001138:	40004400 	.word	0x40004400

0800113c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_GPIO_Init+0x30>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <MX_GPIO_Init+0x30>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_GPIO_Init+0x30>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800

08001170 <print_pidOutpuVal>:
	sprintf(msg2, " ADC Value = %d ", adcVal);
	printTimestamp();
	HAL_UART_Transmit(&huart2, (uint8_t*)(msg2), strlen(msg2), 200);
}

void print_pidOutpuVal(void){ // Debug
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	sprintf(msg4, "%.3f,", pidOutput);
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <print_pidOutpuVal+0x34>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f9ed 	bl	8000558 <__aeabi_f2d>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4909      	ldr	r1, [pc, #36]	; (80011a8 <print_pidOutpuVal+0x38>)
 8001184:	4809      	ldr	r0, [pc, #36]	; (80011ac <print_pidOutpuVal+0x3c>)
 8001186:	f002 fd9f 	bl	8003cc8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)(msg4), strlen(msg4), 200);
 800118a:	4808      	ldr	r0, [pc, #32]	; (80011ac <print_pidOutpuVal+0x3c>)
 800118c:	f7ff f878 	bl	8000280 <strlen>
 8001190:	4603      	mov	r3, r0
 8001192:	b29a      	uxth	r2, r3
 8001194:	23c8      	movs	r3, #200	; 0xc8
 8001196:	4905      	ldr	r1, [pc, #20]	; (80011ac <print_pidOutpuVal+0x3c>)
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <print_pidOutpuVal+0x40>)
 800119a:	f001 fcf8 	bl	8002b8e <HAL_UART_Transmit>
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000025c 	.word	0x2000025c
 80011a8:	08006734 	.word	0x08006734
 80011ac:	20000298 	.word	0x20000298
 80011b0:	20000208 	.word	0x20000208

080011b4 <SetWaitPidLoopUpdate>:

void SetWaitPidLoopUpdate(void){
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
	  if (!pidLoopUpdateWait.activeFlag){
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <SetWaitPidLoopUpdate+0x24>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d106      	bne.n	80011ce <SetWaitPidLoopUpdate+0x1a>
		  pidLoopUpdateWait.currentTime = counter;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <SetWaitPidLoopUpdate+0x28>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <SetWaitPidLoopUpdate+0x24>)
 80011c6:	6013      	str	r3, [r2, #0]
		  pidLoopUpdateWait.activeFlag = 1;
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <SetWaitPidLoopUpdate+0x24>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	609a      	str	r2, [r3, #8]
	  }
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000260 	.word	0x20000260

080011e0 <SetWaitOneSec>:

void SetWaitOneSec(void){
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
	  if (!OneSec.activeFlag){
 80011e4:	4b07      	ldr	r3, [pc, #28]	; (8001204 <SetWaitOneSec+0x24>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d106      	bne.n	80011fa <SetWaitOneSec+0x1a>
		  OneSec.currentTime = counter;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <SetWaitOneSec+0x28>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <SetWaitOneSec+0x24>)
 80011f2:	6013      	str	r3, [r2, #0]
		  OneSec.activeFlag = 1;
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <SetWaitOneSec+0x24>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	609a      	str	r2, [r3, #8]
	  }
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	2000000c 	.word	0x2000000c
 8001208:	20000260 	.word	0x20000260

0800120c <ControlRelay>:

void ControlRelay(float dutycycle) {
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	ed87 0a01 	vstr	s0, [r7, #4]

    uint32_t dutyValue = (uint32_t)((100 - dutycycle) * (PWM_PERIOD/ 100)); // NPN Transistor to relay
 8001216:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001248 <ControlRelay+0x3c>
 800121a:	edd7 7a01 	vldr	s15, [r7, #4]
 800121e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001222:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800124c <ControlRelay+0x40>
 8001226:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800122e:	ee17 3a90 	vmov	r3, s15
 8001232:	60fb      	str	r3, [r7, #12]

    // Set the duty cycle
    TIM3->CCR1 = dutyValue;
 8001234:	4a06      	ldr	r2, [pc, #24]	; (8001250 <ControlRelay+0x44>)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6353      	str	r3, [r2, #52]	; 0x34
}
 800123a:	bf00      	nop
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	42c80000 	.word	0x42c80000
 800124c:	44160000 	.word	0x44160000
 8001250:	40000400 	.word	0x40000400

08001254 <PIDControlLoop>:

void PIDControlLoop(void) {
 8001254:	b5b0      	push	{r4, r5, r7, lr}
 8001256:	af00      	add	r7, sp, #0
    currentTemperature = readTemperature();
 8001258:	f000 fa9c 	bl	8001794 <readTemperature>
 800125c:	eef0 7a40 	vmov.f32	s15, s0
 8001260:	4b4a      	ldr	r3, [pc, #296]	; (800138c <PIDControlLoop+0x138>)
 8001262:	edc3 7a00 	vstr	s15, [r3]

    error = (currentTemperature - TARGET_TEMPERATURE);
 8001266:	4b49      	ldr	r3, [pc, #292]	; (800138c <PIDControlLoop+0x138>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f974 	bl	8000558 <__aeabi_f2d>
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	4b46      	ldr	r3, [pc, #280]	; (8001390 <PIDControlLoop+0x13c>)
 8001276:	f7ff f80f 	bl	8000298 <__aeabi_dsub>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	f7ff fc99 	bl	8000bb8 <__aeabi_d2f>
 8001286:	4603      	mov	r3, r0
 8001288:	4a42      	ldr	r2, [pc, #264]	; (8001394 <PIDControlLoop+0x140>)
 800128a:	6013      	str	r3, [r2, #0]

    integral += error;
 800128c:	4b41      	ldr	r3, [pc, #260]	; (8001394 <PIDControlLoop+0x140>)
 800128e:	ed93 7a00 	vldr	s14, [r3]
 8001292:	4b41      	ldr	r3, [pc, #260]	; (8001398 <PIDControlLoop+0x144>)
 8001294:	edd3 7a00 	vldr	s15, [r3]
 8001298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129c:	4b3e      	ldr	r3, [pc, #248]	; (8001398 <PIDControlLoop+0x144>)
 800129e:	edc3 7a00 	vstr	s15, [r3]

    derivative = error - derivative;
 80012a2:	4b3c      	ldr	r3, [pc, #240]	; (8001394 <PIDControlLoop+0x140>)
 80012a4:	ed93 7a00 	vldr	s14, [r3]
 80012a8:	4b3c      	ldr	r3, [pc, #240]	; (800139c <PIDControlLoop+0x148>)
 80012aa:	edd3 7a00 	vldr	s15, [r3]
 80012ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b2:	4b3a      	ldr	r3, [pc, #232]	; (800139c <PIDControlLoop+0x148>)
 80012b4:	edc3 7a00 	vstr	s15, [r3]

    pidOutput = KP * error + KI * integral + KD * derivative;
 80012b8:	4b36      	ldr	r3, [pc, #216]	; (8001394 <PIDControlLoop+0x140>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f94b 	bl	8000558 <__aeabi_f2d>
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <PIDControlLoop+0x14c>)
 80012c8:	f7ff f99e 	bl	8000608 <__aeabi_dmul>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4614      	mov	r4, r2
 80012d2:	461d      	mov	r5, r3
 80012d4:	4b30      	ldr	r3, [pc, #192]	; (8001398 <PIDControlLoop+0x144>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f93d 	bl	8000558 <__aeabi_f2d>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4620      	mov	r0, r4
 80012e4:	4629      	mov	r1, r5
 80012e6:	f7fe ffd9 	bl	800029c <__adddf3>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4614      	mov	r4, r2
 80012f0:	461d      	mov	r5, r3
 80012f2:	4b2a      	ldr	r3, [pc, #168]	; (800139c <PIDControlLoop+0x148>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f92e 	bl	8000558 <__aeabi_f2d>
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	f7ff f980 	bl	8000608 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4620      	mov	r0, r4
 800130e:	4629      	mov	r1, r5
 8001310:	f7fe ffc4 	bl	800029c <__adddf3>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4610      	mov	r0, r2
 800131a:	4619      	mov	r1, r3
 800131c:	f7ff fc4c 	bl	8000bb8 <__aeabi_d2f>
 8001320:	4603      	mov	r3, r0
 8001322:	4a20      	ldr	r2, [pc, #128]	; (80013a4 <PIDControlLoop+0x150>)
 8001324:	6013      	str	r3, [r2, #0]

    // Limit the PWM output to the maximum value
    if (pidOutput > DUTYCYCLE_MAX_VALUE) {
 8001326:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <PIDControlLoop+0x150>)
 8001328:	edd3 7a00 	vldr	s15, [r3]
 800132c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80013a8 <PIDControlLoop+0x154>
 8001330:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001338:	dd02      	ble.n	8001340 <PIDControlLoop+0xec>
        pidOutput = PID_MAX_VALUE;
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <PIDControlLoop+0x150>)
 800133c:	4a1b      	ldr	r2, [pc, #108]	; (80013ac <PIDControlLoop+0x158>)
 800133e:	601a      	str	r2, [r3, #0]
    }
    // If too low value set to 0
    if (pidOutput < DUTYCYCLE_MIN_VALUE) {
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <PIDControlLoop+0x150>)
 8001342:	edd3 7a00 	vldr	s15, [r3]
 8001346:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800134a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800134e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001352:	d503      	bpl.n	800135c <PIDControlLoop+0x108>
        pidOutput = PID_MIN_VALUE;
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <PIDControlLoop+0x150>)
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
    }
    pidOutput = Percentage(pidOutput, PID_MAX_VALUE);
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <PIDControlLoop+0x150>)
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	eddf 0a13 	vldr	s1, [pc, #76]	; 80013b0 <PIDControlLoop+0x15c>
 8001366:	eeb0 0a67 	vmov.f32	s0, s15
 800136a:	f000 fadd 	bl	8001928 <Percentage>
 800136e:	eef0 7a40 	vmov.f32	s15, s0
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <PIDControlLoop+0x150>)
 8001374:	edc3 7a00 	vstr	s15, [r3]

    // Control the relay using PWM
    ControlRelay(pidOutput);
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <PIDControlLoop+0x150>)
 800137a:	edd3 7a00 	vldr	s15, [r3]
 800137e:	eeb0 0a67 	vmov.f32	s0, s15
 8001382:	f7ff ff43 	bl	800120c <ControlRelay>
}
 8001386:	bf00      	nop
 8001388:	bdb0      	pop	{r4, r5, r7, pc}
 800138a:	bf00      	nop
 800138c:	2000024c 	.word	0x2000024c
 8001390:	40340000 	.word	0x40340000
 8001394:	20000250 	.word	0x20000250
 8001398:	20000254 	.word	0x20000254
 800139c:	20000258 	.word	0x20000258
 80013a0:	403b0000 	.word	0x403b0000
 80013a4:	2000025c 	.word	0x2000025c
 80013a8:	42960000 	.word	0x42960000
 80013ac:	42c80000 	.word	0x42c80000
 80013b0:	42c80000 	.word	0x42c80000

080013b4 <Timer3_Init>:
    TIM2->EGR |= TIM_EGR_UG;

    TIM2->CR1 |= TIM_CR1_CEN; // Enable TIM2
}

void Timer3_Init(void) {
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80013b8:	4b26      	ldr	r3, [pc, #152]	; (8001454 <Timer3_Init+0xa0>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	4a25      	ldr	r2, [pc, #148]	; (8001454 <Timer3_Init+0xa0>)
 80013be:	f043 0302 	orr.w	r3, r3, #2
 80013c2:	6413      	str	r3, [r2, #64]	; 0x40

    // PC6 as alternate function (TIM3 CH1)
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80013c4:	4b23      	ldr	r3, [pc, #140]	; (8001454 <Timer3_Init+0xa0>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c8:	4a22      	ldr	r2, [pc, #136]	; (8001454 <Timer3_Init+0xa0>)
 80013ca:	f043 0304 	orr.w	r3, r3, #4
 80013ce:	6313      	str	r3, [r2, #48]	; 0x30
    GPIO_PORT_RELAY->MODER |= GPIO_MODER_MODER6_1;  // Alternate function mode
 80013d0:	4b21      	ldr	r3, [pc, #132]	; (8001458 <Timer3_Init+0xa4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a20      	ldr	r2, [pc, #128]	; (8001458 <Timer3_Init+0xa4>)
 80013d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013da:	6013      	str	r3, [r2, #0]
    GPIO_PORT_RELAY->AFR[0] |= 0x02000000;  // AF02 for PC6 (TIM3 CH1)
 80013dc:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <Timer3_Init+0xa4>)
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	4a1d      	ldr	r2, [pc, #116]	; (8001458 <Timer3_Init+0xa4>)
 80013e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013e6:	6213      	str	r3, [r2, #32]
    GPIO_PORT_RELAY->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6;  // High speed
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <Timer3_Init+0xa4>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	4a1a      	ldr	r2, [pc, #104]	; (8001458 <Timer3_Init+0xa4>)
 80013ee:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80013f2:	6093      	str	r3, [r2, #8]
    GPIO_PORT_RELAY->OTYPER |= 0x0040; // Open Drain
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <Timer3_Init+0xa4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	4a17      	ldr	r2, [pc, #92]	; (8001458 <Timer3_Init+0xa4>)
 80013fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013fe:	6053      	str	r3, [r2, #4]

    // TIM3
    TIM3->PSC = Clock_Frequency - 1;  // Prescaler to achieve 1ms tick with 16MHz clock
 8001400:	4b16      	ldr	r3, [pc, #88]	; (800145c <Timer3_Init+0xa8>)
 8001402:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001406:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = PWM_PERIOD - 1;  // Auto-reload value
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <Timer3_Init+0xa8>)
 800140a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800140e:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM3->CCR1 = (uint16_t) (MIN_DUTY_CYCLE * PWM_PERIOD / 100);  // Initial duty cycle
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <Timer3_Init+0xa8>)
 8001412:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001416:	635a      	str	r2, [r3, #52]	; 0x34

    // Configure TIM3 CH1 for PWM mode 1
    TIM3->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 8001418:	4b10      	ldr	r3, [pc, #64]	; (800145c <Timer3_Init+0xa8>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a0f      	ldr	r2, [pc, #60]	; (800145c <Timer3_Init+0xa8>)
 800141e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001422:	6193      	str	r3, [r2, #24]
    TIM3->CCER |= TIM_CCER_CC1E;  // Enable capture/compare channel 1
 8001424:	4b0d      	ldr	r3, [pc, #52]	; (800145c <Timer3_Init+0xa8>)
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	4a0c      	ldr	r2, [pc, #48]	; (800145c <Timer3_Init+0xa8>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6213      	str	r3, [r2, #32]

    // Trigger an update event to load new values
    TIM3->EGR |= TIM_EGR_UG;
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <Timer3_Init+0xa8>)
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	4a09      	ldr	r2, [pc, #36]	; (800145c <Timer3_Init+0xa8>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6153      	str	r3, [r2, #20]

    TIM3->CR1 |= TIM_CR1_CEN; // Enable TIM3
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <Timer3_Init+0xa8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a06      	ldr	r2, [pc, #24]	; (800145c <Timer3_Init+0xa8>)
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	6013      	str	r3, [r2, #0]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800
 8001458:	40020800 	.word	0x40020800
 800145c:	40000400 	.word	0x40000400

08001460 <ConfigureVoltageSourcePin>:
        return 0.0;
    }
    return sum / count;
}

void ConfigureVoltageSourcePin(void) {
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
    // Enable the GPIO port clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <ConfigureVoltageSourcePin+0x40>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <ConfigureVoltageSourcePin+0x40>)
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	6313      	str	r3, [r2, #48]	; 0x30

    // Configure PC1 as general purpose output
    GPIO_PORT_RELAY->MODER |= GPIO_MODER_MODER1_0;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <ConfigureVoltageSourcePin+0x44>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <ConfigureVoltageSourcePin+0x44>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	6013      	str	r3, [r2, #0]

    // Configure PC1 as open drain
    GPIO_PORT_RELAY->OTYPER |= GPIO_OTYPER_OT_1;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <ConfigureVoltageSourcePin+0x44>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <ConfigureVoltageSourcePin+0x44>)
 8001482:	f043 0302 	orr.w	r3, r3, #2
 8001486:	6053      	str	r3, [r2, #4]

    // Configure PC1 to high speed
    GPIO_PORT_RELAY->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR1;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <ConfigureVoltageSourcePin+0x44>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <ConfigureVoltageSourcePin+0x44>)
 800148e:	f043 030c 	orr.w	r3, r3, #12
 8001492:	6093      	str	r3, [r2, #8]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020800 	.word	0x40020800

080014a8 <LED_init>:

void LED_init(void){
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; // Enabling Clock for GPIOD
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <LED_init+0x4c>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	4a10      	ldr	r2, [pc, #64]	; (80014f4 <LED_init+0x4c>)
 80014b2:	f043 0308 	orr.w	r3, r3, #8
 80014b6:	6313      	str	r3, [r2, #48]	; 0x30
	GPIO_PORT_LEDS->MODER |= GPIO_MODER_MODER14_0; //Set bit 0 to 1 Red
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <LED_init+0x50>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <LED_init+0x50>)
 80014be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c2:	6013      	str	r3, [r2, #0]
	GPIO_PORT_LEDS->MODER |= GPIO_MODER_MODER15_0; //Set bit 0 to 1 Blue
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <LED_init+0x50>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <LED_init+0x50>)
 80014ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80014ce:	6013      	str	r3, [r2, #0]
	GPIO_PORT_LEDS->MODER |= GPIO_MODER_MODER13_0; //Set bit 0 to 1 Orange
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <LED_init+0x50>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a08      	ldr	r2, [pc, #32]	; (80014f8 <LED_init+0x50>)
 80014d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014da:	6013      	str	r3, [r2, #0]
	GPIO_PORT_LEDS->MODER |= GPIO_MODER_MODER12_0; //Set bit 0 to 1 Green
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <LED_init+0x50>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <LED_init+0x50>)
 80014e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014e6:	6013      	str	r3, [r2, #0]
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020c00 	.word	0x40020c00

080014fc <time_expired>:

int time_expired (int delayTime, int currentTime){
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
	int timeExpiredFlag = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
	if (counter> currentTime+delayTime){
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	441a      	add	r2, r3
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <time_expired+0x34>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	da02      	bge.n	800151e <time_expired+0x22>
		timeExpiredFlag = 1;
 8001518:	2301      	movs	r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	e001      	b.n	8001522 <time_expired+0x26>
	}else{
		timeExpiredFlag = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
	}
	return timeExpiredFlag;
 8001522:	68fb      	ldr	r3, [r7, #12]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	20000260 	.word	0x20000260

08001534 <adc_init>:

void adc_init(void) {
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
    // Enable the ADC1 clock
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8001538:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <adc_init+0xa0>)
 800153a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153c:	4a25      	ldr	r2, [pc, #148]	; (80015d4 <adc_init+0xa0>)
 800153e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001542:	6453      	str	r3, [r2, #68]	; 0x44

    // Enable the GPIOB clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8001544:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <adc_init+0xa0>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	4a22      	ldr	r2, [pc, #136]	; (80015d4 <adc_init+0xa0>)
 800154a:	f043 0302 	orr.w	r3, r3, #2
 800154e:	6313      	str	r3, [r2, #48]	; 0x30

    // Configure PB1 as analog input
    GPIO_PORT_ADC->MODER |= GPIO_MODER_MODER1; // Analog mode
 8001550:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <adc_init+0xa4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a20      	ldr	r2, [pc, #128]	; (80015d8 <adc_init+0xa4>)
 8001556:	f043 030c 	orr.w	r3, r3, #12
 800155a:	6013      	str	r3, [r2, #0]
    GPIO_PORT_ADC->OTYPER |= GPIO_OTYPER_OT1; // Open Drain PB1
 800155c:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <adc_init+0xa4>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	4a1d      	ldr	r2, [pc, #116]	; (80015d8 <adc_init+0xa4>)
 8001562:	f043 0302 	orr.w	r3, r3, #2
 8001566:	6053      	str	r3, [r2, #4]

    // Configure ADC settings
    ADC1->CR1 &= ~ADC_CR1_RES; // Clear the RES bits for 12-bit resolution
 8001568:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <adc_init+0xa8>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	4a1b      	ldr	r2, [pc, #108]	; (80015dc <adc_init+0xa8>)
 800156e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001572:	6053      	str	r3, [r2, #4]
    ADC1->CR2 &= ~ADC_CR2_ALIGN; // Data right-aligned
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <adc_init+0xa8>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	4a18      	ldr	r2, [pc, #96]	; (80015dc <adc_init+0xa8>)
 800157a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800157e:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= ADC_CR2_CONT; // Continuous conversion mode
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <adc_init+0xa8>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	4a15      	ldr	r2, [pc, #84]	; (80015dc <adc_init+0xa8>)
 8001586:	f043 0302 	orr.w	r3, r3, #2
 800158a:	6093      	str	r3, [r2, #8]
    ADC1->SQR3 &= ~ADC_SQR3_SQ1; // Clear the SQ1 bits
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <adc_init+0xa8>)
 800158e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001590:	4a12      	ldr	r2, [pc, #72]	; (80015dc <adc_init+0xa8>)
 8001592:	f023 031f 	bic.w	r3, r3, #31
 8001596:	6353      	str	r3, [r2, #52]	; 0x34
    ADC1->SQR3 |= 9 << ADC_SQR3_SQ1_Pos; // Set the channel number in SQ1 bits (Channel 9 for PB1)
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <adc_init+0xa8>)
 800159a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800159c:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <adc_init+0xa8>)
 800159e:	f043 0309 	orr.w	r3, r3, #9
 80015a2:	6353      	str	r3, [r2, #52]	; 0x34
    ADC1->SQR3 |= 8 << ADC_SQR3_SQ1_Pos; // Set the channel number in SQ1 bits (Channel 8 for PB0)
 80015a4:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <adc_init+0xa8>)
 80015a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a8:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <adc_init+0xa8>)
 80015aa:	f043 0308 	orr.w	r3, r3, #8
 80015ae:	6353      	str	r3, [r2, #52]	; 0x34
    // Enable the ADC
    ADC1->CR2 |= ADC_CR2_ADON;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <adc_init+0xa8>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	4a09      	ldr	r2, [pc, #36]	; (80015dc <adc_init+0xa8>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6093      	str	r3, [r2, #8]

    // Wait for ADC to be ready
    DelayMSW(100);
 80015bc:	2064      	movs	r0, #100	; 0x64
 80015be:	f000 f85f 	bl	8001680 <DelayMSW>

    // Start the conversion
    ADC1->CR2 |= ADC_CR2_SWSTART;
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <adc_init+0xa8>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <adc_init+0xa8>)
 80015c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80015cc:	6093      	str	r3, [r2, #8]
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020400 	.word	0x40020400
 80015dc:	40012000 	.word	0x40012000

080015e0 <read_adc>:

uint16_t read_adc(uint8_t channel) {
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
    ADC1->SQR3 = (channel & 0x1F);  // Assuming channel is less than 16
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <read_adc+0x44>)
 80015ee:	f003 031f 	and.w	r3, r3, #31
 80015f2:	6353      	str	r3, [r2, #52]	; 0x34

    // Start the conversion
    ADC1->CR2 |= ADC_CR2_SWSTART;
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <read_adc+0x44>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <read_adc+0x44>)
 80015fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80015fe:	6093      	str	r3, [r2, #8]

    // Wait for the end of conversion
    while (!((ADC1->SR & ADC_SR_EOC) == ADC_SR_EOC)) {}
 8001600:	bf00      	nop
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <read_adc+0x44>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b02      	cmp	r3, #2
 800160c:	d1f9      	bne.n	8001602 <read_adc+0x22>

    // Read the converted value
    uint16_t result = ADC1->DR;
 800160e:	4b05      	ldr	r3, [pc, #20]	; (8001624 <read_adc+0x44>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	81fb      	strh	r3, [r7, #14]

    return result;
 8001614:	89fb      	ldrh	r3, [r7, #14]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40012000 	.word	0x40012000

08001628 <SysTick_Init>:

void SysTick_Init(uint32_t ticks){
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

	SysTick->CTRL = 0; // Disable SysTick
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <SysTick_Init+0x54>)
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]

	SysTick->LOAD = ticks-1; // Set Reload Register
 8001636:	4a11      	ldr	r2, [pc, #68]	; (800167c <SysTick_Init+0x54>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3b01      	subs	r3, #1
 800163c:	6053      	str	r3, [r2, #4]

	// Setting Interrupt Priority to the highest
	NVIC_SetPriority(SysTick_IRQn, (1<<__NVIC_PRIO_BITS)-1);
 800163e:	210f      	movs	r1, #15
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f7ff fc86 	bl	8000f54 <__NVIC_SetPriority>

	SysTick->VAL = 0; // Reset the SysTick counter value
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <SysTick_Init+0x54>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]

	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; // Selecting internal clock source
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <SysTick_Init+0x54>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a0a      	ldr	r2, [pc, #40]	; (800167c <SysTick_Init+0x54>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk; // Enabling SysTick exception Request when 0
 800165a:	4b08      	ldr	r3, [pc, #32]	; (800167c <SysTick_Init+0x54>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a07      	ldr	r2, [pc, #28]	; (800167c <SysTick_Init+0x54>)
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	6013      	str	r3, [r2, #0]


	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk; // Enable SysTick
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <SysTick_Init+0x54>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a04      	ldr	r2, [pc, #16]	; (800167c <SysTick_Init+0x54>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6013      	str	r3, [r2, #0]
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	e000e010 	.word	0xe000e010

08001680 <DelayMSW>:

void DelayMSW(unsigned int time){
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	for(int i=0; i<=time; i++){
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	e009      	b.n	80016a2 <DelayMSW+0x22>
		while ((SysTick->CTRL & 0x00010000) == 0){
 800168e:	bf00      	nop
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <DelayMSW+0x38>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f9      	beq.n	8001690 <DelayMSW+0x10>
	for(int i=0; i<=time; i++){
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3301      	adds	r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d2f1      	bcs.n	800168e <DelayMSW+0xe>
				//Wait for 1 millisec.
		}
	}
}
 80016aa:	bf00      	nop
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000e010 	.word	0xe000e010

080016bc <SysTick_Handler>:

void SysTick_Handler(void) {
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

	if (counter == 0xffffffff) {
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <SysTick_Handler+0x2c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c8:	d103      	bne.n	80016d2 <SysTick_Handler+0x16>
        counter = 0; // Reset the counter if the maximum value is reached
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <SysTick_Handler+0x2c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
    } else {
        counter++; // Increment the counter
    }
}
 80016d0:	e004      	b.n	80016dc <SysTick_Handler+0x20>
        counter++; // Increment the counter
 80016d2:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <SysTick_Handler+0x2c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	4a03      	ldr	r2, [pc, #12]	; (80016e8 <SysTick_Handler+0x2c>)
 80016da:	6013      	str	r3, [r2, #0]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000260 	.word	0x20000260
 80016ec:	00000000 	.word	0x00000000

080016f0 <adcValtoVolts>:
void printTimestamp(void) { // Debug
	sprintf(msg, "%d,", counter);
	HAL_UART_Transmit(&huart2, (uint8_t*)(msg), strlen(msg), 200);
}

float adcValtoVolts (uint16_t adcVal){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	80fb      	strh	r3, [r7, #6]
	float Vin = (adcVal/4096.0)*2.9;
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ff19 	bl	8000534 <__aeabi_i2d>
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <adcValtoVolts+0x58>)
 8001708:	f7ff f8a8 	bl	800085c <__aeabi_ddiv>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	a30a      	add	r3, pc, #40	; (adr r3, 8001740 <adcValtoVolts+0x50>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7fe ff75 	bl	8000608 <__aeabi_dmul>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	f7ff fa47 	bl	8000bb8 <__aeabi_d2f>
 800172a:	4603      	mov	r3, r0
 800172c:	60fb      	str	r3, [r7, #12]
//	Vin = Vin*(48.0/2.70); //Correction for Voltage divider for 48V
//	Vin += (0.6/30.0)*Vin; //Correction using observation
	return Vin;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	ee07 3a90 	vmov	s15, r3
}
 8001734:	eeb0 0a67 	vmov.f32	s0, s15
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	33333333 	.word	0x33333333
 8001744:	40073333 	.word	0x40073333
 8001748:	40b00000 	.word	0x40b00000

0800174c <TemperaturePrint>:

void TemperaturePrint (void){ //Debug
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
	float temp_in = readTemperature();
 8001752:	f000 f81f 	bl	8001794 <readTemperature>
 8001756:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(msg3, "%.1f,", temp_in);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7fe fefc 	bl	8000558 <__aeabi_f2d>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4908      	ldr	r1, [pc, #32]	; (8001788 <TemperaturePrint+0x3c>)
 8001766:	4809      	ldr	r0, [pc, #36]	; (800178c <TemperaturePrint+0x40>)
 8001768:	f002 faae 	bl	8003cc8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)(msg3), strlen(msg3), 200);
 800176c:	4807      	ldr	r0, [pc, #28]	; (800178c <TemperaturePrint+0x40>)
 800176e:	f7fe fd87 	bl	8000280 <strlen>
 8001772:	4603      	mov	r3, r0
 8001774:	b29a      	uxth	r2, r3
 8001776:	23c8      	movs	r3, #200	; 0xc8
 8001778:	4904      	ldr	r1, [pc, #16]	; (800178c <TemperaturePrint+0x40>)
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <TemperaturePrint+0x44>)
 800177c:	f001 fa07 	bl	8002b8e <HAL_UART_Transmit>
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	08006750 	.word	0x08006750
 800178c:	20000264 	.word	0x20000264
 8001790:	20000208 	.word	0x20000208

08001794 <readTemperature>:

float readTemperature(void) {
 8001794:	b5b0      	push	{r4, r5, r7, lr}
 8001796:	ed2d 8b02 	vpush	{d8}
 800179a:	b08c      	sub	sp, #48	; 0x30
 800179c:	af00      	add	r7, sp, #0

	uint16_t adcVal = read_adc(ADC_CHANNEL);
 800179e:	2009      	movs	r0, #9
 80017a0:	f7ff ff1e 	bl	80015e0 <read_adc>
 80017a4:	4603      	mov	r3, r0
 80017a6:	84fb      	strh	r3, [r7, #38]	; 0x26
	float voltage = adcValtoVolts(adcVal);
 80017a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ffa0 	bl	80016f0 <adcValtoVolts>
 80017b0:	ed87 0a08 	vstr	s0, [r7, #32]

    // Coefficients of the polynomial equation
    const float coefficients[] = { 13000.8914445 ,  -99474.67447538,  285225.49823225, -363335.0395916 ,  173570.90571022}; // Range is 25 deg C to 60 deg C
 80017b4:	4b24      	ldr	r3, [pc, #144]	; (8001848 <readTemperature+0xb4>)
 80017b6:	1d3c      	adds	r4, r7, #4
 80017b8:	461d      	mov	r5, r3
 80017ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017be:	682b      	ldr	r3, [r5, #0]
 80017c0:	6023      	str	r3, [r4, #0]

    float result = 0.0;
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i = 0; i <= 4; ++i) {
 80017c8:	2300      	movs	r3, #0
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80017cc:	e020      	b.n	8001810 <readTemperature+0x7c>
        result += coefficients[i] * powf(voltage, 4 - i);
 80017ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	3330      	adds	r3, #48	; 0x30
 80017d4:	443b      	add	r3, r7
 80017d6:	3b2c      	subs	r3, #44	; 0x2c
 80017d8:	ed93 8a00 	vldr	s16, [r3]
 80017dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017de:	f1c3 0304 	rsb	r3, r3, #4
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ea:	eef0 0a67 	vmov.f32	s1, s15
 80017ee:	ed97 0a08 	vldr	s0, [r7, #32]
 80017f2:	f004 fbc5 	bl	8005f80 <powf>
 80017f6:	eef0 7a40 	vmov.f32	s15, s0
 80017fa:	ee68 7a27 	vmul.f32	s15, s16, s15
 80017fe:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001806:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int i = 0; i <= 4; ++i) {
 800180a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800180c:	3301      	adds	r3, #1
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001812:	2b04      	cmp	r3, #4
 8001814:	dddb      	ble.n	80017ce <readTemperature+0x3a>
    }

    // Apply the moving average filter
    float movingAverage = MovingAverage(result);
 8001816:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800181a:	f000 f839 	bl	8001890 <MovingAverage>
 800181e:	ed87 0a07 	vstr	s0, [r7, #28]

    // Remove outliers
    float filteredTemperature = RemoveOutliers(result, movingAverage);
 8001822:	edd7 0a07 	vldr	s1, [r7, #28]
 8001826:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800182a:	f000 f80f 	bl	800184c <RemoveOutliers>
 800182e:	ed87 0a06 	vstr	s0, [r7, #24]

    return filteredTemperature;
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	ee07 3a90 	vmov	s15, r3
}
 8001838:	eeb0 0a67 	vmov.f32	s0, s15
 800183c:	3730      	adds	r7, #48	; 0x30
 800183e:	46bd      	mov	sp, r7
 8001840:	ecbd 8b02 	vpop	{d8}
 8001844:	bdb0      	pop	{r4, r5, r7, pc}
 8001846:	bf00      	nop
 8001848:	08006758 	.word	0x08006758

0800184c <RemoveOutliers>:

float RemoveOutliers(float newValue, float movingAverage) {
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	ed87 0a01 	vstr	s0, [r7, #4]
 8001856:	edc7 0a00 	vstr	s1, [r7]

    if (fabs(newValue - movingAverage) > NOISE_THRESHOLD) {
 800185a:	ed97 7a01 	vldr	s14, [r7, #4]
 800185e:	edd7 7a00 	vldr	s15, [r7]
 8001862:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001866:	eef0 7ae7 	vabs.f32	s15, s15
 800186a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800186e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001876:	dd01      	ble.n	800187c <RemoveOutliers+0x30>
        return movingAverage;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	e000      	b.n	800187e <RemoveOutliers+0x32>
    } else {
        return newValue;
 800187c:	687b      	ldr	r3, [r7, #4]
    }
}
 800187e:	ee07 3a90 	vmov	s15, r3
 8001882:	eeb0 0a67 	vmov.f32	s0, s15
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <MovingAverage>:

float MovingAverage(float newValue) {
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	ed87 0a01 	vstr	s0, [r7, #4]

    temperatureBuffer[bufferIndex] = newValue;
 800189a:	4b20      	ldr	r3, [pc, #128]	; (800191c <MovingAverage+0x8c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a20      	ldr	r2, [pc, #128]	; (8001920 <MovingAverage+0x90>)
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	601a      	str	r2, [r3, #0]

    bufferIndex = (bufferIndex + 1) % MOVING_AVERAGE_SIZE;
 80018a8:	4b1c      	ldr	r3, [pc, #112]	; (800191c <MovingAverage+0x8c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	1c59      	adds	r1, r3, #1
 80018ae:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <MovingAverage+0x94>)
 80018b0:	fb83 2301 	smull	r2, r3, r3, r1
 80018b4:	109a      	asrs	r2, r3, #2
 80018b6:	17cb      	asrs	r3, r1, #31
 80018b8:	1ad2      	subs	r2, r2, r3
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	1aca      	subs	r2, r1, r3
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <MovingAverage+0x8c>)
 80018c6:	601a      	str	r2, [r3, #0]

    float sum = 0.0;
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < MOVING_AVERAGE_SIZE; i++) {
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	e00e      	b.n	80018f2 <MovingAverage+0x62>
        sum += temperatureBuffer[i];
 80018d4:	4a12      	ldr	r2, [pc, #72]	; (8001920 <MovingAverage+0x90>)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4413      	add	r3, r2
 80018dc:	edd3 7a00 	vldr	s15, [r3]
 80018e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80018e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e8:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < MOVING_AVERAGE_SIZE; i++) {
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	3301      	adds	r3, #1
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	2b09      	cmp	r3, #9
 80018f6:	dded      	ble.n	80018d4 <MovingAverage+0x44>
    }
    float movingAverage = sum / MOVING_AVERAGE_SIZE;
 80018f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80018fc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001904:	edc7 7a03 	vstr	s15, [r7, #12]

    return movingAverage;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	ee07 3a90 	vmov	s15, r3
}
 800190e:	eeb0 0a67 	vmov.f32	s0, s15
 8001912:	371c      	adds	r7, #28
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	200002f4 	.word	0x200002f4
 8001920:	200002cc 	.word	0x200002cc
 8001924:	66666667 	.word	0x66666667

08001928 <Percentage>:

float Percentage(float currentValue, float maxValue) {
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001932:	edc7 0a00 	vstr	s1, [r7]
    if (maxValue == 0.0) {
 8001936:	edd7 7a00 	vldr	s15, [r7]
 800193a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800193e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001942:	d102      	bne.n	800194a <Percentage+0x22>
        // Avoid division by zero
        return 0.0;
 8001944:	f04f 0300 	mov.w	r3, #0
 8001948:	e00c      	b.n	8001964 <Percentage+0x3c>
    }
    float percentage = (currentValue / maxValue) * 100.0;
 800194a:	edd7 6a01 	vldr	s13, [r7, #4]
 800194e:	ed97 7a00 	vldr	s14, [r7]
 8001952:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001956:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001978 <Percentage+0x50>
 800195a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800195e:	edc7 7a03 	vstr	s15, [r7, #12]

    return percentage;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eeb0 0a67 	vmov.f32	s0, s15
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	42c80000 	.word	0x42c80000

0800197c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001980:	b672      	cpsid	i
}
 8001982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001984:	e7fe      	b.n	8001984 <Error_Handler+0x8>
	...

08001988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <HAL_MspInit+0x4c>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <HAL_MspInit+0x4c>)
 8001998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199c:	6453      	str	r3, [r2, #68]	; 0x44
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <HAL_MspInit+0x4c>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	603b      	str	r3, [r7, #0]
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_MspInit+0x4c>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <HAL_MspInit+0x4c>)
 80019b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_MspInit+0x4c>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800

080019d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <HAL_UART_MspInit+0x84>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d12b      	bne.n	8001a52 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <HAL_UART_MspInit+0x88>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	4a17      	ldr	r2, [pc, #92]	; (8001a60 <HAL_UART_MspInit+0x88>)
 8001a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <HAL_UART_MspInit+0x88>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_UART_MspInit+0x88>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <HAL_UART_MspInit+0x88>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_UART_MspInit+0x88>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a32:	230c      	movs	r3, #12
 8001a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a42:	2307      	movs	r3, #7
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <HAL_UART_MspInit+0x8c>)
 8001a4e:	f000 fa75 	bl	8001f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a52:	bf00      	nop
 8001a54:	3728      	adds	r7, #40	; 0x28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40004400 	.word	0x40004400
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020000 	.word	0x40020000

08001a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <NMI_Handler+0x4>

08001a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <HardFault_Handler+0x4>

08001a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <MemManage_Handler+0x4>

08001a7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7e:	e7fe      	b.n	8001a7e <BusFault_Handler+0x4>

08001a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <UsageFault_Handler+0x4>

08001a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return 1;
 8001ab4:	2301      	movs	r3, #1
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_kill>:

int _kill(int pid, int sig)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aca:	f002 f9b3 	bl	8003e34 <__errno>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2216      	movs	r2, #22
 8001ad2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ad4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <_exit>:

void _exit (int status)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ffe7 	bl	8001ac0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001af2:	e7fe      	b.n	8001af2 <_exit+0x12>

08001af4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	e00a      	b.n	8001b1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b06:	f3af 8000 	nop.w
 8001b0a:	4601      	mov	r1, r0
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	60ba      	str	r2, [r7, #8]
 8001b12:	b2ca      	uxtb	r2, r1
 8001b14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	617b      	str	r3, [r7, #20]
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	dbf0      	blt.n	8001b06 <_read+0x12>
  }

  return len;
 8001b24:	687b      	ldr	r3, [r7, #4]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b086      	sub	sp, #24
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	e009      	b.n	8001b54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	60ba      	str	r2, [r7, #8]
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	3301      	adds	r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	dbf1      	blt.n	8001b40 <_write+0x12>
  }
  return len;
 8001b5c:	687b      	ldr	r3, [r7, #4]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <_close>:

int _close(int file)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b8e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <_isatty>:

int _isatty(int file)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd8:	4a14      	ldr	r2, [pc, #80]	; (8001c2c <_sbrk+0x5c>)
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <_sbrk+0x60>)
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <_sbrk+0x64>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d102      	bne.n	8001bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <_sbrk+0x64>)
 8001bee:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <_sbrk+0x68>)
 8001bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <_sbrk+0x64>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d207      	bcs.n	8001c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c00:	f002 f918 	bl	8003e34 <__errno>
 8001c04:	4603      	mov	r3, r0
 8001c06:	220c      	movs	r2, #12
 8001c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0e:	e009      	b.n	8001c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <_sbrk+0x64>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c16:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <_sbrk+0x64>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	4a05      	ldr	r2, [pc, #20]	; (8001c34 <_sbrk+0x64>)
 8001c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c22:	68fb      	ldr	r3, [r7, #12]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20020000 	.word	0x20020000
 8001c30:	00000400 	.word	0x00000400
 8001c34:	200002f8 	.word	0x200002f8
 8001c38:	20000450 	.word	0x20000450

08001c3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <SystemInit+0x20>)
 8001c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c46:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <SystemInit+0x20>)
 8001c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c64:	480d      	ldr	r0, [pc, #52]	; (8001c9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c66:	490e      	ldr	r1, [pc, #56]	; (8001ca0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c68:	4a0e      	ldr	r2, [pc, #56]	; (8001ca4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c6c:	e002      	b.n	8001c74 <LoopCopyDataInit>

08001c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c72:	3304      	adds	r3, #4

08001c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c78:	d3f9      	bcc.n	8001c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c7c:	4c0b      	ldr	r4, [pc, #44]	; (8001cac <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c80:	e001      	b.n	8001c86 <LoopFillZerobss>

08001c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c84:	3204      	adds	r2, #4

08001c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c88:	d3fb      	bcc.n	8001c82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c8a:	f7ff ffd7 	bl	8001c3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c8e:	f002 f8d7 	bl	8003e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c92:	f7ff f989 	bl	8000fa8 <main>
  bx  lr    
 8001c96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001ca4:	08006b1c 	.word	0x08006b1c
  ldr r2, =_sbss
 8001ca8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001cac:	2000044c 	.word	0x2000044c

08001cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb0:	e7fe      	b.n	8001cb0 <ADC_IRQHandler>
	...

08001cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cb8:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <HAL_Init+0x40>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	; (8001cf4 <HAL_Init+0x40>)
 8001cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_Init+0x40>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <HAL_Init+0x40>)
 8001cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <HAL_Init+0x40>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <HAL_Init+0x40>)
 8001cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cdc:	2003      	movs	r0, #3
 8001cde:	f000 f8f9 	bl	8001ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ce2:	200f      	movs	r0, #15
 8001ce4:	f000 f808 	bl	8001cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce8:	f7ff fe4e 	bl	8001988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40023c00 	.word	0x40023c00

08001cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_InitTick+0x54>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_InitTick+0x58>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f903 	bl	8001f22 <HAL_SYSTICK_Config>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00e      	b.n	8001d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b0f      	cmp	r3, #15
 8001d2a:	d80a      	bhi.n	8001d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
 8001d34:	f000 f8d9 	bl	8001eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d38:	4a06      	ldr	r2, [pc, #24]	; (8001d54 <HAL_InitTick+0x5c>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	e000      	b.n	8001d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000018 	.word	0x20000018
 8001d50:	20000020 	.word	0x20000020
 8001d54:	2000001c 	.word	0x2000001c

08001d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d5c:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <HAL_GetTick+0x14>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	200002fc 	.word	0x200002fc

08001d70 <__NVIC_SetPriorityGrouping>:
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001da2:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <__NVIC_SetPriorityGrouping+0x44>)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	60d3      	str	r3, [r2, #12]
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <__NVIC_GetPriorityGrouping>:
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	0a1b      	lsrs	r3, r3, #8
 8001dc2:	f003 0307 	and.w	r3, r3, #7
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_SetPriority>:
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	6039      	str	r1, [r7, #0]
 8001dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	db0a      	blt.n	8001dfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	490c      	ldr	r1, [pc, #48]	; (8001e20 <__NVIC_SetPriority+0x4c>)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	0112      	lsls	r2, r2, #4
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	440b      	add	r3, r1
 8001df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001dfc:	e00a      	b.n	8001e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4908      	ldr	r1, [pc, #32]	; (8001e24 <__NVIC_SetPriority+0x50>)
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	3b04      	subs	r3, #4
 8001e0c:	0112      	lsls	r2, r2, #4
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	440b      	add	r3, r1
 8001e12:	761a      	strb	r2, [r3, #24]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000e100 	.word	0xe000e100
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b089      	sub	sp, #36	; 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f1c3 0307 	rsb	r3, r3, #7
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	bf28      	it	cs
 8001e46:	2304      	movcs	r3, #4
 8001e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	2b06      	cmp	r3, #6
 8001e50:	d902      	bls.n	8001e58 <NVIC_EncodePriority+0x30>
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3b03      	subs	r3, #3
 8001e56:	e000      	b.n	8001e5a <NVIC_EncodePriority+0x32>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43da      	mvns	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e70:	f04f 31ff 	mov.w	r1, #4294967295
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7a:	43d9      	mvns	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	4313      	orrs	r3, r2
         );
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3724      	adds	r7, #36	; 0x24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ea0:	d301      	bcc.n	8001ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e00f      	b.n	8001ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <SysTick_Config+0x40>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eae:	210f      	movs	r1, #15
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb4:	f7ff ff8e 	bl	8001dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <SysTick_Config+0x40>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ebe:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <SysTick_Config+0x40>)
 8001ec0:	2207      	movs	r2, #7
 8001ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	e000e010 	.word	0xe000e010

08001ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff ff47 	bl	8001d70 <__NVIC_SetPriorityGrouping>
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b086      	sub	sp, #24
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	60b9      	str	r1, [r7, #8]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001efc:	f7ff ff5c 	bl	8001db8 <__NVIC_GetPriorityGrouping>
 8001f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	6978      	ldr	r0, [r7, #20]
 8001f08:	f7ff ff8e 	bl	8001e28 <NVIC_EncodePriority>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ff5d 	bl	8001dd4 <__NVIC_SetPriority>
}
 8001f1a:	bf00      	nop
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff ffb0 	bl	8001e90 <SysTick_Config>
 8001f30:	4603      	mov	r3, r0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	; 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	e159      	b.n	800220c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f58:	2201      	movs	r2, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	f040 8148 	bne.w	8002206 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d005      	beq.n	8001f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d130      	bne.n	8001ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	2203      	movs	r2, #3
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	091b      	lsrs	r3, r3, #4
 8001fda:	f003 0201 	and.w	r2, r3, #1
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d017      	beq.n	800202c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2203      	movs	r2, #3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d123      	bne.n	8002080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	08da      	lsrs	r2, r3, #3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3208      	adds	r2, #8
 8002040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	220f      	movs	r2, #15
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	08da      	lsrs	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3208      	adds	r2, #8
 800207a:	69b9      	ldr	r1, [r7, #24]
 800207c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0203 	and.w	r2, r3, #3
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80a2 	beq.w	8002206 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	4b57      	ldr	r3, [pc, #348]	; (8002224 <HAL_GPIO_Init+0x2e8>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	4a56      	ldr	r2, [pc, #344]	; (8002224 <HAL_GPIO_Init+0x2e8>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	; 0x44
 80020d2:	4b54      	ldr	r3, [pc, #336]	; (8002224 <HAL_GPIO_Init+0x2e8>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020de:	4a52      	ldr	r2, [pc, #328]	; (8002228 <HAL_GPIO_Init+0x2ec>)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	3302      	adds	r3, #2
 80020e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	220f      	movs	r2, #15
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a49      	ldr	r2, [pc, #292]	; (800222c <HAL_GPIO_Init+0x2f0>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d019      	beq.n	800213e <HAL_GPIO_Init+0x202>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a48      	ldr	r2, [pc, #288]	; (8002230 <HAL_GPIO_Init+0x2f4>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d013      	beq.n	800213a <HAL_GPIO_Init+0x1fe>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a47      	ldr	r2, [pc, #284]	; (8002234 <HAL_GPIO_Init+0x2f8>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00d      	beq.n	8002136 <HAL_GPIO_Init+0x1fa>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a46      	ldr	r2, [pc, #280]	; (8002238 <HAL_GPIO_Init+0x2fc>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d007      	beq.n	8002132 <HAL_GPIO_Init+0x1f6>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a45      	ldr	r2, [pc, #276]	; (800223c <HAL_GPIO_Init+0x300>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d101      	bne.n	800212e <HAL_GPIO_Init+0x1f2>
 800212a:	2304      	movs	r3, #4
 800212c:	e008      	b.n	8002140 <HAL_GPIO_Init+0x204>
 800212e:	2307      	movs	r3, #7
 8002130:	e006      	b.n	8002140 <HAL_GPIO_Init+0x204>
 8002132:	2303      	movs	r3, #3
 8002134:	e004      	b.n	8002140 <HAL_GPIO_Init+0x204>
 8002136:	2302      	movs	r3, #2
 8002138:	e002      	b.n	8002140 <HAL_GPIO_Init+0x204>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <HAL_GPIO_Init+0x204>
 800213e:	2300      	movs	r3, #0
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	f002 0203 	and.w	r2, r2, #3
 8002146:	0092      	lsls	r2, r2, #2
 8002148:	4093      	lsls	r3, r2
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002150:	4935      	ldr	r1, [pc, #212]	; (8002228 <HAL_GPIO_Init+0x2ec>)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	089b      	lsrs	r3, r3, #2
 8002156:	3302      	adds	r3, #2
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800215e:	4b38      	ldr	r3, [pc, #224]	; (8002240 <HAL_GPIO_Init+0x304>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002182:	4a2f      	ldr	r2, [pc, #188]	; (8002240 <HAL_GPIO_Init+0x304>)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002188:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <HAL_GPIO_Init+0x304>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021ac:	4a24      	ldr	r2, [pc, #144]	; (8002240 <HAL_GPIO_Init+0x304>)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021b2:	4b23      	ldr	r3, [pc, #140]	; (8002240 <HAL_GPIO_Init+0x304>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021d6:	4a1a      	ldr	r2, [pc, #104]	; (8002240 <HAL_GPIO_Init+0x304>)
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021dc:	4b18      	ldr	r3, [pc, #96]	; (8002240 <HAL_GPIO_Init+0x304>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002200:	4a0f      	ldr	r2, [pc, #60]	; (8002240 <HAL_GPIO_Init+0x304>)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3301      	adds	r3, #1
 800220a:	61fb      	str	r3, [r7, #28]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	2b0f      	cmp	r3, #15
 8002210:	f67f aea2 	bls.w	8001f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	3724      	adds	r7, #36	; 0x24
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	40013800 	.word	0x40013800
 800222c:	40020000 	.word	0x40020000
 8002230:	40020400 	.word	0x40020400
 8002234:	40020800 	.word	0x40020800
 8002238:	40020c00 	.word	0x40020c00
 800223c:	40021000 	.word	0x40021000
 8002240:	40013c00 	.word	0x40013c00

08002244 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e267      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d075      	beq.n	800234e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002262:	4b88      	ldr	r3, [pc, #544]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b04      	cmp	r3, #4
 800226c:	d00c      	beq.n	8002288 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800226e:	4b85      	ldr	r3, [pc, #532]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002276:	2b08      	cmp	r3, #8
 8002278:	d112      	bne.n	80022a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800227a:	4b82      	ldr	r3, [pc, #520]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002286:	d10b      	bne.n	80022a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002288:	4b7e      	ldr	r3, [pc, #504]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d05b      	beq.n	800234c <HAL_RCC_OscConfig+0x108>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d157      	bne.n	800234c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e242      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022a8:	d106      	bne.n	80022b8 <HAL_RCC_OscConfig+0x74>
 80022aa:	4b76      	ldr	r3, [pc, #472]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a75      	ldr	r2, [pc, #468]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e01d      	b.n	80022f4 <HAL_RCC_OscConfig+0xb0>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c0:	d10c      	bne.n	80022dc <HAL_RCC_OscConfig+0x98>
 80022c2:	4b70      	ldr	r3, [pc, #448]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a6f      	ldr	r2, [pc, #444]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	4b6d      	ldr	r3, [pc, #436]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a6c      	ldr	r2, [pc, #432]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e00b      	b.n	80022f4 <HAL_RCC_OscConfig+0xb0>
 80022dc:	4b69      	ldr	r3, [pc, #420]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a68      	ldr	r2, [pc, #416]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4b66      	ldr	r3, [pc, #408]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a65      	ldr	r2, [pc, #404]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80022ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d013      	beq.n	8002324 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7ff fd2c 	bl	8001d58 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002304:	f7ff fd28 	bl	8001d58 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e207      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002316:	4b5b      	ldr	r3, [pc, #364]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0xc0>
 8002322:	e014      	b.n	800234e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7ff fd18 	bl	8001d58 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800232c:	f7ff fd14 	bl	8001d58 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	; 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e1f3      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800233e:	4b51      	ldr	r3, [pc, #324]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0xe8>
 800234a:	e000      	b.n	800234e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d063      	beq.n	8002422 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800235a:	4b4a      	ldr	r3, [pc, #296]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00b      	beq.n	800237e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002366:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800236e:	2b08      	cmp	r3, #8
 8002370:	d11c      	bne.n	80023ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002372:	4b44      	ldr	r3, [pc, #272]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d116      	bne.n	80023ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237e:	4b41      	ldr	r3, [pc, #260]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <HAL_RCC_OscConfig+0x152>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d001      	beq.n	8002396 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e1c7      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002396:	4b3b      	ldr	r3, [pc, #236]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4937      	ldr	r1, [pc, #220]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023aa:	e03a      	b.n	8002422 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d020      	beq.n	80023f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b4:	4b34      	ldr	r3, [pc, #208]	; (8002488 <HAL_RCC_OscConfig+0x244>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ba:	f7ff fccd 	bl	8001d58 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c2:	f7ff fcc9 	bl	8001d58 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e1a8      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d4:	4b2b      	ldr	r3, [pc, #172]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e0:	4b28      	ldr	r3, [pc, #160]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4925      	ldr	r1, [pc, #148]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	600b      	str	r3, [r1, #0]
 80023f4:	e015      	b.n	8002422 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023f6:	4b24      	ldr	r3, [pc, #144]	; (8002488 <HAL_RCC_OscConfig+0x244>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7ff fcac 	bl	8001d58 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002404:	f7ff fca8 	bl	8001d58 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e187      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d036      	beq.n	800249c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d016      	beq.n	8002464 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002436:	4b15      	ldr	r3, [pc, #84]	; (800248c <HAL_RCC_OscConfig+0x248>)
 8002438:	2201      	movs	r2, #1
 800243a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243c:	f7ff fc8c 	bl	8001d58 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002444:	f7ff fc88 	bl	8001d58 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e167      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002456:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_RCC_OscConfig+0x240>)
 8002458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x200>
 8002462:	e01b      	b.n	800249c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002464:	4b09      	ldr	r3, [pc, #36]	; (800248c <HAL_RCC_OscConfig+0x248>)
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246a:	f7ff fc75 	bl	8001d58 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002470:	e00e      	b.n	8002490 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002472:	f7ff fc71 	bl	8001d58 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d907      	bls.n	8002490 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e150      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
 8002484:	40023800 	.word	0x40023800
 8002488:	42470000 	.word	0x42470000
 800248c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002490:	4b88      	ldr	r3, [pc, #544]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1ea      	bne.n	8002472 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 8097 	beq.w	80025d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024aa:	2300      	movs	r3, #0
 80024ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ae:	4b81      	ldr	r3, [pc, #516]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10f      	bne.n	80024da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	4b7d      	ldr	r3, [pc, #500]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	4a7c      	ldr	r2, [pc, #496]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80024c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ca:	4b7a      	ldr	r3, [pc, #488]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d6:	2301      	movs	r3, #1
 80024d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024da:	4b77      	ldr	r3, [pc, #476]	; (80026b8 <HAL_RCC_OscConfig+0x474>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d118      	bne.n	8002518 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024e6:	4b74      	ldr	r3, [pc, #464]	; (80026b8 <HAL_RCC_OscConfig+0x474>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a73      	ldr	r2, [pc, #460]	; (80026b8 <HAL_RCC_OscConfig+0x474>)
 80024ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f2:	f7ff fc31 	bl	8001d58 <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f8:	e008      	b.n	800250c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fa:	f7ff fc2d 	bl	8001d58 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e10c      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250c:	4b6a      	ldr	r3, [pc, #424]	; (80026b8 <HAL_RCC_OscConfig+0x474>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0f0      	beq.n	80024fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d106      	bne.n	800252e <HAL_RCC_OscConfig+0x2ea>
 8002520:	4b64      	ldr	r3, [pc, #400]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002524:	4a63      	ldr	r2, [pc, #396]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6713      	str	r3, [r2, #112]	; 0x70
 800252c:	e01c      	b.n	8002568 <HAL_RCC_OscConfig+0x324>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b05      	cmp	r3, #5
 8002534:	d10c      	bne.n	8002550 <HAL_RCC_OscConfig+0x30c>
 8002536:	4b5f      	ldr	r3, [pc, #380]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	4a5e      	ldr	r2, [pc, #376]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 800253c:	f043 0304 	orr.w	r3, r3, #4
 8002540:	6713      	str	r3, [r2, #112]	; 0x70
 8002542:	4b5c      	ldr	r3, [pc, #368]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002546:	4a5b      	ldr	r2, [pc, #364]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6713      	str	r3, [r2, #112]	; 0x70
 800254e:	e00b      	b.n	8002568 <HAL_RCC_OscConfig+0x324>
 8002550:	4b58      	ldr	r3, [pc, #352]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	4a57      	ldr	r2, [pc, #348]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002556:	f023 0301 	bic.w	r3, r3, #1
 800255a:	6713      	str	r3, [r2, #112]	; 0x70
 800255c:	4b55      	ldr	r3, [pc, #340]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002560:	4a54      	ldr	r2, [pc, #336]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002562:	f023 0304 	bic.w	r3, r3, #4
 8002566:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d015      	beq.n	800259c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7ff fbf2 	bl	8001d58 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002576:	e00a      	b.n	800258e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002578:	f7ff fbee 	bl	8001d58 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	f241 3288 	movw	r2, #5000	; 0x1388
 8002586:	4293      	cmp	r3, r2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e0cb      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258e:	4b49      	ldr	r3, [pc, #292]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0ee      	beq.n	8002578 <HAL_RCC_OscConfig+0x334>
 800259a:	e014      	b.n	80025c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259c:	f7ff fbdc 	bl	8001d58 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a2:	e00a      	b.n	80025ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025a4:	f7ff fbd8 	bl	8001d58 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e0b5      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ba:	4b3e      	ldr	r3, [pc, #248]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1ee      	bne.n	80025a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d105      	bne.n	80025d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025cc:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	4a38      	ldr	r2, [pc, #224]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80025d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80a1 	beq.w	8002724 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025e2:	4b34      	ldr	r3, [pc, #208]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d05c      	beq.n	80026a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d141      	bne.n	800267a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f6:	4b31      	ldr	r3, [pc, #196]	; (80026bc <HAL_RCC_OscConfig+0x478>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7ff fbac 	bl	8001d58 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002604:	f7ff fba8 	bl	8001d58 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e087      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002616:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69da      	ldr	r2, [r3, #28]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	019b      	lsls	r3, r3, #6
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	085b      	lsrs	r3, r3, #1
 800263a:	3b01      	subs	r3, #1
 800263c:	041b      	lsls	r3, r3, #16
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	061b      	lsls	r3, r3, #24
 8002646:	491b      	ldr	r1, [pc, #108]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800264c:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <HAL_RCC_OscConfig+0x478>)
 800264e:	2201      	movs	r2, #1
 8002650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002652:	f7ff fb81 	bl	8001d58 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265a:	f7ff fb7d 	bl	8001d58 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e05c      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x416>
 8002678:	e054      	b.n	8002724 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <HAL_RCC_OscConfig+0x478>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7ff fb6a 	bl	8001d58 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002688:	f7ff fb66 	bl	8001d58 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e045      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_RCC_OscConfig+0x470>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x444>
 80026a6:	e03d      	b.n	8002724 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d107      	bne.n	80026c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e038      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40007000 	.word	0x40007000
 80026bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026c0:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <HAL_RCC_OscConfig+0x4ec>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d028      	beq.n	8002720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d121      	bne.n	8002720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d11a      	bne.n	8002720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026f0:	4013      	ands	r3, r2
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d111      	bne.n	8002720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	085b      	lsrs	r3, r3, #1
 8002708:	3b01      	subs	r3, #1
 800270a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d107      	bne.n	8002720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800

08002734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0cc      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002748:	4b68      	ldr	r3, [pc, #416]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d90c      	bls.n	8002770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b65      	ldr	r3, [pc, #404]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b63      	ldr	r3, [pc, #396]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0b8      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d020      	beq.n	80027be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002788:	4b59      	ldr	r3, [pc, #356]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	4a58      	ldr	r2, [pc, #352]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002792:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027a0:	4b53      	ldr	r3, [pc, #332]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4a52      	ldr	r2, [pc, #328]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027ac:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	494d      	ldr	r1, [pc, #308]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d044      	beq.n	8002854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d119      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e07f      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d003      	beq.n	80027f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d107      	bne.n	8002802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f2:	4b3f      	ldr	r3, [pc, #252]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e06f      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002802:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e067      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002812:	4b37      	ldr	r3, [pc, #220]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f023 0203 	bic.w	r2, r3, #3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4934      	ldr	r1, [pc, #208]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	4313      	orrs	r3, r2
 8002822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002824:	f7ff fa98 	bl	8001d58 <HAL_GetTick>
 8002828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282a:	e00a      	b.n	8002842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282c:	f7ff fa94 	bl	8001d58 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	f241 3288 	movw	r2, #5000	; 0x1388
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e04f      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002842:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 020c 	and.w	r2, r3, #12
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	429a      	cmp	r2, r3
 8002852:	d1eb      	bne.n	800282c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002854:	4b25      	ldr	r3, [pc, #148]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d20c      	bcs.n	800287c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002862:	4b22      	ldr	r3, [pc, #136]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800286a:	4b20      	ldr	r3, [pc, #128]	; (80028ec <HAL_RCC_ClockConfig+0x1b8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e032      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d008      	beq.n	800289a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002888:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	4916      	ldr	r1, [pc, #88]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	4313      	orrs	r3, r2
 8002898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d009      	beq.n	80028ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	490e      	ldr	r1, [pc, #56]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028ba:	f000 f821 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 80028be:	4602      	mov	r2, r0
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	490a      	ldr	r1, [pc, #40]	; (80028f4 <HAL_RCC_ClockConfig+0x1c0>)
 80028cc:	5ccb      	ldrb	r3, [r1, r3]
 80028ce:	fa22 f303 	lsr.w	r3, r2, r3
 80028d2:	4a09      	ldr	r2, [pc, #36]	; (80028f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_RCC_ClockConfig+0x1c8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff fa0c 	bl	8001cf8 <HAL_InitTick>

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40023c00 	.word	0x40023c00
 80028f0:	40023800 	.word	0x40023800
 80028f4:	0800676c 	.word	0x0800676c
 80028f8:	20000018 	.word	0x20000018
 80028fc:	2000001c 	.word	0x2000001c

08002900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002904:	b090      	sub	sp, #64	; 0x40
 8002906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	637b      	str	r3, [r7, #52]	; 0x34
 800290c:	2300      	movs	r3, #0
 800290e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002910:	2300      	movs	r3, #0
 8002912:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002918:	4b59      	ldr	r3, [pc, #356]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x180>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	2b08      	cmp	r3, #8
 8002922:	d00d      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0x40>
 8002924:	2b08      	cmp	r3, #8
 8002926:	f200 80a1 	bhi.w	8002a6c <HAL_RCC_GetSysClockFreq+0x16c>
 800292a:	2b00      	cmp	r3, #0
 800292c:	d002      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x34>
 800292e:	2b04      	cmp	r3, #4
 8002930:	d003      	beq.n	800293a <HAL_RCC_GetSysClockFreq+0x3a>
 8002932:	e09b      	b.n	8002a6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002934:	4b53      	ldr	r3, [pc, #332]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x184>)
 8002936:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002938:	e09b      	b.n	8002a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800293a:	4b53      	ldr	r3, [pc, #332]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800293c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800293e:	e098      	b.n	8002a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002940:	4b4f      	ldr	r3, [pc, #316]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002948:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800294a:	4b4d      	ldr	r3, [pc, #308]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x180>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d028      	beq.n	80029a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002956:	4b4a      	ldr	r3, [pc, #296]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	099b      	lsrs	r3, r3, #6
 800295c:	2200      	movs	r2, #0
 800295e:	623b      	str	r3, [r7, #32]
 8002960:	627a      	str	r2, [r7, #36]	; 0x24
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002968:	2100      	movs	r1, #0
 800296a:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800296c:	fb03 f201 	mul.w	r2, r3, r1
 8002970:	2300      	movs	r3, #0
 8002972:	fb00 f303 	mul.w	r3, r0, r3
 8002976:	4413      	add	r3, r2
 8002978:	4a43      	ldr	r2, [pc, #268]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x188>)
 800297a:	fba0 1202 	umull	r1, r2, r0, r2
 800297e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002980:	460a      	mov	r2, r1
 8002982:	62ba      	str	r2, [r7, #40]	; 0x28
 8002984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002986:	4413      	add	r3, r2
 8002988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800298a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800298c:	2200      	movs	r2, #0
 800298e:	61bb      	str	r3, [r7, #24]
 8002990:	61fa      	str	r2, [r7, #28]
 8002992:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002996:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800299a:	f7fe f95d 	bl	8000c58 <__aeabi_uldivmod>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	4613      	mov	r3, r2
 80029a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029a6:	e053      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029a8:	4b35      	ldr	r3, [pc, #212]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x180>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	099b      	lsrs	r3, r3, #6
 80029ae:	2200      	movs	r2, #0
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	617a      	str	r2, [r7, #20]
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029ba:	f04f 0b00 	mov.w	fp, #0
 80029be:	4652      	mov	r2, sl
 80029c0:	465b      	mov	r3, fp
 80029c2:	f04f 0000 	mov.w	r0, #0
 80029c6:	f04f 0100 	mov.w	r1, #0
 80029ca:	0159      	lsls	r1, r3, #5
 80029cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029d0:	0150      	lsls	r0, r2, #5
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	ebb2 080a 	subs.w	r8, r2, sl
 80029da:	eb63 090b 	sbc.w	r9, r3, fp
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029f2:	ebb2 0408 	subs.w	r4, r2, r8
 80029f6:	eb63 0509 	sbc.w	r5, r3, r9
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	00eb      	lsls	r3, r5, #3
 8002a04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a08:	00e2      	lsls	r2, r4, #3
 8002a0a:	4614      	mov	r4, r2
 8002a0c:	461d      	mov	r5, r3
 8002a0e:	eb14 030a 	adds.w	r3, r4, sl
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	eb45 030b 	adc.w	r3, r5, fp
 8002a18:	607b      	str	r3, [r7, #4]
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	f04f 0300 	mov.w	r3, #0
 8002a22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a26:	4629      	mov	r1, r5
 8002a28:	028b      	lsls	r3, r1, #10
 8002a2a:	4621      	mov	r1, r4
 8002a2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a30:	4621      	mov	r1, r4
 8002a32:	028a      	lsls	r2, r1, #10
 8002a34:	4610      	mov	r0, r2
 8002a36:	4619      	mov	r1, r3
 8002a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	60fa      	str	r2, [r7, #12]
 8002a40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a44:	f7fe f908 	bl	8000c58 <__aeabi_uldivmod>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	0c1b      	lsrs	r3, r3, #16
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002a60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a6a:	e002      	b.n	8002a72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a6c:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a6e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3740      	adds	r7, #64	; 0x40
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800
 8002a84:	00f42400 	.word	0x00f42400
 8002a88:	017d7840 	.word	0x017d7840

08002a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a90:	4b03      	ldr	r3, [pc, #12]	; (8002aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a92:	681b      	ldr	r3, [r3, #0]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20000018 	.word	0x20000018

08002aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002aa8:	f7ff fff0 	bl	8002a8c <HAL_RCC_GetHCLKFreq>
 8002aac:	4602      	mov	r2, r0
 8002aae:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	0a9b      	lsrs	r3, r3, #10
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	4903      	ldr	r1, [pc, #12]	; (8002ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aba:	5ccb      	ldrb	r3, [r1, r3]
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	0800677c 	.word	0x0800677c

08002acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ad0:	f7ff ffdc 	bl	8002a8c <HAL_RCC_GetHCLKFreq>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	0b5b      	lsrs	r3, r3, #13
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	4903      	ldr	r1, [pc, #12]	; (8002af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ae2:	5ccb      	ldrb	r3, [r1, r3]
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40023800 	.word	0x40023800
 8002af0:	0800677c 	.word	0x0800677c

08002af4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e03f      	b.n	8002b86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7fe ff5c 	bl	80019d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2224      	movs	r2, #36	; 0x24
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f929 	bl	8002d90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b08a      	sub	sp, #40	; 0x28
 8002b92:	af02      	add	r7, sp, #8
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	603b      	str	r3, [r7, #0]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	d17c      	bne.n	8002ca8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <HAL_UART_Transmit+0x2c>
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e075      	b.n	8002caa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_UART_Transmit+0x3e>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e06e      	b.n	8002caa <HAL_UART_Transmit+0x11c>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2221      	movs	r2, #33	; 0x21
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002be2:	f7ff f8b9 	bl	8001d58 <HAL_GetTick>
 8002be6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	88fa      	ldrh	r2, [r7, #6]
 8002bec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	88fa      	ldrh	r2, [r7, #6]
 8002bf2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfc:	d108      	bne.n	8002c10 <HAL_UART_Transmit+0x82>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d104      	bne.n	8002c10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	61bb      	str	r3, [r7, #24]
 8002c0e:	e003      	b.n	8002c18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c20:	e02a      	b.n	8002c78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	2180      	movs	r1, #128	; 0x80
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 f840 	bl	8002cb2 <UART_WaitOnFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e036      	b.n	8002caa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10b      	bne.n	8002c5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	3302      	adds	r3, #2
 8002c56:	61bb      	str	r3, [r7, #24]
 8002c58:	e007      	b.n	8002c6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	781a      	ldrb	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	3301      	adds	r3, #1
 8002c68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1cf      	bne.n	8002c22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2140      	movs	r1, #64	; 0x40
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f810 	bl	8002cb2 <UART_WaitOnFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e006      	b.n	8002caa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	e000      	b.n	8002caa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ca8:	2302      	movs	r3, #2
  }
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3720      	adds	r7, #32
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b090      	sub	sp, #64	; 0x40
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	603b      	str	r3, [r7, #0]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cc2:	e050      	b.n	8002d66 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cca:	d04c      	beq.n	8002d66 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ccc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cd2:	f7ff f841 	bl	8001d58 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d241      	bcs.n	8002d66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	330c      	adds	r3, #12
 8002ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cec:	e853 3f00 	ldrex	r3, [r3]
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	330c      	adds	r3, #12
 8002d00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d02:	637a      	str	r2, [r7, #52]	; 0x34
 8002d04:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d0a:	e841 2300 	strex	r3, r2, [r1]
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1e5      	bne.n	8002ce2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	3314      	adds	r3, #20
 8002d1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	e853 3f00 	ldrex	r3, [r3]
 8002d24:	613b      	str	r3, [r7, #16]
   return(result);
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	3314      	adds	r3, #20
 8002d34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d36:	623a      	str	r2, [r7, #32]
 8002d38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3a:	69f9      	ldr	r1, [r7, #28]
 8002d3c:	6a3a      	ldr	r2, [r7, #32]
 8002d3e:	e841 2300 	strex	r3, r2, [r1]
 8002d42:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1e5      	bne.n	8002d16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e00f      	b.n	8002d86 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	bf0c      	ite	eq
 8002d76:	2301      	moveq	r3, #1
 8002d78:	2300      	movne	r3, #0
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d09f      	beq.n	8002cc4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3740      	adds	r7, #64	; 0x40
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d94:	b0c0      	sub	sp, #256	; 0x100
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dac:	68d9      	ldr	r1, [r3, #12]
 8002dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	ea40 0301 	orr.w	r3, r0, r1
 8002db8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002de8:	f021 010c 	bic.w	r1, r1, #12
 8002dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002df6:	430b      	orrs	r3, r1
 8002df8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e0a:	6999      	ldr	r1, [r3, #24]
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	ea40 0301 	orr.w	r3, r0, r1
 8002e16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4b8f      	ldr	r3, [pc, #572]	; (800305c <UART_SetConfig+0x2cc>)
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d005      	beq.n	8002e30 <UART_SetConfig+0xa0>
 8002e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	4b8d      	ldr	r3, [pc, #564]	; (8003060 <UART_SetConfig+0x2d0>)
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d104      	bne.n	8002e3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e30:	f7ff fe4c 	bl	8002acc <HAL_RCC_GetPCLK2Freq>
 8002e34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e38:	e003      	b.n	8002e42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e3a:	f7ff fe33 	bl	8002aa4 <HAL_RCC_GetPCLK1Freq>
 8002e3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e4c:	f040 810c 	bne.w	8003068 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e54:	2200      	movs	r2, #0
 8002e56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e62:	4622      	mov	r2, r4
 8002e64:	462b      	mov	r3, r5
 8002e66:	1891      	adds	r1, r2, r2
 8002e68:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e6a:	415b      	adcs	r3, r3
 8002e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e72:	4621      	mov	r1, r4
 8002e74:	eb12 0801 	adds.w	r8, r2, r1
 8002e78:	4629      	mov	r1, r5
 8002e7a:	eb43 0901 	adc.w	r9, r3, r1
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e92:	4690      	mov	r8, r2
 8002e94:	4699      	mov	r9, r3
 8002e96:	4623      	mov	r3, r4
 8002e98:	eb18 0303 	adds.w	r3, r8, r3
 8002e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ea0:	462b      	mov	r3, r5
 8002ea2:	eb49 0303 	adc.w	r3, r9, r3
 8002ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002eb6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002eba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	18db      	adds	r3, r3, r3
 8002ec2:	653b      	str	r3, [r7, #80]	; 0x50
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	eb42 0303 	adc.w	r3, r2, r3
 8002eca:	657b      	str	r3, [r7, #84]	; 0x54
 8002ecc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ed0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ed4:	f7fd fec0 	bl	8000c58 <__aeabi_uldivmod>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4b61      	ldr	r3, [pc, #388]	; (8003064 <UART_SetConfig+0x2d4>)
 8002ede:	fba3 2302 	umull	r2, r3, r3, r2
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	011c      	lsls	r4, r3, #4
 8002ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eea:	2200      	movs	r2, #0
 8002eec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ef0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ef4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ef8:	4642      	mov	r2, r8
 8002efa:	464b      	mov	r3, r9
 8002efc:	1891      	adds	r1, r2, r2
 8002efe:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f00:	415b      	adcs	r3, r3
 8002f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f08:	4641      	mov	r1, r8
 8002f0a:	eb12 0a01 	adds.w	sl, r2, r1
 8002f0e:	4649      	mov	r1, r9
 8002f10:	eb43 0b01 	adc.w	fp, r3, r1
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f28:	4692      	mov	sl, r2
 8002f2a:	469b      	mov	fp, r3
 8002f2c:	4643      	mov	r3, r8
 8002f2e:	eb1a 0303 	adds.w	r3, sl, r3
 8002f32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f36:	464b      	mov	r3, r9
 8002f38:	eb4b 0303 	adc.w	r3, fp, r3
 8002f3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f54:	460b      	mov	r3, r1
 8002f56:	18db      	adds	r3, r3, r3
 8002f58:	643b      	str	r3, [r7, #64]	; 0x40
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	eb42 0303 	adc.w	r3, r2, r3
 8002f60:	647b      	str	r3, [r7, #68]	; 0x44
 8002f62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f6a:	f7fd fe75 	bl	8000c58 <__aeabi_uldivmod>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4611      	mov	r1, r2
 8002f74:	4b3b      	ldr	r3, [pc, #236]	; (8003064 <UART_SetConfig+0x2d4>)
 8002f76:	fba3 2301 	umull	r2, r3, r3, r1
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	2264      	movs	r2, #100	; 0x64
 8002f7e:	fb02 f303 	mul.w	r3, r2, r3
 8002f82:	1acb      	subs	r3, r1, r3
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f8a:	4b36      	ldr	r3, [pc, #216]	; (8003064 <UART_SetConfig+0x2d4>)
 8002f8c:	fba3 2302 	umull	r2, r3, r3, r2
 8002f90:	095b      	lsrs	r3, r3, #5
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f98:	441c      	add	r4, r3
 8002f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fa4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002fa8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002fac:	4642      	mov	r2, r8
 8002fae:	464b      	mov	r3, r9
 8002fb0:	1891      	adds	r1, r2, r2
 8002fb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fb4:	415b      	adcs	r3, r3
 8002fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fbc:	4641      	mov	r1, r8
 8002fbe:	1851      	adds	r1, r2, r1
 8002fc0:	6339      	str	r1, [r7, #48]	; 0x30
 8002fc2:	4649      	mov	r1, r9
 8002fc4:	414b      	adcs	r3, r1
 8002fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002fd4:	4659      	mov	r1, fp
 8002fd6:	00cb      	lsls	r3, r1, #3
 8002fd8:	4651      	mov	r1, sl
 8002fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fde:	4651      	mov	r1, sl
 8002fe0:	00ca      	lsls	r2, r1, #3
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4642      	mov	r2, r8
 8002fea:	189b      	adds	r3, r3, r2
 8002fec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ff0:	464b      	mov	r3, r9
 8002ff2:	460a      	mov	r2, r1
 8002ff4:	eb42 0303 	adc.w	r3, r2, r3
 8002ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003008:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800300c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003010:	460b      	mov	r3, r1
 8003012:	18db      	adds	r3, r3, r3
 8003014:	62bb      	str	r3, [r7, #40]	; 0x28
 8003016:	4613      	mov	r3, r2
 8003018:	eb42 0303 	adc.w	r3, r2, r3
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800301e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003022:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003026:	f7fd fe17 	bl	8000c58 <__aeabi_uldivmod>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <UART_SetConfig+0x2d4>)
 8003030:	fba3 1302 	umull	r1, r3, r3, r2
 8003034:	095b      	lsrs	r3, r3, #5
 8003036:	2164      	movs	r1, #100	; 0x64
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	3332      	adds	r3, #50	; 0x32
 8003042:	4a08      	ldr	r2, [pc, #32]	; (8003064 <UART_SetConfig+0x2d4>)
 8003044:	fba2 2303 	umull	r2, r3, r2, r3
 8003048:	095b      	lsrs	r3, r3, #5
 800304a:	f003 0207 	and.w	r2, r3, #7
 800304e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4422      	add	r2, r4
 8003056:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003058:	e106      	b.n	8003268 <UART_SetConfig+0x4d8>
 800305a:	bf00      	nop
 800305c:	40011000 	.word	0x40011000
 8003060:	40011400 	.word	0x40011400
 8003064:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800306c:	2200      	movs	r2, #0
 800306e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003072:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003076:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800307a:	4642      	mov	r2, r8
 800307c:	464b      	mov	r3, r9
 800307e:	1891      	adds	r1, r2, r2
 8003080:	6239      	str	r1, [r7, #32]
 8003082:	415b      	adcs	r3, r3
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
 8003086:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800308a:	4641      	mov	r1, r8
 800308c:	1854      	adds	r4, r2, r1
 800308e:	4649      	mov	r1, r9
 8003090:	eb43 0501 	adc.w	r5, r3, r1
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	00eb      	lsls	r3, r5, #3
 800309e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030a2:	00e2      	lsls	r2, r4, #3
 80030a4:	4614      	mov	r4, r2
 80030a6:	461d      	mov	r5, r3
 80030a8:	4643      	mov	r3, r8
 80030aa:	18e3      	adds	r3, r4, r3
 80030ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030b0:	464b      	mov	r3, r9
 80030b2:	eb45 0303 	adc.w	r3, r5, r3
 80030b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030d6:	4629      	mov	r1, r5
 80030d8:	008b      	lsls	r3, r1, #2
 80030da:	4621      	mov	r1, r4
 80030dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030e0:	4621      	mov	r1, r4
 80030e2:	008a      	lsls	r2, r1, #2
 80030e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80030e8:	f7fd fdb6 	bl	8000c58 <__aeabi_uldivmod>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4b60      	ldr	r3, [pc, #384]	; (8003274 <UART_SetConfig+0x4e4>)
 80030f2:	fba3 2302 	umull	r2, r3, r3, r2
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	011c      	lsls	r4, r3, #4
 80030fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030fe:	2200      	movs	r2, #0
 8003100:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003104:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003108:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800310c:	4642      	mov	r2, r8
 800310e:	464b      	mov	r3, r9
 8003110:	1891      	adds	r1, r2, r2
 8003112:	61b9      	str	r1, [r7, #24]
 8003114:	415b      	adcs	r3, r3
 8003116:	61fb      	str	r3, [r7, #28]
 8003118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800311c:	4641      	mov	r1, r8
 800311e:	1851      	adds	r1, r2, r1
 8003120:	6139      	str	r1, [r7, #16]
 8003122:	4649      	mov	r1, r9
 8003124:	414b      	adcs	r3, r1
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003134:	4659      	mov	r1, fp
 8003136:	00cb      	lsls	r3, r1, #3
 8003138:	4651      	mov	r1, sl
 800313a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800313e:	4651      	mov	r1, sl
 8003140:	00ca      	lsls	r2, r1, #3
 8003142:	4610      	mov	r0, r2
 8003144:	4619      	mov	r1, r3
 8003146:	4603      	mov	r3, r0
 8003148:	4642      	mov	r2, r8
 800314a:	189b      	adds	r3, r3, r2
 800314c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003150:	464b      	mov	r3, r9
 8003152:	460a      	mov	r2, r1
 8003154:	eb42 0303 	adc.w	r3, r2, r3
 8003158:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800315c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	67bb      	str	r3, [r7, #120]	; 0x78
 8003166:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003174:	4649      	mov	r1, r9
 8003176:	008b      	lsls	r3, r1, #2
 8003178:	4641      	mov	r1, r8
 800317a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800317e:	4641      	mov	r1, r8
 8003180:	008a      	lsls	r2, r1, #2
 8003182:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003186:	f7fd fd67 	bl	8000c58 <__aeabi_uldivmod>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4611      	mov	r1, r2
 8003190:	4b38      	ldr	r3, [pc, #224]	; (8003274 <UART_SetConfig+0x4e4>)
 8003192:	fba3 2301 	umull	r2, r3, r3, r1
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	2264      	movs	r2, #100	; 0x64
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	1acb      	subs	r3, r1, r3
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	3332      	adds	r3, #50	; 0x32
 80031a4:	4a33      	ldr	r2, [pc, #204]	; (8003274 <UART_SetConfig+0x4e4>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031b0:	441c      	add	r4, r3
 80031b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031b6:	2200      	movs	r2, #0
 80031b8:	673b      	str	r3, [r7, #112]	; 0x70
 80031ba:	677a      	str	r2, [r7, #116]	; 0x74
 80031bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031c0:	4642      	mov	r2, r8
 80031c2:	464b      	mov	r3, r9
 80031c4:	1891      	adds	r1, r2, r2
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	415b      	adcs	r3, r3
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031d0:	4641      	mov	r1, r8
 80031d2:	1851      	adds	r1, r2, r1
 80031d4:	6039      	str	r1, [r7, #0]
 80031d6:	4649      	mov	r1, r9
 80031d8:	414b      	adcs	r3, r1
 80031da:	607b      	str	r3, [r7, #4]
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031e8:	4659      	mov	r1, fp
 80031ea:	00cb      	lsls	r3, r1, #3
 80031ec:	4651      	mov	r1, sl
 80031ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031f2:	4651      	mov	r1, sl
 80031f4:	00ca      	lsls	r2, r1, #3
 80031f6:	4610      	mov	r0, r2
 80031f8:	4619      	mov	r1, r3
 80031fa:	4603      	mov	r3, r0
 80031fc:	4642      	mov	r2, r8
 80031fe:	189b      	adds	r3, r3, r2
 8003200:	66bb      	str	r3, [r7, #104]	; 0x68
 8003202:	464b      	mov	r3, r9
 8003204:	460a      	mov	r2, r1
 8003206:	eb42 0303 	adc.w	r3, r2, r3
 800320a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	663b      	str	r3, [r7, #96]	; 0x60
 8003216:	667a      	str	r2, [r7, #100]	; 0x64
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003224:	4649      	mov	r1, r9
 8003226:	008b      	lsls	r3, r1, #2
 8003228:	4641      	mov	r1, r8
 800322a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800322e:	4641      	mov	r1, r8
 8003230:	008a      	lsls	r2, r1, #2
 8003232:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003236:	f7fd fd0f 	bl	8000c58 <__aeabi_uldivmod>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4b0d      	ldr	r3, [pc, #52]	; (8003274 <UART_SetConfig+0x4e4>)
 8003240:	fba3 1302 	umull	r1, r3, r3, r2
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	2164      	movs	r1, #100	; 0x64
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	3332      	adds	r3, #50	; 0x32
 8003252:	4a08      	ldr	r2, [pc, #32]	; (8003274 <UART_SetConfig+0x4e4>)
 8003254:	fba2 2303 	umull	r2, r3, r2, r3
 8003258:	095b      	lsrs	r3, r3, #5
 800325a:	f003 020f 	and.w	r2, r3, #15
 800325e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4422      	add	r2, r4
 8003266:	609a      	str	r2, [r3, #8]
}
 8003268:	bf00      	nop
 800326a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800326e:	46bd      	mov	sp, r7
 8003270:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003274:	51eb851f 	.word	0x51eb851f

08003278 <__cvt>:
 8003278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800327c:	ec55 4b10 	vmov	r4, r5, d0
 8003280:	2d00      	cmp	r5, #0
 8003282:	460e      	mov	r6, r1
 8003284:	4619      	mov	r1, r3
 8003286:	462b      	mov	r3, r5
 8003288:	bfbb      	ittet	lt
 800328a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800328e:	461d      	movlt	r5, r3
 8003290:	2300      	movge	r3, #0
 8003292:	232d      	movlt	r3, #45	; 0x2d
 8003294:	700b      	strb	r3, [r1, #0]
 8003296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003298:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800329c:	4691      	mov	r9, r2
 800329e:	f023 0820 	bic.w	r8, r3, #32
 80032a2:	bfbc      	itt	lt
 80032a4:	4622      	movlt	r2, r4
 80032a6:	4614      	movlt	r4, r2
 80032a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80032ac:	d005      	beq.n	80032ba <__cvt+0x42>
 80032ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80032b2:	d100      	bne.n	80032b6 <__cvt+0x3e>
 80032b4:	3601      	adds	r6, #1
 80032b6:	2102      	movs	r1, #2
 80032b8:	e000      	b.n	80032bc <__cvt+0x44>
 80032ba:	2103      	movs	r1, #3
 80032bc:	ab03      	add	r3, sp, #12
 80032be:	9301      	str	r3, [sp, #4]
 80032c0:	ab02      	add	r3, sp, #8
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	ec45 4b10 	vmov	d0, r4, r5
 80032c8:	4653      	mov	r3, sl
 80032ca:	4632      	mov	r2, r6
 80032cc:	f000 fe68 	bl	8003fa0 <_dtoa_r>
 80032d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80032d4:	4607      	mov	r7, r0
 80032d6:	d102      	bne.n	80032de <__cvt+0x66>
 80032d8:	f019 0f01 	tst.w	r9, #1
 80032dc:	d022      	beq.n	8003324 <__cvt+0xac>
 80032de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80032e2:	eb07 0906 	add.w	r9, r7, r6
 80032e6:	d110      	bne.n	800330a <__cvt+0x92>
 80032e8:	783b      	ldrb	r3, [r7, #0]
 80032ea:	2b30      	cmp	r3, #48	; 0x30
 80032ec:	d10a      	bne.n	8003304 <__cvt+0x8c>
 80032ee:	2200      	movs	r2, #0
 80032f0:	2300      	movs	r3, #0
 80032f2:	4620      	mov	r0, r4
 80032f4:	4629      	mov	r1, r5
 80032f6:	f7fd fbef 	bl	8000ad8 <__aeabi_dcmpeq>
 80032fa:	b918      	cbnz	r0, 8003304 <__cvt+0x8c>
 80032fc:	f1c6 0601 	rsb	r6, r6, #1
 8003300:	f8ca 6000 	str.w	r6, [sl]
 8003304:	f8da 3000 	ldr.w	r3, [sl]
 8003308:	4499      	add	r9, r3
 800330a:	2200      	movs	r2, #0
 800330c:	2300      	movs	r3, #0
 800330e:	4620      	mov	r0, r4
 8003310:	4629      	mov	r1, r5
 8003312:	f7fd fbe1 	bl	8000ad8 <__aeabi_dcmpeq>
 8003316:	b108      	cbz	r0, 800331c <__cvt+0xa4>
 8003318:	f8cd 900c 	str.w	r9, [sp, #12]
 800331c:	2230      	movs	r2, #48	; 0x30
 800331e:	9b03      	ldr	r3, [sp, #12]
 8003320:	454b      	cmp	r3, r9
 8003322:	d307      	bcc.n	8003334 <__cvt+0xbc>
 8003324:	9b03      	ldr	r3, [sp, #12]
 8003326:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003328:	1bdb      	subs	r3, r3, r7
 800332a:	4638      	mov	r0, r7
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	b004      	add	sp, #16
 8003330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003334:	1c59      	adds	r1, r3, #1
 8003336:	9103      	str	r1, [sp, #12]
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e7f0      	b.n	800331e <__cvt+0xa6>

0800333c <__exponent>:
 800333c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800333e:	4603      	mov	r3, r0
 8003340:	2900      	cmp	r1, #0
 8003342:	bfb8      	it	lt
 8003344:	4249      	neglt	r1, r1
 8003346:	f803 2b02 	strb.w	r2, [r3], #2
 800334a:	bfb4      	ite	lt
 800334c:	222d      	movlt	r2, #45	; 0x2d
 800334e:	222b      	movge	r2, #43	; 0x2b
 8003350:	2909      	cmp	r1, #9
 8003352:	7042      	strb	r2, [r0, #1]
 8003354:	dd2a      	ble.n	80033ac <__exponent+0x70>
 8003356:	f10d 0207 	add.w	r2, sp, #7
 800335a:	4617      	mov	r7, r2
 800335c:	260a      	movs	r6, #10
 800335e:	4694      	mov	ip, r2
 8003360:	fb91 f5f6 	sdiv	r5, r1, r6
 8003364:	fb06 1415 	mls	r4, r6, r5, r1
 8003368:	3430      	adds	r4, #48	; 0x30
 800336a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800336e:	460c      	mov	r4, r1
 8003370:	2c63      	cmp	r4, #99	; 0x63
 8003372:	f102 32ff 	add.w	r2, r2, #4294967295
 8003376:	4629      	mov	r1, r5
 8003378:	dcf1      	bgt.n	800335e <__exponent+0x22>
 800337a:	3130      	adds	r1, #48	; 0x30
 800337c:	f1ac 0402 	sub.w	r4, ip, #2
 8003380:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003384:	1c41      	adds	r1, r0, #1
 8003386:	4622      	mov	r2, r4
 8003388:	42ba      	cmp	r2, r7
 800338a:	d30a      	bcc.n	80033a2 <__exponent+0x66>
 800338c:	f10d 0209 	add.w	r2, sp, #9
 8003390:	eba2 020c 	sub.w	r2, r2, ip
 8003394:	42bc      	cmp	r4, r7
 8003396:	bf88      	it	hi
 8003398:	2200      	movhi	r2, #0
 800339a:	4413      	add	r3, r2
 800339c:	1a18      	subs	r0, r3, r0
 800339e:	b003      	add	sp, #12
 80033a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80033a6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80033aa:	e7ed      	b.n	8003388 <__exponent+0x4c>
 80033ac:	2330      	movs	r3, #48	; 0x30
 80033ae:	3130      	adds	r1, #48	; 0x30
 80033b0:	7083      	strb	r3, [r0, #2]
 80033b2:	70c1      	strb	r1, [r0, #3]
 80033b4:	1d03      	adds	r3, r0, #4
 80033b6:	e7f1      	b.n	800339c <__exponent+0x60>

080033b8 <_printf_float>:
 80033b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033bc:	ed2d 8b02 	vpush	{d8}
 80033c0:	b08d      	sub	sp, #52	; 0x34
 80033c2:	460c      	mov	r4, r1
 80033c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80033c8:	4616      	mov	r6, r2
 80033ca:	461f      	mov	r7, r3
 80033cc:	4605      	mov	r5, r0
 80033ce:	f000 fce7 	bl	8003da0 <_localeconv_r>
 80033d2:	f8d0 a000 	ldr.w	sl, [r0]
 80033d6:	4650      	mov	r0, sl
 80033d8:	f7fc ff52 	bl	8000280 <strlen>
 80033dc:	2300      	movs	r3, #0
 80033de:	930a      	str	r3, [sp, #40]	; 0x28
 80033e0:	6823      	ldr	r3, [r4, #0]
 80033e2:	9305      	str	r3, [sp, #20]
 80033e4:	f8d8 3000 	ldr.w	r3, [r8]
 80033e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80033ec:	3307      	adds	r3, #7
 80033ee:	f023 0307 	bic.w	r3, r3, #7
 80033f2:	f103 0208 	add.w	r2, r3, #8
 80033f6:	f8c8 2000 	str.w	r2, [r8]
 80033fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80033fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003402:	9307      	str	r3, [sp, #28]
 8003404:	f8cd 8018 	str.w	r8, [sp, #24]
 8003408:	ee08 0a10 	vmov	s16, r0
 800340c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003410:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003414:	4b9e      	ldr	r3, [pc, #632]	; (8003690 <_printf_float+0x2d8>)
 8003416:	f04f 32ff 	mov.w	r2, #4294967295
 800341a:	f7fd fb8f 	bl	8000b3c <__aeabi_dcmpun>
 800341e:	bb88      	cbnz	r0, 8003484 <_printf_float+0xcc>
 8003420:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003424:	4b9a      	ldr	r3, [pc, #616]	; (8003690 <_printf_float+0x2d8>)
 8003426:	f04f 32ff 	mov.w	r2, #4294967295
 800342a:	f7fd fb69 	bl	8000b00 <__aeabi_dcmple>
 800342e:	bb48      	cbnz	r0, 8003484 <_printf_float+0xcc>
 8003430:	2200      	movs	r2, #0
 8003432:	2300      	movs	r3, #0
 8003434:	4640      	mov	r0, r8
 8003436:	4649      	mov	r1, r9
 8003438:	f7fd fb58 	bl	8000aec <__aeabi_dcmplt>
 800343c:	b110      	cbz	r0, 8003444 <_printf_float+0x8c>
 800343e:	232d      	movs	r3, #45	; 0x2d
 8003440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003444:	4a93      	ldr	r2, [pc, #588]	; (8003694 <_printf_float+0x2dc>)
 8003446:	4b94      	ldr	r3, [pc, #592]	; (8003698 <_printf_float+0x2e0>)
 8003448:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800344c:	bf94      	ite	ls
 800344e:	4690      	movls	r8, r2
 8003450:	4698      	movhi	r8, r3
 8003452:	2303      	movs	r3, #3
 8003454:	6123      	str	r3, [r4, #16]
 8003456:	9b05      	ldr	r3, [sp, #20]
 8003458:	f023 0304 	bic.w	r3, r3, #4
 800345c:	6023      	str	r3, [r4, #0]
 800345e:	f04f 0900 	mov.w	r9, #0
 8003462:	9700      	str	r7, [sp, #0]
 8003464:	4633      	mov	r3, r6
 8003466:	aa0b      	add	r2, sp, #44	; 0x2c
 8003468:	4621      	mov	r1, r4
 800346a:	4628      	mov	r0, r5
 800346c:	f000 f9da 	bl	8003824 <_printf_common>
 8003470:	3001      	adds	r0, #1
 8003472:	f040 8090 	bne.w	8003596 <_printf_float+0x1de>
 8003476:	f04f 30ff 	mov.w	r0, #4294967295
 800347a:	b00d      	add	sp, #52	; 0x34
 800347c:	ecbd 8b02 	vpop	{d8}
 8003480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003484:	4642      	mov	r2, r8
 8003486:	464b      	mov	r3, r9
 8003488:	4640      	mov	r0, r8
 800348a:	4649      	mov	r1, r9
 800348c:	f7fd fb56 	bl	8000b3c <__aeabi_dcmpun>
 8003490:	b140      	cbz	r0, 80034a4 <_printf_float+0xec>
 8003492:	464b      	mov	r3, r9
 8003494:	2b00      	cmp	r3, #0
 8003496:	bfbc      	itt	lt
 8003498:	232d      	movlt	r3, #45	; 0x2d
 800349a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800349e:	4a7f      	ldr	r2, [pc, #508]	; (800369c <_printf_float+0x2e4>)
 80034a0:	4b7f      	ldr	r3, [pc, #508]	; (80036a0 <_printf_float+0x2e8>)
 80034a2:	e7d1      	b.n	8003448 <_printf_float+0x90>
 80034a4:	6863      	ldr	r3, [r4, #4]
 80034a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80034aa:	9206      	str	r2, [sp, #24]
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	d13f      	bne.n	8003530 <_printf_float+0x178>
 80034b0:	2306      	movs	r3, #6
 80034b2:	6063      	str	r3, [r4, #4]
 80034b4:	9b05      	ldr	r3, [sp, #20]
 80034b6:	6861      	ldr	r1, [r4, #4]
 80034b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80034bc:	2300      	movs	r3, #0
 80034be:	9303      	str	r3, [sp, #12]
 80034c0:	ab0a      	add	r3, sp, #40	; 0x28
 80034c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80034c6:	ab09      	add	r3, sp, #36	; 0x24
 80034c8:	ec49 8b10 	vmov	d0, r8, r9
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	6022      	str	r2, [r4, #0]
 80034d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80034d4:	4628      	mov	r0, r5
 80034d6:	f7ff fecf 	bl	8003278 <__cvt>
 80034da:	9b06      	ldr	r3, [sp, #24]
 80034dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80034de:	2b47      	cmp	r3, #71	; 0x47
 80034e0:	4680      	mov	r8, r0
 80034e2:	d108      	bne.n	80034f6 <_printf_float+0x13e>
 80034e4:	1cc8      	adds	r0, r1, #3
 80034e6:	db02      	blt.n	80034ee <_printf_float+0x136>
 80034e8:	6863      	ldr	r3, [r4, #4]
 80034ea:	4299      	cmp	r1, r3
 80034ec:	dd41      	ble.n	8003572 <_printf_float+0x1ba>
 80034ee:	f1ab 0302 	sub.w	r3, fp, #2
 80034f2:	fa5f fb83 	uxtb.w	fp, r3
 80034f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80034fa:	d820      	bhi.n	800353e <_printf_float+0x186>
 80034fc:	3901      	subs	r1, #1
 80034fe:	465a      	mov	r2, fp
 8003500:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003504:	9109      	str	r1, [sp, #36]	; 0x24
 8003506:	f7ff ff19 	bl	800333c <__exponent>
 800350a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800350c:	1813      	adds	r3, r2, r0
 800350e:	2a01      	cmp	r2, #1
 8003510:	4681      	mov	r9, r0
 8003512:	6123      	str	r3, [r4, #16]
 8003514:	dc02      	bgt.n	800351c <_printf_float+0x164>
 8003516:	6822      	ldr	r2, [r4, #0]
 8003518:	07d2      	lsls	r2, r2, #31
 800351a:	d501      	bpl.n	8003520 <_printf_float+0x168>
 800351c:	3301      	adds	r3, #1
 800351e:	6123      	str	r3, [r4, #16]
 8003520:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003524:	2b00      	cmp	r3, #0
 8003526:	d09c      	beq.n	8003462 <_printf_float+0xaa>
 8003528:	232d      	movs	r3, #45	; 0x2d
 800352a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800352e:	e798      	b.n	8003462 <_printf_float+0xaa>
 8003530:	9a06      	ldr	r2, [sp, #24]
 8003532:	2a47      	cmp	r2, #71	; 0x47
 8003534:	d1be      	bne.n	80034b4 <_printf_float+0xfc>
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1bc      	bne.n	80034b4 <_printf_float+0xfc>
 800353a:	2301      	movs	r3, #1
 800353c:	e7b9      	b.n	80034b2 <_printf_float+0xfa>
 800353e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003542:	d118      	bne.n	8003576 <_printf_float+0x1be>
 8003544:	2900      	cmp	r1, #0
 8003546:	6863      	ldr	r3, [r4, #4]
 8003548:	dd0b      	ble.n	8003562 <_printf_float+0x1aa>
 800354a:	6121      	str	r1, [r4, #16]
 800354c:	b913      	cbnz	r3, 8003554 <_printf_float+0x19c>
 800354e:	6822      	ldr	r2, [r4, #0]
 8003550:	07d0      	lsls	r0, r2, #31
 8003552:	d502      	bpl.n	800355a <_printf_float+0x1a2>
 8003554:	3301      	adds	r3, #1
 8003556:	440b      	add	r3, r1
 8003558:	6123      	str	r3, [r4, #16]
 800355a:	65a1      	str	r1, [r4, #88]	; 0x58
 800355c:	f04f 0900 	mov.w	r9, #0
 8003560:	e7de      	b.n	8003520 <_printf_float+0x168>
 8003562:	b913      	cbnz	r3, 800356a <_printf_float+0x1b2>
 8003564:	6822      	ldr	r2, [r4, #0]
 8003566:	07d2      	lsls	r2, r2, #31
 8003568:	d501      	bpl.n	800356e <_printf_float+0x1b6>
 800356a:	3302      	adds	r3, #2
 800356c:	e7f4      	b.n	8003558 <_printf_float+0x1a0>
 800356e:	2301      	movs	r3, #1
 8003570:	e7f2      	b.n	8003558 <_printf_float+0x1a0>
 8003572:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003578:	4299      	cmp	r1, r3
 800357a:	db05      	blt.n	8003588 <_printf_float+0x1d0>
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	6121      	str	r1, [r4, #16]
 8003580:	07d8      	lsls	r0, r3, #31
 8003582:	d5ea      	bpl.n	800355a <_printf_float+0x1a2>
 8003584:	1c4b      	adds	r3, r1, #1
 8003586:	e7e7      	b.n	8003558 <_printf_float+0x1a0>
 8003588:	2900      	cmp	r1, #0
 800358a:	bfd4      	ite	le
 800358c:	f1c1 0202 	rsble	r2, r1, #2
 8003590:	2201      	movgt	r2, #1
 8003592:	4413      	add	r3, r2
 8003594:	e7e0      	b.n	8003558 <_printf_float+0x1a0>
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	055a      	lsls	r2, r3, #21
 800359a:	d407      	bmi.n	80035ac <_printf_float+0x1f4>
 800359c:	6923      	ldr	r3, [r4, #16]
 800359e:	4642      	mov	r2, r8
 80035a0:	4631      	mov	r1, r6
 80035a2:	4628      	mov	r0, r5
 80035a4:	47b8      	blx	r7
 80035a6:	3001      	adds	r0, #1
 80035a8:	d12c      	bne.n	8003604 <_printf_float+0x24c>
 80035aa:	e764      	b.n	8003476 <_printf_float+0xbe>
 80035ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80035b0:	f240 80e0 	bls.w	8003774 <_printf_float+0x3bc>
 80035b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80035b8:	2200      	movs	r2, #0
 80035ba:	2300      	movs	r3, #0
 80035bc:	f7fd fa8c 	bl	8000ad8 <__aeabi_dcmpeq>
 80035c0:	2800      	cmp	r0, #0
 80035c2:	d034      	beq.n	800362e <_printf_float+0x276>
 80035c4:	4a37      	ldr	r2, [pc, #220]	; (80036a4 <_printf_float+0x2ec>)
 80035c6:	2301      	movs	r3, #1
 80035c8:	4631      	mov	r1, r6
 80035ca:	4628      	mov	r0, r5
 80035cc:	47b8      	blx	r7
 80035ce:	3001      	adds	r0, #1
 80035d0:	f43f af51 	beq.w	8003476 <_printf_float+0xbe>
 80035d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035d8:	429a      	cmp	r2, r3
 80035da:	db02      	blt.n	80035e2 <_printf_float+0x22a>
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	07d8      	lsls	r0, r3, #31
 80035e0:	d510      	bpl.n	8003604 <_printf_float+0x24c>
 80035e2:	ee18 3a10 	vmov	r3, s16
 80035e6:	4652      	mov	r2, sl
 80035e8:	4631      	mov	r1, r6
 80035ea:	4628      	mov	r0, r5
 80035ec:	47b8      	blx	r7
 80035ee:	3001      	adds	r0, #1
 80035f0:	f43f af41 	beq.w	8003476 <_printf_float+0xbe>
 80035f4:	f04f 0800 	mov.w	r8, #0
 80035f8:	f104 091a 	add.w	r9, r4, #26
 80035fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035fe:	3b01      	subs	r3, #1
 8003600:	4543      	cmp	r3, r8
 8003602:	dc09      	bgt.n	8003618 <_printf_float+0x260>
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	079b      	lsls	r3, r3, #30
 8003608:	f100 8107 	bmi.w	800381a <_printf_float+0x462>
 800360c:	68e0      	ldr	r0, [r4, #12]
 800360e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003610:	4298      	cmp	r0, r3
 8003612:	bfb8      	it	lt
 8003614:	4618      	movlt	r0, r3
 8003616:	e730      	b.n	800347a <_printf_float+0xc2>
 8003618:	2301      	movs	r3, #1
 800361a:	464a      	mov	r2, r9
 800361c:	4631      	mov	r1, r6
 800361e:	4628      	mov	r0, r5
 8003620:	47b8      	blx	r7
 8003622:	3001      	adds	r0, #1
 8003624:	f43f af27 	beq.w	8003476 <_printf_float+0xbe>
 8003628:	f108 0801 	add.w	r8, r8, #1
 800362c:	e7e6      	b.n	80035fc <_printf_float+0x244>
 800362e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003630:	2b00      	cmp	r3, #0
 8003632:	dc39      	bgt.n	80036a8 <_printf_float+0x2f0>
 8003634:	4a1b      	ldr	r2, [pc, #108]	; (80036a4 <_printf_float+0x2ec>)
 8003636:	2301      	movs	r3, #1
 8003638:	4631      	mov	r1, r6
 800363a:	4628      	mov	r0, r5
 800363c:	47b8      	blx	r7
 800363e:	3001      	adds	r0, #1
 8003640:	f43f af19 	beq.w	8003476 <_printf_float+0xbe>
 8003644:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003648:	4313      	orrs	r3, r2
 800364a:	d102      	bne.n	8003652 <_printf_float+0x29a>
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	07d9      	lsls	r1, r3, #31
 8003650:	d5d8      	bpl.n	8003604 <_printf_float+0x24c>
 8003652:	ee18 3a10 	vmov	r3, s16
 8003656:	4652      	mov	r2, sl
 8003658:	4631      	mov	r1, r6
 800365a:	4628      	mov	r0, r5
 800365c:	47b8      	blx	r7
 800365e:	3001      	adds	r0, #1
 8003660:	f43f af09 	beq.w	8003476 <_printf_float+0xbe>
 8003664:	f04f 0900 	mov.w	r9, #0
 8003668:	f104 0a1a 	add.w	sl, r4, #26
 800366c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800366e:	425b      	negs	r3, r3
 8003670:	454b      	cmp	r3, r9
 8003672:	dc01      	bgt.n	8003678 <_printf_float+0x2c0>
 8003674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003676:	e792      	b.n	800359e <_printf_float+0x1e6>
 8003678:	2301      	movs	r3, #1
 800367a:	4652      	mov	r2, sl
 800367c:	4631      	mov	r1, r6
 800367e:	4628      	mov	r0, r5
 8003680:	47b8      	blx	r7
 8003682:	3001      	adds	r0, #1
 8003684:	f43f aef7 	beq.w	8003476 <_printf_float+0xbe>
 8003688:	f109 0901 	add.w	r9, r9, #1
 800368c:	e7ee      	b.n	800366c <_printf_float+0x2b4>
 800368e:	bf00      	nop
 8003690:	7fefffff 	.word	0x7fefffff
 8003694:	08006784 	.word	0x08006784
 8003698:	08006788 	.word	0x08006788
 800369c:	0800678c 	.word	0x0800678c
 80036a0:	08006790 	.word	0x08006790
 80036a4:	08006794 	.word	0x08006794
 80036a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80036aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036ac:	429a      	cmp	r2, r3
 80036ae:	bfa8      	it	ge
 80036b0:	461a      	movge	r2, r3
 80036b2:	2a00      	cmp	r2, #0
 80036b4:	4691      	mov	r9, r2
 80036b6:	dc37      	bgt.n	8003728 <_printf_float+0x370>
 80036b8:	f04f 0b00 	mov.w	fp, #0
 80036bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036c0:	f104 021a 	add.w	r2, r4, #26
 80036c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036c6:	9305      	str	r3, [sp, #20]
 80036c8:	eba3 0309 	sub.w	r3, r3, r9
 80036cc:	455b      	cmp	r3, fp
 80036ce:	dc33      	bgt.n	8003738 <_printf_float+0x380>
 80036d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036d4:	429a      	cmp	r2, r3
 80036d6:	db3b      	blt.n	8003750 <_printf_float+0x398>
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	07da      	lsls	r2, r3, #31
 80036dc:	d438      	bmi.n	8003750 <_printf_float+0x398>
 80036de:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80036e2:	eba2 0903 	sub.w	r9, r2, r3
 80036e6:	9b05      	ldr	r3, [sp, #20]
 80036e8:	1ad2      	subs	r2, r2, r3
 80036ea:	4591      	cmp	r9, r2
 80036ec:	bfa8      	it	ge
 80036ee:	4691      	movge	r9, r2
 80036f0:	f1b9 0f00 	cmp.w	r9, #0
 80036f4:	dc35      	bgt.n	8003762 <_printf_float+0x3aa>
 80036f6:	f04f 0800 	mov.w	r8, #0
 80036fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80036fe:	f104 0a1a 	add.w	sl, r4, #26
 8003702:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003706:	1a9b      	subs	r3, r3, r2
 8003708:	eba3 0309 	sub.w	r3, r3, r9
 800370c:	4543      	cmp	r3, r8
 800370e:	f77f af79 	ble.w	8003604 <_printf_float+0x24c>
 8003712:	2301      	movs	r3, #1
 8003714:	4652      	mov	r2, sl
 8003716:	4631      	mov	r1, r6
 8003718:	4628      	mov	r0, r5
 800371a:	47b8      	blx	r7
 800371c:	3001      	adds	r0, #1
 800371e:	f43f aeaa 	beq.w	8003476 <_printf_float+0xbe>
 8003722:	f108 0801 	add.w	r8, r8, #1
 8003726:	e7ec      	b.n	8003702 <_printf_float+0x34a>
 8003728:	4613      	mov	r3, r2
 800372a:	4631      	mov	r1, r6
 800372c:	4642      	mov	r2, r8
 800372e:	4628      	mov	r0, r5
 8003730:	47b8      	blx	r7
 8003732:	3001      	adds	r0, #1
 8003734:	d1c0      	bne.n	80036b8 <_printf_float+0x300>
 8003736:	e69e      	b.n	8003476 <_printf_float+0xbe>
 8003738:	2301      	movs	r3, #1
 800373a:	4631      	mov	r1, r6
 800373c:	4628      	mov	r0, r5
 800373e:	9205      	str	r2, [sp, #20]
 8003740:	47b8      	blx	r7
 8003742:	3001      	adds	r0, #1
 8003744:	f43f ae97 	beq.w	8003476 <_printf_float+0xbe>
 8003748:	9a05      	ldr	r2, [sp, #20]
 800374a:	f10b 0b01 	add.w	fp, fp, #1
 800374e:	e7b9      	b.n	80036c4 <_printf_float+0x30c>
 8003750:	ee18 3a10 	vmov	r3, s16
 8003754:	4652      	mov	r2, sl
 8003756:	4631      	mov	r1, r6
 8003758:	4628      	mov	r0, r5
 800375a:	47b8      	blx	r7
 800375c:	3001      	adds	r0, #1
 800375e:	d1be      	bne.n	80036de <_printf_float+0x326>
 8003760:	e689      	b.n	8003476 <_printf_float+0xbe>
 8003762:	9a05      	ldr	r2, [sp, #20]
 8003764:	464b      	mov	r3, r9
 8003766:	4442      	add	r2, r8
 8003768:	4631      	mov	r1, r6
 800376a:	4628      	mov	r0, r5
 800376c:	47b8      	blx	r7
 800376e:	3001      	adds	r0, #1
 8003770:	d1c1      	bne.n	80036f6 <_printf_float+0x33e>
 8003772:	e680      	b.n	8003476 <_printf_float+0xbe>
 8003774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003776:	2a01      	cmp	r2, #1
 8003778:	dc01      	bgt.n	800377e <_printf_float+0x3c6>
 800377a:	07db      	lsls	r3, r3, #31
 800377c:	d53a      	bpl.n	80037f4 <_printf_float+0x43c>
 800377e:	2301      	movs	r3, #1
 8003780:	4642      	mov	r2, r8
 8003782:	4631      	mov	r1, r6
 8003784:	4628      	mov	r0, r5
 8003786:	47b8      	blx	r7
 8003788:	3001      	adds	r0, #1
 800378a:	f43f ae74 	beq.w	8003476 <_printf_float+0xbe>
 800378e:	ee18 3a10 	vmov	r3, s16
 8003792:	4652      	mov	r2, sl
 8003794:	4631      	mov	r1, r6
 8003796:	4628      	mov	r0, r5
 8003798:	47b8      	blx	r7
 800379a:	3001      	adds	r0, #1
 800379c:	f43f ae6b 	beq.w	8003476 <_printf_float+0xbe>
 80037a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037a4:	2200      	movs	r2, #0
 80037a6:	2300      	movs	r3, #0
 80037a8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80037ac:	f7fd f994 	bl	8000ad8 <__aeabi_dcmpeq>
 80037b0:	b9d8      	cbnz	r0, 80037ea <_printf_float+0x432>
 80037b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80037b6:	f108 0201 	add.w	r2, r8, #1
 80037ba:	4631      	mov	r1, r6
 80037bc:	4628      	mov	r0, r5
 80037be:	47b8      	blx	r7
 80037c0:	3001      	adds	r0, #1
 80037c2:	d10e      	bne.n	80037e2 <_printf_float+0x42a>
 80037c4:	e657      	b.n	8003476 <_printf_float+0xbe>
 80037c6:	2301      	movs	r3, #1
 80037c8:	4652      	mov	r2, sl
 80037ca:	4631      	mov	r1, r6
 80037cc:	4628      	mov	r0, r5
 80037ce:	47b8      	blx	r7
 80037d0:	3001      	adds	r0, #1
 80037d2:	f43f ae50 	beq.w	8003476 <_printf_float+0xbe>
 80037d6:	f108 0801 	add.w	r8, r8, #1
 80037da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037dc:	3b01      	subs	r3, #1
 80037de:	4543      	cmp	r3, r8
 80037e0:	dcf1      	bgt.n	80037c6 <_printf_float+0x40e>
 80037e2:	464b      	mov	r3, r9
 80037e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80037e8:	e6da      	b.n	80035a0 <_printf_float+0x1e8>
 80037ea:	f04f 0800 	mov.w	r8, #0
 80037ee:	f104 0a1a 	add.w	sl, r4, #26
 80037f2:	e7f2      	b.n	80037da <_printf_float+0x422>
 80037f4:	2301      	movs	r3, #1
 80037f6:	4642      	mov	r2, r8
 80037f8:	e7df      	b.n	80037ba <_printf_float+0x402>
 80037fa:	2301      	movs	r3, #1
 80037fc:	464a      	mov	r2, r9
 80037fe:	4631      	mov	r1, r6
 8003800:	4628      	mov	r0, r5
 8003802:	47b8      	blx	r7
 8003804:	3001      	adds	r0, #1
 8003806:	f43f ae36 	beq.w	8003476 <_printf_float+0xbe>
 800380a:	f108 0801 	add.w	r8, r8, #1
 800380e:	68e3      	ldr	r3, [r4, #12]
 8003810:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003812:	1a5b      	subs	r3, r3, r1
 8003814:	4543      	cmp	r3, r8
 8003816:	dcf0      	bgt.n	80037fa <_printf_float+0x442>
 8003818:	e6f8      	b.n	800360c <_printf_float+0x254>
 800381a:	f04f 0800 	mov.w	r8, #0
 800381e:	f104 0919 	add.w	r9, r4, #25
 8003822:	e7f4      	b.n	800380e <_printf_float+0x456>

08003824 <_printf_common>:
 8003824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003828:	4616      	mov	r6, r2
 800382a:	4699      	mov	r9, r3
 800382c:	688a      	ldr	r2, [r1, #8]
 800382e:	690b      	ldr	r3, [r1, #16]
 8003830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003834:	4293      	cmp	r3, r2
 8003836:	bfb8      	it	lt
 8003838:	4613      	movlt	r3, r2
 800383a:	6033      	str	r3, [r6, #0]
 800383c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003840:	4607      	mov	r7, r0
 8003842:	460c      	mov	r4, r1
 8003844:	b10a      	cbz	r2, 800384a <_printf_common+0x26>
 8003846:	3301      	adds	r3, #1
 8003848:	6033      	str	r3, [r6, #0]
 800384a:	6823      	ldr	r3, [r4, #0]
 800384c:	0699      	lsls	r1, r3, #26
 800384e:	bf42      	ittt	mi
 8003850:	6833      	ldrmi	r3, [r6, #0]
 8003852:	3302      	addmi	r3, #2
 8003854:	6033      	strmi	r3, [r6, #0]
 8003856:	6825      	ldr	r5, [r4, #0]
 8003858:	f015 0506 	ands.w	r5, r5, #6
 800385c:	d106      	bne.n	800386c <_printf_common+0x48>
 800385e:	f104 0a19 	add.w	sl, r4, #25
 8003862:	68e3      	ldr	r3, [r4, #12]
 8003864:	6832      	ldr	r2, [r6, #0]
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	42ab      	cmp	r3, r5
 800386a:	dc26      	bgt.n	80038ba <_printf_common+0x96>
 800386c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003870:	1e13      	subs	r3, r2, #0
 8003872:	6822      	ldr	r2, [r4, #0]
 8003874:	bf18      	it	ne
 8003876:	2301      	movne	r3, #1
 8003878:	0692      	lsls	r2, r2, #26
 800387a:	d42b      	bmi.n	80038d4 <_printf_common+0xb0>
 800387c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003880:	4649      	mov	r1, r9
 8003882:	4638      	mov	r0, r7
 8003884:	47c0      	blx	r8
 8003886:	3001      	adds	r0, #1
 8003888:	d01e      	beq.n	80038c8 <_printf_common+0xa4>
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	6922      	ldr	r2, [r4, #16]
 800388e:	f003 0306 	and.w	r3, r3, #6
 8003892:	2b04      	cmp	r3, #4
 8003894:	bf02      	ittt	eq
 8003896:	68e5      	ldreq	r5, [r4, #12]
 8003898:	6833      	ldreq	r3, [r6, #0]
 800389a:	1aed      	subeq	r5, r5, r3
 800389c:	68a3      	ldr	r3, [r4, #8]
 800389e:	bf0c      	ite	eq
 80038a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038a4:	2500      	movne	r5, #0
 80038a6:	4293      	cmp	r3, r2
 80038a8:	bfc4      	itt	gt
 80038aa:	1a9b      	subgt	r3, r3, r2
 80038ac:	18ed      	addgt	r5, r5, r3
 80038ae:	2600      	movs	r6, #0
 80038b0:	341a      	adds	r4, #26
 80038b2:	42b5      	cmp	r5, r6
 80038b4:	d11a      	bne.n	80038ec <_printf_common+0xc8>
 80038b6:	2000      	movs	r0, #0
 80038b8:	e008      	b.n	80038cc <_printf_common+0xa8>
 80038ba:	2301      	movs	r3, #1
 80038bc:	4652      	mov	r2, sl
 80038be:	4649      	mov	r1, r9
 80038c0:	4638      	mov	r0, r7
 80038c2:	47c0      	blx	r8
 80038c4:	3001      	adds	r0, #1
 80038c6:	d103      	bne.n	80038d0 <_printf_common+0xac>
 80038c8:	f04f 30ff 	mov.w	r0, #4294967295
 80038cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d0:	3501      	adds	r5, #1
 80038d2:	e7c6      	b.n	8003862 <_printf_common+0x3e>
 80038d4:	18e1      	adds	r1, r4, r3
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	2030      	movs	r0, #48	; 0x30
 80038da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038de:	4422      	add	r2, r4
 80038e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038e8:	3302      	adds	r3, #2
 80038ea:	e7c7      	b.n	800387c <_printf_common+0x58>
 80038ec:	2301      	movs	r3, #1
 80038ee:	4622      	mov	r2, r4
 80038f0:	4649      	mov	r1, r9
 80038f2:	4638      	mov	r0, r7
 80038f4:	47c0      	blx	r8
 80038f6:	3001      	adds	r0, #1
 80038f8:	d0e6      	beq.n	80038c8 <_printf_common+0xa4>
 80038fa:	3601      	adds	r6, #1
 80038fc:	e7d9      	b.n	80038b2 <_printf_common+0x8e>
	...

08003900 <_printf_i>:
 8003900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003904:	7e0f      	ldrb	r7, [r1, #24]
 8003906:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003908:	2f78      	cmp	r7, #120	; 0x78
 800390a:	4691      	mov	r9, r2
 800390c:	4680      	mov	r8, r0
 800390e:	460c      	mov	r4, r1
 8003910:	469a      	mov	sl, r3
 8003912:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003916:	d807      	bhi.n	8003928 <_printf_i+0x28>
 8003918:	2f62      	cmp	r7, #98	; 0x62
 800391a:	d80a      	bhi.n	8003932 <_printf_i+0x32>
 800391c:	2f00      	cmp	r7, #0
 800391e:	f000 80d4 	beq.w	8003aca <_printf_i+0x1ca>
 8003922:	2f58      	cmp	r7, #88	; 0x58
 8003924:	f000 80c0 	beq.w	8003aa8 <_printf_i+0x1a8>
 8003928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800392c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003930:	e03a      	b.n	80039a8 <_printf_i+0xa8>
 8003932:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003936:	2b15      	cmp	r3, #21
 8003938:	d8f6      	bhi.n	8003928 <_printf_i+0x28>
 800393a:	a101      	add	r1, pc, #4	; (adr r1, 8003940 <_printf_i+0x40>)
 800393c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003940:	08003999 	.word	0x08003999
 8003944:	080039ad 	.word	0x080039ad
 8003948:	08003929 	.word	0x08003929
 800394c:	08003929 	.word	0x08003929
 8003950:	08003929 	.word	0x08003929
 8003954:	08003929 	.word	0x08003929
 8003958:	080039ad 	.word	0x080039ad
 800395c:	08003929 	.word	0x08003929
 8003960:	08003929 	.word	0x08003929
 8003964:	08003929 	.word	0x08003929
 8003968:	08003929 	.word	0x08003929
 800396c:	08003ab1 	.word	0x08003ab1
 8003970:	080039d9 	.word	0x080039d9
 8003974:	08003a6b 	.word	0x08003a6b
 8003978:	08003929 	.word	0x08003929
 800397c:	08003929 	.word	0x08003929
 8003980:	08003ad3 	.word	0x08003ad3
 8003984:	08003929 	.word	0x08003929
 8003988:	080039d9 	.word	0x080039d9
 800398c:	08003929 	.word	0x08003929
 8003990:	08003929 	.word	0x08003929
 8003994:	08003a73 	.word	0x08003a73
 8003998:	682b      	ldr	r3, [r5, #0]
 800399a:	1d1a      	adds	r2, r3, #4
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	602a      	str	r2, [r5, #0]
 80039a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039a8:	2301      	movs	r3, #1
 80039aa:	e09f      	b.n	8003aec <_printf_i+0x1ec>
 80039ac:	6820      	ldr	r0, [r4, #0]
 80039ae:	682b      	ldr	r3, [r5, #0]
 80039b0:	0607      	lsls	r7, r0, #24
 80039b2:	f103 0104 	add.w	r1, r3, #4
 80039b6:	6029      	str	r1, [r5, #0]
 80039b8:	d501      	bpl.n	80039be <_printf_i+0xbe>
 80039ba:	681e      	ldr	r6, [r3, #0]
 80039bc:	e003      	b.n	80039c6 <_printf_i+0xc6>
 80039be:	0646      	lsls	r6, r0, #25
 80039c0:	d5fb      	bpl.n	80039ba <_printf_i+0xba>
 80039c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80039c6:	2e00      	cmp	r6, #0
 80039c8:	da03      	bge.n	80039d2 <_printf_i+0xd2>
 80039ca:	232d      	movs	r3, #45	; 0x2d
 80039cc:	4276      	negs	r6, r6
 80039ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039d2:	485a      	ldr	r0, [pc, #360]	; (8003b3c <_printf_i+0x23c>)
 80039d4:	230a      	movs	r3, #10
 80039d6:	e012      	b.n	80039fe <_printf_i+0xfe>
 80039d8:	682b      	ldr	r3, [r5, #0]
 80039da:	6820      	ldr	r0, [r4, #0]
 80039dc:	1d19      	adds	r1, r3, #4
 80039de:	6029      	str	r1, [r5, #0]
 80039e0:	0605      	lsls	r5, r0, #24
 80039e2:	d501      	bpl.n	80039e8 <_printf_i+0xe8>
 80039e4:	681e      	ldr	r6, [r3, #0]
 80039e6:	e002      	b.n	80039ee <_printf_i+0xee>
 80039e8:	0641      	lsls	r1, r0, #25
 80039ea:	d5fb      	bpl.n	80039e4 <_printf_i+0xe4>
 80039ec:	881e      	ldrh	r6, [r3, #0]
 80039ee:	4853      	ldr	r0, [pc, #332]	; (8003b3c <_printf_i+0x23c>)
 80039f0:	2f6f      	cmp	r7, #111	; 0x6f
 80039f2:	bf0c      	ite	eq
 80039f4:	2308      	moveq	r3, #8
 80039f6:	230a      	movne	r3, #10
 80039f8:	2100      	movs	r1, #0
 80039fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039fe:	6865      	ldr	r5, [r4, #4]
 8003a00:	60a5      	str	r5, [r4, #8]
 8003a02:	2d00      	cmp	r5, #0
 8003a04:	bfa2      	ittt	ge
 8003a06:	6821      	ldrge	r1, [r4, #0]
 8003a08:	f021 0104 	bicge.w	r1, r1, #4
 8003a0c:	6021      	strge	r1, [r4, #0]
 8003a0e:	b90e      	cbnz	r6, 8003a14 <_printf_i+0x114>
 8003a10:	2d00      	cmp	r5, #0
 8003a12:	d04b      	beq.n	8003aac <_printf_i+0x1ac>
 8003a14:	4615      	mov	r5, r2
 8003a16:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a1a:	fb03 6711 	mls	r7, r3, r1, r6
 8003a1e:	5dc7      	ldrb	r7, [r0, r7]
 8003a20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a24:	4637      	mov	r7, r6
 8003a26:	42bb      	cmp	r3, r7
 8003a28:	460e      	mov	r6, r1
 8003a2a:	d9f4      	bls.n	8003a16 <_printf_i+0x116>
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d10b      	bne.n	8003a48 <_printf_i+0x148>
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	07de      	lsls	r6, r3, #31
 8003a34:	d508      	bpl.n	8003a48 <_printf_i+0x148>
 8003a36:	6923      	ldr	r3, [r4, #16]
 8003a38:	6861      	ldr	r1, [r4, #4]
 8003a3a:	4299      	cmp	r1, r3
 8003a3c:	bfde      	ittt	le
 8003a3e:	2330      	movle	r3, #48	; 0x30
 8003a40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a48:	1b52      	subs	r2, r2, r5
 8003a4a:	6122      	str	r2, [r4, #16]
 8003a4c:	f8cd a000 	str.w	sl, [sp]
 8003a50:	464b      	mov	r3, r9
 8003a52:	aa03      	add	r2, sp, #12
 8003a54:	4621      	mov	r1, r4
 8003a56:	4640      	mov	r0, r8
 8003a58:	f7ff fee4 	bl	8003824 <_printf_common>
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	d14a      	bne.n	8003af6 <_printf_i+0x1f6>
 8003a60:	f04f 30ff 	mov.w	r0, #4294967295
 8003a64:	b004      	add	sp, #16
 8003a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	f043 0320 	orr.w	r3, r3, #32
 8003a70:	6023      	str	r3, [r4, #0]
 8003a72:	4833      	ldr	r0, [pc, #204]	; (8003b40 <_printf_i+0x240>)
 8003a74:	2778      	movs	r7, #120	; 0x78
 8003a76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a7a:	6823      	ldr	r3, [r4, #0]
 8003a7c:	6829      	ldr	r1, [r5, #0]
 8003a7e:	061f      	lsls	r7, r3, #24
 8003a80:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a84:	d402      	bmi.n	8003a8c <_printf_i+0x18c>
 8003a86:	065f      	lsls	r7, r3, #25
 8003a88:	bf48      	it	mi
 8003a8a:	b2b6      	uxthmi	r6, r6
 8003a8c:	07df      	lsls	r7, r3, #31
 8003a8e:	bf48      	it	mi
 8003a90:	f043 0320 	orrmi.w	r3, r3, #32
 8003a94:	6029      	str	r1, [r5, #0]
 8003a96:	bf48      	it	mi
 8003a98:	6023      	strmi	r3, [r4, #0]
 8003a9a:	b91e      	cbnz	r6, 8003aa4 <_printf_i+0x1a4>
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	f023 0320 	bic.w	r3, r3, #32
 8003aa2:	6023      	str	r3, [r4, #0]
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	e7a7      	b.n	80039f8 <_printf_i+0xf8>
 8003aa8:	4824      	ldr	r0, [pc, #144]	; (8003b3c <_printf_i+0x23c>)
 8003aaa:	e7e4      	b.n	8003a76 <_printf_i+0x176>
 8003aac:	4615      	mov	r5, r2
 8003aae:	e7bd      	b.n	8003a2c <_printf_i+0x12c>
 8003ab0:	682b      	ldr	r3, [r5, #0]
 8003ab2:	6826      	ldr	r6, [r4, #0]
 8003ab4:	6961      	ldr	r1, [r4, #20]
 8003ab6:	1d18      	adds	r0, r3, #4
 8003ab8:	6028      	str	r0, [r5, #0]
 8003aba:	0635      	lsls	r5, r6, #24
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	d501      	bpl.n	8003ac4 <_printf_i+0x1c4>
 8003ac0:	6019      	str	r1, [r3, #0]
 8003ac2:	e002      	b.n	8003aca <_printf_i+0x1ca>
 8003ac4:	0670      	lsls	r0, r6, #25
 8003ac6:	d5fb      	bpl.n	8003ac0 <_printf_i+0x1c0>
 8003ac8:	8019      	strh	r1, [r3, #0]
 8003aca:	2300      	movs	r3, #0
 8003acc:	6123      	str	r3, [r4, #16]
 8003ace:	4615      	mov	r5, r2
 8003ad0:	e7bc      	b.n	8003a4c <_printf_i+0x14c>
 8003ad2:	682b      	ldr	r3, [r5, #0]
 8003ad4:	1d1a      	adds	r2, r3, #4
 8003ad6:	602a      	str	r2, [r5, #0]
 8003ad8:	681d      	ldr	r5, [r3, #0]
 8003ada:	6862      	ldr	r2, [r4, #4]
 8003adc:	2100      	movs	r1, #0
 8003ade:	4628      	mov	r0, r5
 8003ae0:	f7fc fb7e 	bl	80001e0 <memchr>
 8003ae4:	b108      	cbz	r0, 8003aea <_printf_i+0x1ea>
 8003ae6:	1b40      	subs	r0, r0, r5
 8003ae8:	6060      	str	r0, [r4, #4]
 8003aea:	6863      	ldr	r3, [r4, #4]
 8003aec:	6123      	str	r3, [r4, #16]
 8003aee:	2300      	movs	r3, #0
 8003af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003af4:	e7aa      	b.n	8003a4c <_printf_i+0x14c>
 8003af6:	6923      	ldr	r3, [r4, #16]
 8003af8:	462a      	mov	r2, r5
 8003afa:	4649      	mov	r1, r9
 8003afc:	4640      	mov	r0, r8
 8003afe:	47d0      	blx	sl
 8003b00:	3001      	adds	r0, #1
 8003b02:	d0ad      	beq.n	8003a60 <_printf_i+0x160>
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	079b      	lsls	r3, r3, #30
 8003b08:	d413      	bmi.n	8003b32 <_printf_i+0x232>
 8003b0a:	68e0      	ldr	r0, [r4, #12]
 8003b0c:	9b03      	ldr	r3, [sp, #12]
 8003b0e:	4298      	cmp	r0, r3
 8003b10:	bfb8      	it	lt
 8003b12:	4618      	movlt	r0, r3
 8003b14:	e7a6      	b.n	8003a64 <_printf_i+0x164>
 8003b16:	2301      	movs	r3, #1
 8003b18:	4632      	mov	r2, r6
 8003b1a:	4649      	mov	r1, r9
 8003b1c:	4640      	mov	r0, r8
 8003b1e:	47d0      	blx	sl
 8003b20:	3001      	adds	r0, #1
 8003b22:	d09d      	beq.n	8003a60 <_printf_i+0x160>
 8003b24:	3501      	adds	r5, #1
 8003b26:	68e3      	ldr	r3, [r4, #12]
 8003b28:	9903      	ldr	r1, [sp, #12]
 8003b2a:	1a5b      	subs	r3, r3, r1
 8003b2c:	42ab      	cmp	r3, r5
 8003b2e:	dcf2      	bgt.n	8003b16 <_printf_i+0x216>
 8003b30:	e7eb      	b.n	8003b0a <_printf_i+0x20a>
 8003b32:	2500      	movs	r5, #0
 8003b34:	f104 0619 	add.w	r6, r4, #25
 8003b38:	e7f5      	b.n	8003b26 <_printf_i+0x226>
 8003b3a:	bf00      	nop
 8003b3c:	08006796 	.word	0x08006796
 8003b40:	080067a7 	.word	0x080067a7

08003b44 <std>:
 8003b44:	2300      	movs	r3, #0
 8003b46:	b510      	push	{r4, lr}
 8003b48:	4604      	mov	r4, r0
 8003b4a:	e9c0 3300 	strd	r3, r3, [r0]
 8003b4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b52:	6083      	str	r3, [r0, #8]
 8003b54:	8181      	strh	r1, [r0, #12]
 8003b56:	6643      	str	r3, [r0, #100]	; 0x64
 8003b58:	81c2      	strh	r2, [r0, #14]
 8003b5a:	6183      	str	r3, [r0, #24]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	2208      	movs	r2, #8
 8003b60:	305c      	adds	r0, #92	; 0x5c
 8003b62:	f000 f914 	bl	8003d8e <memset>
 8003b66:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <std+0x58>)
 8003b68:	6263      	str	r3, [r4, #36]	; 0x24
 8003b6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ba0 <std+0x5c>)
 8003b6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ba4 <std+0x60>)
 8003b70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b72:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <std+0x64>)
 8003b74:	6323      	str	r3, [r4, #48]	; 0x30
 8003b76:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <std+0x68>)
 8003b78:	6224      	str	r4, [r4, #32]
 8003b7a:	429c      	cmp	r4, r3
 8003b7c:	d006      	beq.n	8003b8c <std+0x48>
 8003b7e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003b82:	4294      	cmp	r4, r2
 8003b84:	d002      	beq.n	8003b8c <std+0x48>
 8003b86:	33d0      	adds	r3, #208	; 0xd0
 8003b88:	429c      	cmp	r4, r3
 8003b8a:	d105      	bne.n	8003b98 <std+0x54>
 8003b8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b94:	f000 b978 	b.w	8003e88 <__retarget_lock_init_recursive>
 8003b98:	bd10      	pop	{r4, pc}
 8003b9a:	bf00      	nop
 8003b9c:	08003d09 	.word	0x08003d09
 8003ba0:	08003d2b 	.word	0x08003d2b
 8003ba4:	08003d63 	.word	0x08003d63
 8003ba8:	08003d87 	.word	0x08003d87
 8003bac:	20000300 	.word	0x20000300

08003bb0 <stdio_exit_handler>:
 8003bb0:	4a02      	ldr	r2, [pc, #8]	; (8003bbc <stdio_exit_handler+0xc>)
 8003bb2:	4903      	ldr	r1, [pc, #12]	; (8003bc0 <stdio_exit_handler+0x10>)
 8003bb4:	4803      	ldr	r0, [pc, #12]	; (8003bc4 <stdio_exit_handler+0x14>)
 8003bb6:	f000 b869 	b.w	8003c8c <_fwalk_sglue>
 8003bba:	bf00      	nop
 8003bbc:	20000024 	.word	0x20000024
 8003bc0:	08005839 	.word	0x08005839
 8003bc4:	20000030 	.word	0x20000030

08003bc8 <cleanup_stdio>:
 8003bc8:	6841      	ldr	r1, [r0, #4]
 8003bca:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <cleanup_stdio+0x34>)
 8003bcc:	4299      	cmp	r1, r3
 8003bce:	b510      	push	{r4, lr}
 8003bd0:	4604      	mov	r4, r0
 8003bd2:	d001      	beq.n	8003bd8 <cleanup_stdio+0x10>
 8003bd4:	f001 fe30 	bl	8005838 <_fflush_r>
 8003bd8:	68a1      	ldr	r1, [r4, #8]
 8003bda:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <cleanup_stdio+0x38>)
 8003bdc:	4299      	cmp	r1, r3
 8003bde:	d002      	beq.n	8003be6 <cleanup_stdio+0x1e>
 8003be0:	4620      	mov	r0, r4
 8003be2:	f001 fe29 	bl	8005838 <_fflush_r>
 8003be6:	68e1      	ldr	r1, [r4, #12]
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <cleanup_stdio+0x3c>)
 8003bea:	4299      	cmp	r1, r3
 8003bec:	d004      	beq.n	8003bf8 <cleanup_stdio+0x30>
 8003bee:	4620      	mov	r0, r4
 8003bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bf4:	f001 be20 	b.w	8005838 <_fflush_r>
 8003bf8:	bd10      	pop	{r4, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000300 	.word	0x20000300
 8003c00:	20000368 	.word	0x20000368
 8003c04:	200003d0 	.word	0x200003d0

08003c08 <global_stdio_init.part.0>:
 8003c08:	b510      	push	{r4, lr}
 8003c0a:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <global_stdio_init.part.0+0x30>)
 8003c0c:	4c0b      	ldr	r4, [pc, #44]	; (8003c3c <global_stdio_init.part.0+0x34>)
 8003c0e:	4a0c      	ldr	r2, [pc, #48]	; (8003c40 <global_stdio_init.part.0+0x38>)
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	4620      	mov	r0, r4
 8003c14:	2200      	movs	r2, #0
 8003c16:	2104      	movs	r1, #4
 8003c18:	f7ff ff94 	bl	8003b44 <std>
 8003c1c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003c20:	2201      	movs	r2, #1
 8003c22:	2109      	movs	r1, #9
 8003c24:	f7ff ff8e 	bl	8003b44 <std>
 8003c28:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c32:	2112      	movs	r1, #18
 8003c34:	f7ff bf86 	b.w	8003b44 <std>
 8003c38:	20000438 	.word	0x20000438
 8003c3c:	20000300 	.word	0x20000300
 8003c40:	08003bb1 	.word	0x08003bb1

08003c44 <__sfp_lock_acquire>:
 8003c44:	4801      	ldr	r0, [pc, #4]	; (8003c4c <__sfp_lock_acquire+0x8>)
 8003c46:	f000 b920 	b.w	8003e8a <__retarget_lock_acquire_recursive>
 8003c4a:	bf00      	nop
 8003c4c:	20000441 	.word	0x20000441

08003c50 <__sfp_lock_release>:
 8003c50:	4801      	ldr	r0, [pc, #4]	; (8003c58 <__sfp_lock_release+0x8>)
 8003c52:	f000 b91b 	b.w	8003e8c <__retarget_lock_release_recursive>
 8003c56:	bf00      	nop
 8003c58:	20000441 	.word	0x20000441

08003c5c <__sinit>:
 8003c5c:	b510      	push	{r4, lr}
 8003c5e:	4604      	mov	r4, r0
 8003c60:	f7ff fff0 	bl	8003c44 <__sfp_lock_acquire>
 8003c64:	6a23      	ldr	r3, [r4, #32]
 8003c66:	b11b      	cbz	r3, 8003c70 <__sinit+0x14>
 8003c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c6c:	f7ff bff0 	b.w	8003c50 <__sfp_lock_release>
 8003c70:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <__sinit+0x28>)
 8003c72:	6223      	str	r3, [r4, #32]
 8003c74:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <__sinit+0x2c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1f5      	bne.n	8003c68 <__sinit+0xc>
 8003c7c:	f7ff ffc4 	bl	8003c08 <global_stdio_init.part.0>
 8003c80:	e7f2      	b.n	8003c68 <__sinit+0xc>
 8003c82:	bf00      	nop
 8003c84:	08003bc9 	.word	0x08003bc9
 8003c88:	20000438 	.word	0x20000438

08003c8c <_fwalk_sglue>:
 8003c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c90:	4607      	mov	r7, r0
 8003c92:	4688      	mov	r8, r1
 8003c94:	4614      	mov	r4, r2
 8003c96:	2600      	movs	r6, #0
 8003c98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c9c:	f1b9 0901 	subs.w	r9, r9, #1
 8003ca0:	d505      	bpl.n	8003cae <_fwalk_sglue+0x22>
 8003ca2:	6824      	ldr	r4, [r4, #0]
 8003ca4:	2c00      	cmp	r4, #0
 8003ca6:	d1f7      	bne.n	8003c98 <_fwalk_sglue+0xc>
 8003ca8:	4630      	mov	r0, r6
 8003caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cae:	89ab      	ldrh	r3, [r5, #12]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d907      	bls.n	8003cc4 <_fwalk_sglue+0x38>
 8003cb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	d003      	beq.n	8003cc4 <_fwalk_sglue+0x38>
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	4638      	mov	r0, r7
 8003cc0:	47c0      	blx	r8
 8003cc2:	4306      	orrs	r6, r0
 8003cc4:	3568      	adds	r5, #104	; 0x68
 8003cc6:	e7e9      	b.n	8003c9c <_fwalk_sglue+0x10>

08003cc8 <siprintf>:
 8003cc8:	b40e      	push	{r1, r2, r3}
 8003cca:	b500      	push	{lr}
 8003ccc:	b09c      	sub	sp, #112	; 0x70
 8003cce:	ab1d      	add	r3, sp, #116	; 0x74
 8003cd0:	9002      	str	r0, [sp, #8]
 8003cd2:	9006      	str	r0, [sp, #24]
 8003cd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003cd8:	4809      	ldr	r0, [pc, #36]	; (8003d00 <siprintf+0x38>)
 8003cda:	9107      	str	r1, [sp, #28]
 8003cdc:	9104      	str	r1, [sp, #16]
 8003cde:	4909      	ldr	r1, [pc, #36]	; (8003d04 <siprintf+0x3c>)
 8003ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ce4:	9105      	str	r1, [sp, #20]
 8003ce6:	6800      	ldr	r0, [r0, #0]
 8003ce8:	9301      	str	r3, [sp, #4]
 8003cea:	a902      	add	r1, sp, #8
 8003cec:	f001 fc20 	bl	8005530 <_svfiprintf_r>
 8003cf0:	9b02      	ldr	r3, [sp, #8]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	701a      	strb	r2, [r3, #0]
 8003cf6:	b01c      	add	sp, #112	; 0x70
 8003cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cfc:	b003      	add	sp, #12
 8003cfe:	4770      	bx	lr
 8003d00:	2000007c 	.word	0x2000007c
 8003d04:	ffff0208 	.word	0xffff0208

08003d08 <__sread>:
 8003d08:	b510      	push	{r4, lr}
 8003d0a:	460c      	mov	r4, r1
 8003d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d10:	f000 f86c 	bl	8003dec <_read_r>
 8003d14:	2800      	cmp	r0, #0
 8003d16:	bfab      	itete	ge
 8003d18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d1a:	89a3      	ldrhlt	r3, [r4, #12]
 8003d1c:	181b      	addge	r3, r3, r0
 8003d1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d22:	bfac      	ite	ge
 8003d24:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d26:	81a3      	strhlt	r3, [r4, #12]
 8003d28:	bd10      	pop	{r4, pc}

08003d2a <__swrite>:
 8003d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d2e:	461f      	mov	r7, r3
 8003d30:	898b      	ldrh	r3, [r1, #12]
 8003d32:	05db      	lsls	r3, r3, #23
 8003d34:	4605      	mov	r5, r0
 8003d36:	460c      	mov	r4, r1
 8003d38:	4616      	mov	r6, r2
 8003d3a:	d505      	bpl.n	8003d48 <__swrite+0x1e>
 8003d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d40:	2302      	movs	r3, #2
 8003d42:	2200      	movs	r2, #0
 8003d44:	f000 f840 	bl	8003dc8 <_lseek_r>
 8003d48:	89a3      	ldrh	r3, [r4, #12]
 8003d4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d52:	81a3      	strh	r3, [r4, #12]
 8003d54:	4632      	mov	r2, r6
 8003d56:	463b      	mov	r3, r7
 8003d58:	4628      	mov	r0, r5
 8003d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d5e:	f000 b857 	b.w	8003e10 <_write_r>

08003d62 <__sseek>:
 8003d62:	b510      	push	{r4, lr}
 8003d64:	460c      	mov	r4, r1
 8003d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d6a:	f000 f82d 	bl	8003dc8 <_lseek_r>
 8003d6e:	1c43      	adds	r3, r0, #1
 8003d70:	89a3      	ldrh	r3, [r4, #12]
 8003d72:	bf15      	itete	ne
 8003d74:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d7e:	81a3      	strheq	r3, [r4, #12]
 8003d80:	bf18      	it	ne
 8003d82:	81a3      	strhne	r3, [r4, #12]
 8003d84:	bd10      	pop	{r4, pc}

08003d86 <__sclose>:
 8003d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d8a:	f000 b80d 	b.w	8003da8 <_close_r>

08003d8e <memset>:
 8003d8e:	4402      	add	r2, r0
 8003d90:	4603      	mov	r3, r0
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d100      	bne.n	8003d98 <memset+0xa>
 8003d96:	4770      	bx	lr
 8003d98:	f803 1b01 	strb.w	r1, [r3], #1
 8003d9c:	e7f9      	b.n	8003d92 <memset+0x4>
	...

08003da0 <_localeconv_r>:
 8003da0:	4800      	ldr	r0, [pc, #0]	; (8003da4 <_localeconv_r+0x4>)
 8003da2:	4770      	bx	lr
 8003da4:	20000170 	.word	0x20000170

08003da8 <_close_r>:
 8003da8:	b538      	push	{r3, r4, r5, lr}
 8003daa:	4d06      	ldr	r5, [pc, #24]	; (8003dc4 <_close_r+0x1c>)
 8003dac:	2300      	movs	r3, #0
 8003dae:	4604      	mov	r4, r0
 8003db0:	4608      	mov	r0, r1
 8003db2:	602b      	str	r3, [r5, #0]
 8003db4:	f7fd fed7 	bl	8001b66 <_close>
 8003db8:	1c43      	adds	r3, r0, #1
 8003dba:	d102      	bne.n	8003dc2 <_close_r+0x1a>
 8003dbc:	682b      	ldr	r3, [r5, #0]
 8003dbe:	b103      	cbz	r3, 8003dc2 <_close_r+0x1a>
 8003dc0:	6023      	str	r3, [r4, #0]
 8003dc2:	bd38      	pop	{r3, r4, r5, pc}
 8003dc4:	2000043c 	.word	0x2000043c

08003dc8 <_lseek_r>:
 8003dc8:	b538      	push	{r3, r4, r5, lr}
 8003dca:	4d07      	ldr	r5, [pc, #28]	; (8003de8 <_lseek_r+0x20>)
 8003dcc:	4604      	mov	r4, r0
 8003dce:	4608      	mov	r0, r1
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	602a      	str	r2, [r5, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f7fd feec 	bl	8001bb4 <_lseek>
 8003ddc:	1c43      	adds	r3, r0, #1
 8003dde:	d102      	bne.n	8003de6 <_lseek_r+0x1e>
 8003de0:	682b      	ldr	r3, [r5, #0]
 8003de2:	b103      	cbz	r3, 8003de6 <_lseek_r+0x1e>
 8003de4:	6023      	str	r3, [r4, #0]
 8003de6:	bd38      	pop	{r3, r4, r5, pc}
 8003de8:	2000043c 	.word	0x2000043c

08003dec <_read_r>:
 8003dec:	b538      	push	{r3, r4, r5, lr}
 8003dee:	4d07      	ldr	r5, [pc, #28]	; (8003e0c <_read_r+0x20>)
 8003df0:	4604      	mov	r4, r0
 8003df2:	4608      	mov	r0, r1
 8003df4:	4611      	mov	r1, r2
 8003df6:	2200      	movs	r2, #0
 8003df8:	602a      	str	r2, [r5, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	f7fd fe7a 	bl	8001af4 <_read>
 8003e00:	1c43      	adds	r3, r0, #1
 8003e02:	d102      	bne.n	8003e0a <_read_r+0x1e>
 8003e04:	682b      	ldr	r3, [r5, #0]
 8003e06:	b103      	cbz	r3, 8003e0a <_read_r+0x1e>
 8003e08:	6023      	str	r3, [r4, #0]
 8003e0a:	bd38      	pop	{r3, r4, r5, pc}
 8003e0c:	2000043c 	.word	0x2000043c

08003e10 <_write_r>:
 8003e10:	b538      	push	{r3, r4, r5, lr}
 8003e12:	4d07      	ldr	r5, [pc, #28]	; (8003e30 <_write_r+0x20>)
 8003e14:	4604      	mov	r4, r0
 8003e16:	4608      	mov	r0, r1
 8003e18:	4611      	mov	r1, r2
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	602a      	str	r2, [r5, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f7fd fe85 	bl	8001b2e <_write>
 8003e24:	1c43      	adds	r3, r0, #1
 8003e26:	d102      	bne.n	8003e2e <_write_r+0x1e>
 8003e28:	682b      	ldr	r3, [r5, #0]
 8003e2a:	b103      	cbz	r3, 8003e2e <_write_r+0x1e>
 8003e2c:	6023      	str	r3, [r4, #0]
 8003e2e:	bd38      	pop	{r3, r4, r5, pc}
 8003e30:	2000043c 	.word	0x2000043c

08003e34 <__errno>:
 8003e34:	4b01      	ldr	r3, [pc, #4]	; (8003e3c <__errno+0x8>)
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	2000007c 	.word	0x2000007c

08003e40 <__libc_init_array>:
 8003e40:	b570      	push	{r4, r5, r6, lr}
 8003e42:	4d0d      	ldr	r5, [pc, #52]	; (8003e78 <__libc_init_array+0x38>)
 8003e44:	4c0d      	ldr	r4, [pc, #52]	; (8003e7c <__libc_init_array+0x3c>)
 8003e46:	1b64      	subs	r4, r4, r5
 8003e48:	10a4      	asrs	r4, r4, #2
 8003e4a:	2600      	movs	r6, #0
 8003e4c:	42a6      	cmp	r6, r4
 8003e4e:	d109      	bne.n	8003e64 <__libc_init_array+0x24>
 8003e50:	4d0b      	ldr	r5, [pc, #44]	; (8003e80 <__libc_init_array+0x40>)
 8003e52:	4c0c      	ldr	r4, [pc, #48]	; (8003e84 <__libc_init_array+0x44>)
 8003e54:	f002 fc56 	bl	8006704 <_init>
 8003e58:	1b64      	subs	r4, r4, r5
 8003e5a:	10a4      	asrs	r4, r4, #2
 8003e5c:	2600      	movs	r6, #0
 8003e5e:	42a6      	cmp	r6, r4
 8003e60:	d105      	bne.n	8003e6e <__libc_init_array+0x2e>
 8003e62:	bd70      	pop	{r4, r5, r6, pc}
 8003e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e68:	4798      	blx	r3
 8003e6a:	3601      	adds	r6, #1
 8003e6c:	e7ee      	b.n	8003e4c <__libc_init_array+0xc>
 8003e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e72:	4798      	blx	r3
 8003e74:	3601      	adds	r6, #1
 8003e76:	e7f2      	b.n	8003e5e <__libc_init_array+0x1e>
 8003e78:	08006b14 	.word	0x08006b14
 8003e7c:	08006b14 	.word	0x08006b14
 8003e80:	08006b14 	.word	0x08006b14
 8003e84:	08006b18 	.word	0x08006b18

08003e88 <__retarget_lock_init_recursive>:
 8003e88:	4770      	bx	lr

08003e8a <__retarget_lock_acquire_recursive>:
 8003e8a:	4770      	bx	lr

08003e8c <__retarget_lock_release_recursive>:
 8003e8c:	4770      	bx	lr

08003e8e <quorem>:
 8003e8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e92:	6903      	ldr	r3, [r0, #16]
 8003e94:	690c      	ldr	r4, [r1, #16]
 8003e96:	42a3      	cmp	r3, r4
 8003e98:	4607      	mov	r7, r0
 8003e9a:	db7e      	blt.n	8003f9a <quorem+0x10c>
 8003e9c:	3c01      	subs	r4, #1
 8003e9e:	f101 0814 	add.w	r8, r1, #20
 8003ea2:	f100 0514 	add.w	r5, r0, #20
 8003ea6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003eaa:	9301      	str	r3, [sp, #4]
 8003eac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003eb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003ebc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003ec0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003ec4:	d331      	bcc.n	8003f2a <quorem+0x9c>
 8003ec6:	f04f 0e00 	mov.w	lr, #0
 8003eca:	4640      	mov	r0, r8
 8003ecc:	46ac      	mov	ip, r5
 8003ece:	46f2      	mov	sl, lr
 8003ed0:	f850 2b04 	ldr.w	r2, [r0], #4
 8003ed4:	b293      	uxth	r3, r2
 8003ed6:	fb06 e303 	mla	r3, r6, r3, lr
 8003eda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003ede:	0c1a      	lsrs	r2, r3, #16
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	ebaa 0303 	sub.w	r3, sl, r3
 8003ee6:	f8dc a000 	ldr.w	sl, [ip]
 8003eea:	fa13 f38a 	uxtah	r3, r3, sl
 8003eee:	fb06 220e 	mla	r2, r6, lr, r2
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	9b00      	ldr	r3, [sp, #0]
 8003ef6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003efa:	b292      	uxth	r2, r2
 8003efc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003f00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f04:	f8bd 3000 	ldrh.w	r3, [sp]
 8003f08:	4581      	cmp	r9, r0
 8003f0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f0e:	f84c 3b04 	str.w	r3, [ip], #4
 8003f12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003f16:	d2db      	bcs.n	8003ed0 <quorem+0x42>
 8003f18:	f855 300b 	ldr.w	r3, [r5, fp]
 8003f1c:	b92b      	cbnz	r3, 8003f2a <quorem+0x9c>
 8003f1e:	9b01      	ldr	r3, [sp, #4]
 8003f20:	3b04      	subs	r3, #4
 8003f22:	429d      	cmp	r5, r3
 8003f24:	461a      	mov	r2, r3
 8003f26:	d32c      	bcc.n	8003f82 <quorem+0xf4>
 8003f28:	613c      	str	r4, [r7, #16]
 8003f2a:	4638      	mov	r0, r7
 8003f2c:	f001 f9a6 	bl	800527c <__mcmp>
 8003f30:	2800      	cmp	r0, #0
 8003f32:	db22      	blt.n	8003f7a <quorem+0xec>
 8003f34:	3601      	adds	r6, #1
 8003f36:	4629      	mov	r1, r5
 8003f38:	2000      	movs	r0, #0
 8003f3a:	f858 2b04 	ldr.w	r2, [r8], #4
 8003f3e:	f8d1 c000 	ldr.w	ip, [r1]
 8003f42:	b293      	uxth	r3, r2
 8003f44:	1ac3      	subs	r3, r0, r3
 8003f46:	0c12      	lsrs	r2, r2, #16
 8003f48:	fa13 f38c 	uxtah	r3, r3, ip
 8003f4c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003f50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003f5a:	45c1      	cmp	r9, r8
 8003f5c:	f841 3b04 	str.w	r3, [r1], #4
 8003f60:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003f64:	d2e9      	bcs.n	8003f3a <quorem+0xac>
 8003f66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f6e:	b922      	cbnz	r2, 8003f7a <quorem+0xec>
 8003f70:	3b04      	subs	r3, #4
 8003f72:	429d      	cmp	r5, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	d30a      	bcc.n	8003f8e <quorem+0x100>
 8003f78:	613c      	str	r4, [r7, #16]
 8003f7a:	4630      	mov	r0, r6
 8003f7c:	b003      	add	sp, #12
 8003f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f82:	6812      	ldr	r2, [r2, #0]
 8003f84:	3b04      	subs	r3, #4
 8003f86:	2a00      	cmp	r2, #0
 8003f88:	d1ce      	bne.n	8003f28 <quorem+0x9a>
 8003f8a:	3c01      	subs	r4, #1
 8003f8c:	e7c9      	b.n	8003f22 <quorem+0x94>
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	3b04      	subs	r3, #4
 8003f92:	2a00      	cmp	r2, #0
 8003f94:	d1f0      	bne.n	8003f78 <quorem+0xea>
 8003f96:	3c01      	subs	r4, #1
 8003f98:	e7eb      	b.n	8003f72 <quorem+0xe4>
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	e7ee      	b.n	8003f7c <quorem+0xee>
	...

08003fa0 <_dtoa_r>:
 8003fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa4:	ed2d 8b04 	vpush	{d8-d9}
 8003fa8:	69c5      	ldr	r5, [r0, #28]
 8003faa:	b093      	sub	sp, #76	; 0x4c
 8003fac:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003fb0:	ec57 6b10 	vmov	r6, r7, d0
 8003fb4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003fb8:	9107      	str	r1, [sp, #28]
 8003fba:	4604      	mov	r4, r0
 8003fbc:	920a      	str	r2, [sp, #40]	; 0x28
 8003fbe:	930d      	str	r3, [sp, #52]	; 0x34
 8003fc0:	b975      	cbnz	r5, 8003fe0 <_dtoa_r+0x40>
 8003fc2:	2010      	movs	r0, #16
 8003fc4:	f000 fe2a 	bl	8004c1c <malloc>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	61e0      	str	r0, [r4, #28]
 8003fcc:	b920      	cbnz	r0, 8003fd8 <_dtoa_r+0x38>
 8003fce:	4bae      	ldr	r3, [pc, #696]	; (8004288 <_dtoa_r+0x2e8>)
 8003fd0:	21ef      	movs	r1, #239	; 0xef
 8003fd2:	48ae      	ldr	r0, [pc, #696]	; (800428c <_dtoa_r+0x2ec>)
 8003fd4:	f001 fc90 	bl	80058f8 <__assert_func>
 8003fd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003fdc:	6005      	str	r5, [r0, #0]
 8003fde:	60c5      	str	r5, [r0, #12]
 8003fe0:	69e3      	ldr	r3, [r4, #28]
 8003fe2:	6819      	ldr	r1, [r3, #0]
 8003fe4:	b151      	cbz	r1, 8003ffc <_dtoa_r+0x5c>
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	604a      	str	r2, [r1, #4]
 8003fea:	2301      	movs	r3, #1
 8003fec:	4093      	lsls	r3, r2
 8003fee:	608b      	str	r3, [r1, #8]
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f000 ff07 	bl	8004e04 <_Bfree>
 8003ff6:	69e3      	ldr	r3, [r4, #28]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	1e3b      	subs	r3, r7, #0
 8003ffe:	bfbb      	ittet	lt
 8004000:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004004:	9303      	strlt	r3, [sp, #12]
 8004006:	2300      	movge	r3, #0
 8004008:	2201      	movlt	r2, #1
 800400a:	bfac      	ite	ge
 800400c:	f8c8 3000 	strge.w	r3, [r8]
 8004010:	f8c8 2000 	strlt.w	r2, [r8]
 8004014:	4b9e      	ldr	r3, [pc, #632]	; (8004290 <_dtoa_r+0x2f0>)
 8004016:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800401a:	ea33 0308 	bics.w	r3, r3, r8
 800401e:	d11b      	bne.n	8004058 <_dtoa_r+0xb8>
 8004020:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004022:	f242 730f 	movw	r3, #9999	; 0x270f
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800402c:	4333      	orrs	r3, r6
 800402e:	f000 8593 	beq.w	8004b58 <_dtoa_r+0xbb8>
 8004032:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004034:	b963      	cbnz	r3, 8004050 <_dtoa_r+0xb0>
 8004036:	4b97      	ldr	r3, [pc, #604]	; (8004294 <_dtoa_r+0x2f4>)
 8004038:	e027      	b.n	800408a <_dtoa_r+0xea>
 800403a:	4b97      	ldr	r3, [pc, #604]	; (8004298 <_dtoa_r+0x2f8>)
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	3308      	adds	r3, #8
 8004040:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004042:	6013      	str	r3, [r2, #0]
 8004044:	9800      	ldr	r0, [sp, #0]
 8004046:	b013      	add	sp, #76	; 0x4c
 8004048:	ecbd 8b04 	vpop	{d8-d9}
 800404c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004050:	4b90      	ldr	r3, [pc, #576]	; (8004294 <_dtoa_r+0x2f4>)
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	3303      	adds	r3, #3
 8004056:	e7f3      	b.n	8004040 <_dtoa_r+0xa0>
 8004058:	ed9d 7b02 	vldr	d7, [sp, #8]
 800405c:	2200      	movs	r2, #0
 800405e:	ec51 0b17 	vmov	r0, r1, d7
 8004062:	eeb0 8a47 	vmov.f32	s16, s14
 8004066:	eef0 8a67 	vmov.f32	s17, s15
 800406a:	2300      	movs	r3, #0
 800406c:	f7fc fd34 	bl	8000ad8 <__aeabi_dcmpeq>
 8004070:	4681      	mov	r9, r0
 8004072:	b160      	cbz	r0, 800408e <_dtoa_r+0xee>
 8004074:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004076:	2301      	movs	r3, #1
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 8568 	beq.w	8004b52 <_dtoa_r+0xbb2>
 8004082:	4b86      	ldr	r3, [pc, #536]	; (800429c <_dtoa_r+0x2fc>)
 8004084:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	3b01      	subs	r3, #1
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	e7da      	b.n	8004044 <_dtoa_r+0xa4>
 800408e:	aa10      	add	r2, sp, #64	; 0x40
 8004090:	a911      	add	r1, sp, #68	; 0x44
 8004092:	4620      	mov	r0, r4
 8004094:	eeb0 0a48 	vmov.f32	s0, s16
 8004098:	eef0 0a68 	vmov.f32	s1, s17
 800409c:	f001 f994 	bl	80053c8 <__d2b>
 80040a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80040a4:	4682      	mov	sl, r0
 80040a6:	2d00      	cmp	r5, #0
 80040a8:	d07f      	beq.n	80041aa <_dtoa_r+0x20a>
 80040aa:	ee18 3a90 	vmov	r3, s17
 80040ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80040b6:	ec51 0b18 	vmov	r0, r1, d8
 80040ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80040be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80040c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80040c6:	4619      	mov	r1, r3
 80040c8:	2200      	movs	r2, #0
 80040ca:	4b75      	ldr	r3, [pc, #468]	; (80042a0 <_dtoa_r+0x300>)
 80040cc:	f7fc f8e4 	bl	8000298 <__aeabi_dsub>
 80040d0:	a367      	add	r3, pc, #412	; (adr r3, 8004270 <_dtoa_r+0x2d0>)
 80040d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d6:	f7fc fa97 	bl	8000608 <__aeabi_dmul>
 80040da:	a367      	add	r3, pc, #412	; (adr r3, 8004278 <_dtoa_r+0x2d8>)
 80040dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e0:	f7fc f8dc 	bl	800029c <__adddf3>
 80040e4:	4606      	mov	r6, r0
 80040e6:	4628      	mov	r0, r5
 80040e8:	460f      	mov	r7, r1
 80040ea:	f7fc fa23 	bl	8000534 <__aeabi_i2d>
 80040ee:	a364      	add	r3, pc, #400	; (adr r3, 8004280 <_dtoa_r+0x2e0>)
 80040f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f4:	f7fc fa88 	bl	8000608 <__aeabi_dmul>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4630      	mov	r0, r6
 80040fe:	4639      	mov	r1, r7
 8004100:	f7fc f8cc 	bl	800029c <__adddf3>
 8004104:	4606      	mov	r6, r0
 8004106:	460f      	mov	r7, r1
 8004108:	f7fc fd2e 	bl	8000b68 <__aeabi_d2iz>
 800410c:	2200      	movs	r2, #0
 800410e:	4683      	mov	fp, r0
 8004110:	2300      	movs	r3, #0
 8004112:	4630      	mov	r0, r6
 8004114:	4639      	mov	r1, r7
 8004116:	f7fc fce9 	bl	8000aec <__aeabi_dcmplt>
 800411a:	b148      	cbz	r0, 8004130 <_dtoa_r+0x190>
 800411c:	4658      	mov	r0, fp
 800411e:	f7fc fa09 	bl	8000534 <__aeabi_i2d>
 8004122:	4632      	mov	r2, r6
 8004124:	463b      	mov	r3, r7
 8004126:	f7fc fcd7 	bl	8000ad8 <__aeabi_dcmpeq>
 800412a:	b908      	cbnz	r0, 8004130 <_dtoa_r+0x190>
 800412c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004130:	f1bb 0f16 	cmp.w	fp, #22
 8004134:	d857      	bhi.n	80041e6 <_dtoa_r+0x246>
 8004136:	4b5b      	ldr	r3, [pc, #364]	; (80042a4 <_dtoa_r+0x304>)
 8004138:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800413c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004140:	ec51 0b18 	vmov	r0, r1, d8
 8004144:	f7fc fcd2 	bl	8000aec <__aeabi_dcmplt>
 8004148:	2800      	cmp	r0, #0
 800414a:	d04e      	beq.n	80041ea <_dtoa_r+0x24a>
 800414c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004150:	2300      	movs	r3, #0
 8004152:	930c      	str	r3, [sp, #48]	; 0x30
 8004154:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004156:	1b5b      	subs	r3, r3, r5
 8004158:	1e5a      	subs	r2, r3, #1
 800415a:	bf45      	ittet	mi
 800415c:	f1c3 0301 	rsbmi	r3, r3, #1
 8004160:	9305      	strmi	r3, [sp, #20]
 8004162:	2300      	movpl	r3, #0
 8004164:	2300      	movmi	r3, #0
 8004166:	9206      	str	r2, [sp, #24]
 8004168:	bf54      	ite	pl
 800416a:	9305      	strpl	r3, [sp, #20]
 800416c:	9306      	strmi	r3, [sp, #24]
 800416e:	f1bb 0f00 	cmp.w	fp, #0
 8004172:	db3c      	blt.n	80041ee <_dtoa_r+0x24e>
 8004174:	9b06      	ldr	r3, [sp, #24]
 8004176:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800417a:	445b      	add	r3, fp
 800417c:	9306      	str	r3, [sp, #24]
 800417e:	2300      	movs	r3, #0
 8004180:	9308      	str	r3, [sp, #32]
 8004182:	9b07      	ldr	r3, [sp, #28]
 8004184:	2b09      	cmp	r3, #9
 8004186:	d868      	bhi.n	800425a <_dtoa_r+0x2ba>
 8004188:	2b05      	cmp	r3, #5
 800418a:	bfc4      	itt	gt
 800418c:	3b04      	subgt	r3, #4
 800418e:	9307      	strgt	r3, [sp, #28]
 8004190:	9b07      	ldr	r3, [sp, #28]
 8004192:	f1a3 0302 	sub.w	r3, r3, #2
 8004196:	bfcc      	ite	gt
 8004198:	2500      	movgt	r5, #0
 800419a:	2501      	movle	r5, #1
 800419c:	2b03      	cmp	r3, #3
 800419e:	f200 8085 	bhi.w	80042ac <_dtoa_r+0x30c>
 80041a2:	e8df f003 	tbb	[pc, r3]
 80041a6:	3b2e      	.short	0x3b2e
 80041a8:	5839      	.short	0x5839
 80041aa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80041ae:	441d      	add	r5, r3
 80041b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80041b4:	2b20      	cmp	r3, #32
 80041b6:	bfc1      	itttt	gt
 80041b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80041bc:	fa08 f803 	lslgt.w	r8, r8, r3
 80041c0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80041c4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80041c8:	bfd6      	itet	le
 80041ca:	f1c3 0320 	rsble	r3, r3, #32
 80041ce:	ea48 0003 	orrgt.w	r0, r8, r3
 80041d2:	fa06 f003 	lslle.w	r0, r6, r3
 80041d6:	f7fc f99d 	bl	8000514 <__aeabi_ui2d>
 80041da:	2201      	movs	r2, #1
 80041dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80041e0:	3d01      	subs	r5, #1
 80041e2:	920e      	str	r2, [sp, #56]	; 0x38
 80041e4:	e76f      	b.n	80040c6 <_dtoa_r+0x126>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e7b3      	b.n	8004152 <_dtoa_r+0x1b2>
 80041ea:	900c      	str	r0, [sp, #48]	; 0x30
 80041ec:	e7b2      	b.n	8004154 <_dtoa_r+0x1b4>
 80041ee:	9b05      	ldr	r3, [sp, #20]
 80041f0:	eba3 030b 	sub.w	r3, r3, fp
 80041f4:	9305      	str	r3, [sp, #20]
 80041f6:	f1cb 0300 	rsb	r3, fp, #0
 80041fa:	9308      	str	r3, [sp, #32]
 80041fc:	2300      	movs	r3, #0
 80041fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8004200:	e7bf      	b.n	8004182 <_dtoa_r+0x1e2>
 8004202:	2300      	movs	r3, #0
 8004204:	9309      	str	r3, [sp, #36]	; 0x24
 8004206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004208:	2b00      	cmp	r3, #0
 800420a:	dc52      	bgt.n	80042b2 <_dtoa_r+0x312>
 800420c:	2301      	movs	r3, #1
 800420e:	9301      	str	r3, [sp, #4]
 8004210:	9304      	str	r3, [sp, #16]
 8004212:	461a      	mov	r2, r3
 8004214:	920a      	str	r2, [sp, #40]	; 0x28
 8004216:	e00b      	b.n	8004230 <_dtoa_r+0x290>
 8004218:	2301      	movs	r3, #1
 800421a:	e7f3      	b.n	8004204 <_dtoa_r+0x264>
 800421c:	2300      	movs	r3, #0
 800421e:	9309      	str	r3, [sp, #36]	; 0x24
 8004220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004222:	445b      	add	r3, fp
 8004224:	9301      	str	r3, [sp, #4]
 8004226:	3301      	adds	r3, #1
 8004228:	2b01      	cmp	r3, #1
 800422a:	9304      	str	r3, [sp, #16]
 800422c:	bfb8      	it	lt
 800422e:	2301      	movlt	r3, #1
 8004230:	69e0      	ldr	r0, [r4, #28]
 8004232:	2100      	movs	r1, #0
 8004234:	2204      	movs	r2, #4
 8004236:	f102 0614 	add.w	r6, r2, #20
 800423a:	429e      	cmp	r6, r3
 800423c:	d93d      	bls.n	80042ba <_dtoa_r+0x31a>
 800423e:	6041      	str	r1, [r0, #4]
 8004240:	4620      	mov	r0, r4
 8004242:	f000 fd9f 	bl	8004d84 <_Balloc>
 8004246:	9000      	str	r0, [sp, #0]
 8004248:	2800      	cmp	r0, #0
 800424a:	d139      	bne.n	80042c0 <_dtoa_r+0x320>
 800424c:	4b16      	ldr	r3, [pc, #88]	; (80042a8 <_dtoa_r+0x308>)
 800424e:	4602      	mov	r2, r0
 8004250:	f240 11af 	movw	r1, #431	; 0x1af
 8004254:	e6bd      	b.n	8003fd2 <_dtoa_r+0x32>
 8004256:	2301      	movs	r3, #1
 8004258:	e7e1      	b.n	800421e <_dtoa_r+0x27e>
 800425a:	2501      	movs	r5, #1
 800425c:	2300      	movs	r3, #0
 800425e:	9307      	str	r3, [sp, #28]
 8004260:	9509      	str	r5, [sp, #36]	; 0x24
 8004262:	f04f 33ff 	mov.w	r3, #4294967295
 8004266:	9301      	str	r3, [sp, #4]
 8004268:	9304      	str	r3, [sp, #16]
 800426a:	2200      	movs	r2, #0
 800426c:	2312      	movs	r3, #18
 800426e:	e7d1      	b.n	8004214 <_dtoa_r+0x274>
 8004270:	636f4361 	.word	0x636f4361
 8004274:	3fd287a7 	.word	0x3fd287a7
 8004278:	8b60c8b3 	.word	0x8b60c8b3
 800427c:	3fc68a28 	.word	0x3fc68a28
 8004280:	509f79fb 	.word	0x509f79fb
 8004284:	3fd34413 	.word	0x3fd34413
 8004288:	080067c5 	.word	0x080067c5
 800428c:	080067dc 	.word	0x080067dc
 8004290:	7ff00000 	.word	0x7ff00000
 8004294:	080067c1 	.word	0x080067c1
 8004298:	080067b8 	.word	0x080067b8
 800429c:	08006795 	.word	0x08006795
 80042a0:	3ff80000 	.word	0x3ff80000
 80042a4:	080068c8 	.word	0x080068c8
 80042a8:	08006834 	.word	0x08006834
 80042ac:	2301      	movs	r3, #1
 80042ae:	9309      	str	r3, [sp, #36]	; 0x24
 80042b0:	e7d7      	b.n	8004262 <_dtoa_r+0x2c2>
 80042b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042b4:	9301      	str	r3, [sp, #4]
 80042b6:	9304      	str	r3, [sp, #16]
 80042b8:	e7ba      	b.n	8004230 <_dtoa_r+0x290>
 80042ba:	3101      	adds	r1, #1
 80042bc:	0052      	lsls	r2, r2, #1
 80042be:	e7ba      	b.n	8004236 <_dtoa_r+0x296>
 80042c0:	69e3      	ldr	r3, [r4, #28]
 80042c2:	9a00      	ldr	r2, [sp, #0]
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	9b04      	ldr	r3, [sp, #16]
 80042c8:	2b0e      	cmp	r3, #14
 80042ca:	f200 80a8 	bhi.w	800441e <_dtoa_r+0x47e>
 80042ce:	2d00      	cmp	r5, #0
 80042d0:	f000 80a5 	beq.w	800441e <_dtoa_r+0x47e>
 80042d4:	f1bb 0f00 	cmp.w	fp, #0
 80042d8:	dd38      	ble.n	800434c <_dtoa_r+0x3ac>
 80042da:	4bc0      	ldr	r3, [pc, #768]	; (80045dc <_dtoa_r+0x63c>)
 80042dc:	f00b 020f 	and.w	r2, fp, #15
 80042e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80042e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80042e8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80042ec:	ea4f 182b 	mov.w	r8, fp, asr #4
 80042f0:	d019      	beq.n	8004326 <_dtoa_r+0x386>
 80042f2:	4bbb      	ldr	r3, [pc, #748]	; (80045e0 <_dtoa_r+0x640>)
 80042f4:	ec51 0b18 	vmov	r0, r1, d8
 80042f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80042fc:	f7fc faae 	bl	800085c <__aeabi_ddiv>
 8004300:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004304:	f008 080f 	and.w	r8, r8, #15
 8004308:	2503      	movs	r5, #3
 800430a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80045e0 <_dtoa_r+0x640>
 800430e:	f1b8 0f00 	cmp.w	r8, #0
 8004312:	d10a      	bne.n	800432a <_dtoa_r+0x38a>
 8004314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004318:	4632      	mov	r2, r6
 800431a:	463b      	mov	r3, r7
 800431c:	f7fc fa9e 	bl	800085c <__aeabi_ddiv>
 8004320:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004324:	e02b      	b.n	800437e <_dtoa_r+0x3de>
 8004326:	2502      	movs	r5, #2
 8004328:	e7ef      	b.n	800430a <_dtoa_r+0x36a>
 800432a:	f018 0f01 	tst.w	r8, #1
 800432e:	d008      	beq.n	8004342 <_dtoa_r+0x3a2>
 8004330:	4630      	mov	r0, r6
 8004332:	4639      	mov	r1, r7
 8004334:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004338:	f7fc f966 	bl	8000608 <__aeabi_dmul>
 800433c:	3501      	adds	r5, #1
 800433e:	4606      	mov	r6, r0
 8004340:	460f      	mov	r7, r1
 8004342:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004346:	f109 0908 	add.w	r9, r9, #8
 800434a:	e7e0      	b.n	800430e <_dtoa_r+0x36e>
 800434c:	f000 809f 	beq.w	800448e <_dtoa_r+0x4ee>
 8004350:	f1cb 0600 	rsb	r6, fp, #0
 8004354:	4ba1      	ldr	r3, [pc, #644]	; (80045dc <_dtoa_r+0x63c>)
 8004356:	4fa2      	ldr	r7, [pc, #648]	; (80045e0 <_dtoa_r+0x640>)
 8004358:	f006 020f 	and.w	r2, r6, #15
 800435c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	ec51 0b18 	vmov	r0, r1, d8
 8004368:	f7fc f94e 	bl	8000608 <__aeabi_dmul>
 800436c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004370:	1136      	asrs	r6, r6, #4
 8004372:	2300      	movs	r3, #0
 8004374:	2502      	movs	r5, #2
 8004376:	2e00      	cmp	r6, #0
 8004378:	d17e      	bne.n	8004478 <_dtoa_r+0x4d8>
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1d0      	bne.n	8004320 <_dtoa_r+0x380>
 800437e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004380:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 8084 	beq.w	8004492 <_dtoa_r+0x4f2>
 800438a:	4b96      	ldr	r3, [pc, #600]	; (80045e4 <_dtoa_r+0x644>)
 800438c:	2200      	movs	r2, #0
 800438e:	4640      	mov	r0, r8
 8004390:	4649      	mov	r1, r9
 8004392:	f7fc fbab 	bl	8000aec <__aeabi_dcmplt>
 8004396:	2800      	cmp	r0, #0
 8004398:	d07b      	beq.n	8004492 <_dtoa_r+0x4f2>
 800439a:	9b04      	ldr	r3, [sp, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d078      	beq.n	8004492 <_dtoa_r+0x4f2>
 80043a0:	9b01      	ldr	r3, [sp, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	dd39      	ble.n	800441a <_dtoa_r+0x47a>
 80043a6:	4b90      	ldr	r3, [pc, #576]	; (80045e8 <_dtoa_r+0x648>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	4640      	mov	r0, r8
 80043ac:	4649      	mov	r1, r9
 80043ae:	f7fc f92b 	bl	8000608 <__aeabi_dmul>
 80043b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043b6:	9e01      	ldr	r6, [sp, #4]
 80043b8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80043bc:	3501      	adds	r5, #1
 80043be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80043c2:	4628      	mov	r0, r5
 80043c4:	f7fc f8b6 	bl	8000534 <__aeabi_i2d>
 80043c8:	4642      	mov	r2, r8
 80043ca:	464b      	mov	r3, r9
 80043cc:	f7fc f91c 	bl	8000608 <__aeabi_dmul>
 80043d0:	4b86      	ldr	r3, [pc, #536]	; (80045ec <_dtoa_r+0x64c>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	f7fb ff62 	bl	800029c <__adddf3>
 80043d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80043dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043e0:	9303      	str	r3, [sp, #12]
 80043e2:	2e00      	cmp	r6, #0
 80043e4:	d158      	bne.n	8004498 <_dtoa_r+0x4f8>
 80043e6:	4b82      	ldr	r3, [pc, #520]	; (80045f0 <_dtoa_r+0x650>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	4640      	mov	r0, r8
 80043ec:	4649      	mov	r1, r9
 80043ee:	f7fb ff53 	bl	8000298 <__aeabi_dsub>
 80043f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80043f6:	4680      	mov	r8, r0
 80043f8:	4689      	mov	r9, r1
 80043fa:	f7fc fb95 	bl	8000b28 <__aeabi_dcmpgt>
 80043fe:	2800      	cmp	r0, #0
 8004400:	f040 8296 	bne.w	8004930 <_dtoa_r+0x990>
 8004404:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004408:	4640      	mov	r0, r8
 800440a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800440e:	4649      	mov	r1, r9
 8004410:	f7fc fb6c 	bl	8000aec <__aeabi_dcmplt>
 8004414:	2800      	cmp	r0, #0
 8004416:	f040 8289 	bne.w	800492c <_dtoa_r+0x98c>
 800441a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800441e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004420:	2b00      	cmp	r3, #0
 8004422:	f2c0 814e 	blt.w	80046c2 <_dtoa_r+0x722>
 8004426:	f1bb 0f0e 	cmp.w	fp, #14
 800442a:	f300 814a 	bgt.w	80046c2 <_dtoa_r+0x722>
 800442e:	4b6b      	ldr	r3, [pc, #428]	; (80045dc <_dtoa_r+0x63c>)
 8004430:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004434:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800443a:	2b00      	cmp	r3, #0
 800443c:	f280 80dc 	bge.w	80045f8 <_dtoa_r+0x658>
 8004440:	9b04      	ldr	r3, [sp, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	f300 80d8 	bgt.w	80045f8 <_dtoa_r+0x658>
 8004448:	f040 826f 	bne.w	800492a <_dtoa_r+0x98a>
 800444c:	4b68      	ldr	r3, [pc, #416]	; (80045f0 <_dtoa_r+0x650>)
 800444e:	2200      	movs	r2, #0
 8004450:	4640      	mov	r0, r8
 8004452:	4649      	mov	r1, r9
 8004454:	f7fc f8d8 	bl	8000608 <__aeabi_dmul>
 8004458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800445c:	f7fc fb5a 	bl	8000b14 <__aeabi_dcmpge>
 8004460:	9e04      	ldr	r6, [sp, #16]
 8004462:	4637      	mov	r7, r6
 8004464:	2800      	cmp	r0, #0
 8004466:	f040 8245 	bne.w	80048f4 <_dtoa_r+0x954>
 800446a:	9d00      	ldr	r5, [sp, #0]
 800446c:	2331      	movs	r3, #49	; 0x31
 800446e:	f805 3b01 	strb.w	r3, [r5], #1
 8004472:	f10b 0b01 	add.w	fp, fp, #1
 8004476:	e241      	b.n	80048fc <_dtoa_r+0x95c>
 8004478:	07f2      	lsls	r2, r6, #31
 800447a:	d505      	bpl.n	8004488 <_dtoa_r+0x4e8>
 800447c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004480:	f7fc f8c2 	bl	8000608 <__aeabi_dmul>
 8004484:	3501      	adds	r5, #1
 8004486:	2301      	movs	r3, #1
 8004488:	1076      	asrs	r6, r6, #1
 800448a:	3708      	adds	r7, #8
 800448c:	e773      	b.n	8004376 <_dtoa_r+0x3d6>
 800448e:	2502      	movs	r5, #2
 8004490:	e775      	b.n	800437e <_dtoa_r+0x3de>
 8004492:	9e04      	ldr	r6, [sp, #16]
 8004494:	465f      	mov	r7, fp
 8004496:	e792      	b.n	80043be <_dtoa_r+0x41e>
 8004498:	9900      	ldr	r1, [sp, #0]
 800449a:	4b50      	ldr	r3, [pc, #320]	; (80045dc <_dtoa_r+0x63c>)
 800449c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80044a0:	4431      	add	r1, r6
 80044a2:	9102      	str	r1, [sp, #8]
 80044a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044a6:	eeb0 9a47 	vmov.f32	s18, s14
 80044aa:	eef0 9a67 	vmov.f32	s19, s15
 80044ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80044b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80044b6:	2900      	cmp	r1, #0
 80044b8:	d044      	beq.n	8004544 <_dtoa_r+0x5a4>
 80044ba:	494e      	ldr	r1, [pc, #312]	; (80045f4 <_dtoa_r+0x654>)
 80044bc:	2000      	movs	r0, #0
 80044be:	f7fc f9cd 	bl	800085c <__aeabi_ddiv>
 80044c2:	ec53 2b19 	vmov	r2, r3, d9
 80044c6:	f7fb fee7 	bl	8000298 <__aeabi_dsub>
 80044ca:	9d00      	ldr	r5, [sp, #0]
 80044cc:	ec41 0b19 	vmov	d9, r0, r1
 80044d0:	4649      	mov	r1, r9
 80044d2:	4640      	mov	r0, r8
 80044d4:	f7fc fb48 	bl	8000b68 <__aeabi_d2iz>
 80044d8:	4606      	mov	r6, r0
 80044da:	f7fc f82b 	bl	8000534 <__aeabi_i2d>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4640      	mov	r0, r8
 80044e4:	4649      	mov	r1, r9
 80044e6:	f7fb fed7 	bl	8000298 <__aeabi_dsub>
 80044ea:	3630      	adds	r6, #48	; 0x30
 80044ec:	f805 6b01 	strb.w	r6, [r5], #1
 80044f0:	ec53 2b19 	vmov	r2, r3, d9
 80044f4:	4680      	mov	r8, r0
 80044f6:	4689      	mov	r9, r1
 80044f8:	f7fc faf8 	bl	8000aec <__aeabi_dcmplt>
 80044fc:	2800      	cmp	r0, #0
 80044fe:	d164      	bne.n	80045ca <_dtoa_r+0x62a>
 8004500:	4642      	mov	r2, r8
 8004502:	464b      	mov	r3, r9
 8004504:	4937      	ldr	r1, [pc, #220]	; (80045e4 <_dtoa_r+0x644>)
 8004506:	2000      	movs	r0, #0
 8004508:	f7fb fec6 	bl	8000298 <__aeabi_dsub>
 800450c:	ec53 2b19 	vmov	r2, r3, d9
 8004510:	f7fc faec 	bl	8000aec <__aeabi_dcmplt>
 8004514:	2800      	cmp	r0, #0
 8004516:	f040 80b6 	bne.w	8004686 <_dtoa_r+0x6e6>
 800451a:	9b02      	ldr	r3, [sp, #8]
 800451c:	429d      	cmp	r5, r3
 800451e:	f43f af7c 	beq.w	800441a <_dtoa_r+0x47a>
 8004522:	4b31      	ldr	r3, [pc, #196]	; (80045e8 <_dtoa_r+0x648>)
 8004524:	ec51 0b19 	vmov	r0, r1, d9
 8004528:	2200      	movs	r2, #0
 800452a:	f7fc f86d 	bl	8000608 <__aeabi_dmul>
 800452e:	4b2e      	ldr	r3, [pc, #184]	; (80045e8 <_dtoa_r+0x648>)
 8004530:	ec41 0b19 	vmov	d9, r0, r1
 8004534:	2200      	movs	r2, #0
 8004536:	4640      	mov	r0, r8
 8004538:	4649      	mov	r1, r9
 800453a:	f7fc f865 	bl	8000608 <__aeabi_dmul>
 800453e:	4680      	mov	r8, r0
 8004540:	4689      	mov	r9, r1
 8004542:	e7c5      	b.n	80044d0 <_dtoa_r+0x530>
 8004544:	ec51 0b17 	vmov	r0, r1, d7
 8004548:	f7fc f85e 	bl	8000608 <__aeabi_dmul>
 800454c:	9b02      	ldr	r3, [sp, #8]
 800454e:	9d00      	ldr	r5, [sp, #0]
 8004550:	930f      	str	r3, [sp, #60]	; 0x3c
 8004552:	ec41 0b19 	vmov	d9, r0, r1
 8004556:	4649      	mov	r1, r9
 8004558:	4640      	mov	r0, r8
 800455a:	f7fc fb05 	bl	8000b68 <__aeabi_d2iz>
 800455e:	4606      	mov	r6, r0
 8004560:	f7fb ffe8 	bl	8000534 <__aeabi_i2d>
 8004564:	3630      	adds	r6, #48	; 0x30
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4640      	mov	r0, r8
 800456c:	4649      	mov	r1, r9
 800456e:	f7fb fe93 	bl	8000298 <__aeabi_dsub>
 8004572:	f805 6b01 	strb.w	r6, [r5], #1
 8004576:	9b02      	ldr	r3, [sp, #8]
 8004578:	429d      	cmp	r5, r3
 800457a:	4680      	mov	r8, r0
 800457c:	4689      	mov	r9, r1
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	d124      	bne.n	80045ce <_dtoa_r+0x62e>
 8004584:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <_dtoa_r+0x654>)
 8004586:	ec51 0b19 	vmov	r0, r1, d9
 800458a:	f7fb fe87 	bl	800029c <__adddf3>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4640      	mov	r0, r8
 8004594:	4649      	mov	r1, r9
 8004596:	f7fc fac7 	bl	8000b28 <__aeabi_dcmpgt>
 800459a:	2800      	cmp	r0, #0
 800459c:	d173      	bne.n	8004686 <_dtoa_r+0x6e6>
 800459e:	ec53 2b19 	vmov	r2, r3, d9
 80045a2:	4914      	ldr	r1, [pc, #80]	; (80045f4 <_dtoa_r+0x654>)
 80045a4:	2000      	movs	r0, #0
 80045a6:	f7fb fe77 	bl	8000298 <__aeabi_dsub>
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	4640      	mov	r0, r8
 80045b0:	4649      	mov	r1, r9
 80045b2:	f7fc fa9b 	bl	8000aec <__aeabi_dcmplt>
 80045b6:	2800      	cmp	r0, #0
 80045b8:	f43f af2f 	beq.w	800441a <_dtoa_r+0x47a>
 80045bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80045be:	1e6b      	subs	r3, r5, #1
 80045c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80045c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80045c6:	2b30      	cmp	r3, #48	; 0x30
 80045c8:	d0f8      	beq.n	80045bc <_dtoa_r+0x61c>
 80045ca:	46bb      	mov	fp, r7
 80045cc:	e04a      	b.n	8004664 <_dtoa_r+0x6c4>
 80045ce:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <_dtoa_r+0x648>)
 80045d0:	f7fc f81a 	bl	8000608 <__aeabi_dmul>
 80045d4:	4680      	mov	r8, r0
 80045d6:	4689      	mov	r9, r1
 80045d8:	e7bd      	b.n	8004556 <_dtoa_r+0x5b6>
 80045da:	bf00      	nop
 80045dc:	080068c8 	.word	0x080068c8
 80045e0:	080068a0 	.word	0x080068a0
 80045e4:	3ff00000 	.word	0x3ff00000
 80045e8:	40240000 	.word	0x40240000
 80045ec:	401c0000 	.word	0x401c0000
 80045f0:	40140000 	.word	0x40140000
 80045f4:	3fe00000 	.word	0x3fe00000
 80045f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80045fc:	9d00      	ldr	r5, [sp, #0]
 80045fe:	4642      	mov	r2, r8
 8004600:	464b      	mov	r3, r9
 8004602:	4630      	mov	r0, r6
 8004604:	4639      	mov	r1, r7
 8004606:	f7fc f929 	bl	800085c <__aeabi_ddiv>
 800460a:	f7fc faad 	bl	8000b68 <__aeabi_d2iz>
 800460e:	9001      	str	r0, [sp, #4]
 8004610:	f7fb ff90 	bl	8000534 <__aeabi_i2d>
 8004614:	4642      	mov	r2, r8
 8004616:	464b      	mov	r3, r9
 8004618:	f7fb fff6 	bl	8000608 <__aeabi_dmul>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4630      	mov	r0, r6
 8004622:	4639      	mov	r1, r7
 8004624:	f7fb fe38 	bl	8000298 <__aeabi_dsub>
 8004628:	9e01      	ldr	r6, [sp, #4]
 800462a:	9f04      	ldr	r7, [sp, #16]
 800462c:	3630      	adds	r6, #48	; 0x30
 800462e:	f805 6b01 	strb.w	r6, [r5], #1
 8004632:	9e00      	ldr	r6, [sp, #0]
 8004634:	1bae      	subs	r6, r5, r6
 8004636:	42b7      	cmp	r7, r6
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	d134      	bne.n	80046a8 <_dtoa_r+0x708>
 800463e:	f7fb fe2d 	bl	800029c <__adddf3>
 8004642:	4642      	mov	r2, r8
 8004644:	464b      	mov	r3, r9
 8004646:	4606      	mov	r6, r0
 8004648:	460f      	mov	r7, r1
 800464a:	f7fc fa6d 	bl	8000b28 <__aeabi_dcmpgt>
 800464e:	b9c8      	cbnz	r0, 8004684 <_dtoa_r+0x6e4>
 8004650:	4642      	mov	r2, r8
 8004652:	464b      	mov	r3, r9
 8004654:	4630      	mov	r0, r6
 8004656:	4639      	mov	r1, r7
 8004658:	f7fc fa3e 	bl	8000ad8 <__aeabi_dcmpeq>
 800465c:	b110      	cbz	r0, 8004664 <_dtoa_r+0x6c4>
 800465e:	9b01      	ldr	r3, [sp, #4]
 8004660:	07db      	lsls	r3, r3, #31
 8004662:	d40f      	bmi.n	8004684 <_dtoa_r+0x6e4>
 8004664:	4651      	mov	r1, sl
 8004666:	4620      	mov	r0, r4
 8004668:	f000 fbcc 	bl	8004e04 <_Bfree>
 800466c:	2300      	movs	r3, #0
 800466e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004670:	702b      	strb	r3, [r5, #0]
 8004672:	f10b 0301 	add.w	r3, fp, #1
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800467a:	2b00      	cmp	r3, #0
 800467c:	f43f ace2 	beq.w	8004044 <_dtoa_r+0xa4>
 8004680:	601d      	str	r5, [r3, #0]
 8004682:	e4df      	b.n	8004044 <_dtoa_r+0xa4>
 8004684:	465f      	mov	r7, fp
 8004686:	462b      	mov	r3, r5
 8004688:	461d      	mov	r5, r3
 800468a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800468e:	2a39      	cmp	r2, #57	; 0x39
 8004690:	d106      	bne.n	80046a0 <_dtoa_r+0x700>
 8004692:	9a00      	ldr	r2, [sp, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d1f7      	bne.n	8004688 <_dtoa_r+0x6e8>
 8004698:	9900      	ldr	r1, [sp, #0]
 800469a:	2230      	movs	r2, #48	; 0x30
 800469c:	3701      	adds	r7, #1
 800469e:	700a      	strb	r2, [r1, #0]
 80046a0:	781a      	ldrb	r2, [r3, #0]
 80046a2:	3201      	adds	r2, #1
 80046a4:	701a      	strb	r2, [r3, #0]
 80046a6:	e790      	b.n	80045ca <_dtoa_r+0x62a>
 80046a8:	4ba3      	ldr	r3, [pc, #652]	; (8004938 <_dtoa_r+0x998>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	f7fb ffac 	bl	8000608 <__aeabi_dmul>
 80046b0:	2200      	movs	r2, #0
 80046b2:	2300      	movs	r3, #0
 80046b4:	4606      	mov	r6, r0
 80046b6:	460f      	mov	r7, r1
 80046b8:	f7fc fa0e 	bl	8000ad8 <__aeabi_dcmpeq>
 80046bc:	2800      	cmp	r0, #0
 80046be:	d09e      	beq.n	80045fe <_dtoa_r+0x65e>
 80046c0:	e7d0      	b.n	8004664 <_dtoa_r+0x6c4>
 80046c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046c4:	2a00      	cmp	r2, #0
 80046c6:	f000 80ca 	beq.w	800485e <_dtoa_r+0x8be>
 80046ca:	9a07      	ldr	r2, [sp, #28]
 80046cc:	2a01      	cmp	r2, #1
 80046ce:	f300 80ad 	bgt.w	800482c <_dtoa_r+0x88c>
 80046d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046d4:	2a00      	cmp	r2, #0
 80046d6:	f000 80a5 	beq.w	8004824 <_dtoa_r+0x884>
 80046da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80046de:	9e08      	ldr	r6, [sp, #32]
 80046e0:	9d05      	ldr	r5, [sp, #20]
 80046e2:	9a05      	ldr	r2, [sp, #20]
 80046e4:	441a      	add	r2, r3
 80046e6:	9205      	str	r2, [sp, #20]
 80046e8:	9a06      	ldr	r2, [sp, #24]
 80046ea:	2101      	movs	r1, #1
 80046ec:	441a      	add	r2, r3
 80046ee:	4620      	mov	r0, r4
 80046f0:	9206      	str	r2, [sp, #24]
 80046f2:	f000 fc3d 	bl	8004f70 <__i2b>
 80046f6:	4607      	mov	r7, r0
 80046f8:	b165      	cbz	r5, 8004714 <_dtoa_r+0x774>
 80046fa:	9b06      	ldr	r3, [sp, #24]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	dd09      	ble.n	8004714 <_dtoa_r+0x774>
 8004700:	42ab      	cmp	r3, r5
 8004702:	9a05      	ldr	r2, [sp, #20]
 8004704:	bfa8      	it	ge
 8004706:	462b      	movge	r3, r5
 8004708:	1ad2      	subs	r2, r2, r3
 800470a:	9205      	str	r2, [sp, #20]
 800470c:	9a06      	ldr	r2, [sp, #24]
 800470e:	1aed      	subs	r5, r5, r3
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	9306      	str	r3, [sp, #24]
 8004714:	9b08      	ldr	r3, [sp, #32]
 8004716:	b1f3      	cbz	r3, 8004756 <_dtoa_r+0x7b6>
 8004718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 80a3 	beq.w	8004866 <_dtoa_r+0x8c6>
 8004720:	2e00      	cmp	r6, #0
 8004722:	dd10      	ble.n	8004746 <_dtoa_r+0x7a6>
 8004724:	4639      	mov	r1, r7
 8004726:	4632      	mov	r2, r6
 8004728:	4620      	mov	r0, r4
 800472a:	f000 fce1 	bl	80050f0 <__pow5mult>
 800472e:	4652      	mov	r2, sl
 8004730:	4601      	mov	r1, r0
 8004732:	4607      	mov	r7, r0
 8004734:	4620      	mov	r0, r4
 8004736:	f000 fc31 	bl	8004f9c <__multiply>
 800473a:	4651      	mov	r1, sl
 800473c:	4680      	mov	r8, r0
 800473e:	4620      	mov	r0, r4
 8004740:	f000 fb60 	bl	8004e04 <_Bfree>
 8004744:	46c2      	mov	sl, r8
 8004746:	9b08      	ldr	r3, [sp, #32]
 8004748:	1b9a      	subs	r2, r3, r6
 800474a:	d004      	beq.n	8004756 <_dtoa_r+0x7b6>
 800474c:	4651      	mov	r1, sl
 800474e:	4620      	mov	r0, r4
 8004750:	f000 fcce 	bl	80050f0 <__pow5mult>
 8004754:	4682      	mov	sl, r0
 8004756:	2101      	movs	r1, #1
 8004758:	4620      	mov	r0, r4
 800475a:	f000 fc09 	bl	8004f70 <__i2b>
 800475e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004760:	2b00      	cmp	r3, #0
 8004762:	4606      	mov	r6, r0
 8004764:	f340 8081 	ble.w	800486a <_dtoa_r+0x8ca>
 8004768:	461a      	mov	r2, r3
 800476a:	4601      	mov	r1, r0
 800476c:	4620      	mov	r0, r4
 800476e:	f000 fcbf 	bl	80050f0 <__pow5mult>
 8004772:	9b07      	ldr	r3, [sp, #28]
 8004774:	2b01      	cmp	r3, #1
 8004776:	4606      	mov	r6, r0
 8004778:	dd7a      	ble.n	8004870 <_dtoa_r+0x8d0>
 800477a:	f04f 0800 	mov.w	r8, #0
 800477e:	6933      	ldr	r3, [r6, #16]
 8004780:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004784:	6918      	ldr	r0, [r3, #16]
 8004786:	f000 fba5 	bl	8004ed4 <__hi0bits>
 800478a:	f1c0 0020 	rsb	r0, r0, #32
 800478e:	9b06      	ldr	r3, [sp, #24]
 8004790:	4418      	add	r0, r3
 8004792:	f010 001f 	ands.w	r0, r0, #31
 8004796:	f000 8094 	beq.w	80048c2 <_dtoa_r+0x922>
 800479a:	f1c0 0320 	rsb	r3, r0, #32
 800479e:	2b04      	cmp	r3, #4
 80047a0:	f340 8085 	ble.w	80048ae <_dtoa_r+0x90e>
 80047a4:	9b05      	ldr	r3, [sp, #20]
 80047a6:	f1c0 001c 	rsb	r0, r0, #28
 80047aa:	4403      	add	r3, r0
 80047ac:	9305      	str	r3, [sp, #20]
 80047ae:	9b06      	ldr	r3, [sp, #24]
 80047b0:	4403      	add	r3, r0
 80047b2:	4405      	add	r5, r0
 80047b4:	9306      	str	r3, [sp, #24]
 80047b6:	9b05      	ldr	r3, [sp, #20]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	dd05      	ble.n	80047c8 <_dtoa_r+0x828>
 80047bc:	4651      	mov	r1, sl
 80047be:	461a      	mov	r2, r3
 80047c0:	4620      	mov	r0, r4
 80047c2:	f000 fcef 	bl	80051a4 <__lshift>
 80047c6:	4682      	mov	sl, r0
 80047c8:	9b06      	ldr	r3, [sp, #24]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	dd05      	ble.n	80047da <_dtoa_r+0x83a>
 80047ce:	4631      	mov	r1, r6
 80047d0:	461a      	mov	r2, r3
 80047d2:	4620      	mov	r0, r4
 80047d4:	f000 fce6 	bl	80051a4 <__lshift>
 80047d8:	4606      	mov	r6, r0
 80047da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d072      	beq.n	80048c6 <_dtoa_r+0x926>
 80047e0:	4631      	mov	r1, r6
 80047e2:	4650      	mov	r0, sl
 80047e4:	f000 fd4a 	bl	800527c <__mcmp>
 80047e8:	2800      	cmp	r0, #0
 80047ea:	da6c      	bge.n	80048c6 <_dtoa_r+0x926>
 80047ec:	2300      	movs	r3, #0
 80047ee:	4651      	mov	r1, sl
 80047f0:	220a      	movs	r2, #10
 80047f2:	4620      	mov	r0, r4
 80047f4:	f000 fb28 	bl	8004e48 <__multadd>
 80047f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80047fe:	4682      	mov	sl, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 81b0 	beq.w	8004b66 <_dtoa_r+0xbc6>
 8004806:	2300      	movs	r3, #0
 8004808:	4639      	mov	r1, r7
 800480a:	220a      	movs	r2, #10
 800480c:	4620      	mov	r0, r4
 800480e:	f000 fb1b 	bl	8004e48 <__multadd>
 8004812:	9b01      	ldr	r3, [sp, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	4607      	mov	r7, r0
 8004818:	f300 8096 	bgt.w	8004948 <_dtoa_r+0x9a8>
 800481c:	9b07      	ldr	r3, [sp, #28]
 800481e:	2b02      	cmp	r3, #2
 8004820:	dc59      	bgt.n	80048d6 <_dtoa_r+0x936>
 8004822:	e091      	b.n	8004948 <_dtoa_r+0x9a8>
 8004824:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004826:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800482a:	e758      	b.n	80046de <_dtoa_r+0x73e>
 800482c:	9b04      	ldr	r3, [sp, #16]
 800482e:	1e5e      	subs	r6, r3, #1
 8004830:	9b08      	ldr	r3, [sp, #32]
 8004832:	42b3      	cmp	r3, r6
 8004834:	bfbf      	itttt	lt
 8004836:	9b08      	ldrlt	r3, [sp, #32]
 8004838:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800483a:	9608      	strlt	r6, [sp, #32]
 800483c:	1af3      	sublt	r3, r6, r3
 800483e:	bfb4      	ite	lt
 8004840:	18d2      	addlt	r2, r2, r3
 8004842:	1b9e      	subge	r6, r3, r6
 8004844:	9b04      	ldr	r3, [sp, #16]
 8004846:	bfbc      	itt	lt
 8004848:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800484a:	2600      	movlt	r6, #0
 800484c:	2b00      	cmp	r3, #0
 800484e:	bfb7      	itett	lt
 8004850:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8004854:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004858:	1a9d      	sublt	r5, r3, r2
 800485a:	2300      	movlt	r3, #0
 800485c:	e741      	b.n	80046e2 <_dtoa_r+0x742>
 800485e:	9e08      	ldr	r6, [sp, #32]
 8004860:	9d05      	ldr	r5, [sp, #20]
 8004862:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004864:	e748      	b.n	80046f8 <_dtoa_r+0x758>
 8004866:	9a08      	ldr	r2, [sp, #32]
 8004868:	e770      	b.n	800474c <_dtoa_r+0x7ac>
 800486a:	9b07      	ldr	r3, [sp, #28]
 800486c:	2b01      	cmp	r3, #1
 800486e:	dc19      	bgt.n	80048a4 <_dtoa_r+0x904>
 8004870:	9b02      	ldr	r3, [sp, #8]
 8004872:	b9bb      	cbnz	r3, 80048a4 <_dtoa_r+0x904>
 8004874:	9b03      	ldr	r3, [sp, #12]
 8004876:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800487a:	b99b      	cbnz	r3, 80048a4 <_dtoa_r+0x904>
 800487c:	9b03      	ldr	r3, [sp, #12]
 800487e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004882:	0d1b      	lsrs	r3, r3, #20
 8004884:	051b      	lsls	r3, r3, #20
 8004886:	b183      	cbz	r3, 80048aa <_dtoa_r+0x90a>
 8004888:	9b05      	ldr	r3, [sp, #20]
 800488a:	3301      	adds	r3, #1
 800488c:	9305      	str	r3, [sp, #20]
 800488e:	9b06      	ldr	r3, [sp, #24]
 8004890:	3301      	adds	r3, #1
 8004892:	9306      	str	r3, [sp, #24]
 8004894:	f04f 0801 	mov.w	r8, #1
 8004898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800489a:	2b00      	cmp	r3, #0
 800489c:	f47f af6f 	bne.w	800477e <_dtoa_r+0x7de>
 80048a0:	2001      	movs	r0, #1
 80048a2:	e774      	b.n	800478e <_dtoa_r+0x7ee>
 80048a4:	f04f 0800 	mov.w	r8, #0
 80048a8:	e7f6      	b.n	8004898 <_dtoa_r+0x8f8>
 80048aa:	4698      	mov	r8, r3
 80048ac:	e7f4      	b.n	8004898 <_dtoa_r+0x8f8>
 80048ae:	d082      	beq.n	80047b6 <_dtoa_r+0x816>
 80048b0:	9a05      	ldr	r2, [sp, #20]
 80048b2:	331c      	adds	r3, #28
 80048b4:	441a      	add	r2, r3
 80048b6:	9205      	str	r2, [sp, #20]
 80048b8:	9a06      	ldr	r2, [sp, #24]
 80048ba:	441a      	add	r2, r3
 80048bc:	441d      	add	r5, r3
 80048be:	9206      	str	r2, [sp, #24]
 80048c0:	e779      	b.n	80047b6 <_dtoa_r+0x816>
 80048c2:	4603      	mov	r3, r0
 80048c4:	e7f4      	b.n	80048b0 <_dtoa_r+0x910>
 80048c6:	9b04      	ldr	r3, [sp, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	dc37      	bgt.n	800493c <_dtoa_r+0x99c>
 80048cc:	9b07      	ldr	r3, [sp, #28]
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	dd34      	ble.n	800493c <_dtoa_r+0x99c>
 80048d2:	9b04      	ldr	r3, [sp, #16]
 80048d4:	9301      	str	r3, [sp, #4]
 80048d6:	9b01      	ldr	r3, [sp, #4]
 80048d8:	b963      	cbnz	r3, 80048f4 <_dtoa_r+0x954>
 80048da:	4631      	mov	r1, r6
 80048dc:	2205      	movs	r2, #5
 80048de:	4620      	mov	r0, r4
 80048e0:	f000 fab2 	bl	8004e48 <__multadd>
 80048e4:	4601      	mov	r1, r0
 80048e6:	4606      	mov	r6, r0
 80048e8:	4650      	mov	r0, sl
 80048ea:	f000 fcc7 	bl	800527c <__mcmp>
 80048ee:	2800      	cmp	r0, #0
 80048f0:	f73f adbb 	bgt.w	800446a <_dtoa_r+0x4ca>
 80048f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048f6:	9d00      	ldr	r5, [sp, #0]
 80048f8:	ea6f 0b03 	mvn.w	fp, r3
 80048fc:	f04f 0800 	mov.w	r8, #0
 8004900:	4631      	mov	r1, r6
 8004902:	4620      	mov	r0, r4
 8004904:	f000 fa7e 	bl	8004e04 <_Bfree>
 8004908:	2f00      	cmp	r7, #0
 800490a:	f43f aeab 	beq.w	8004664 <_dtoa_r+0x6c4>
 800490e:	f1b8 0f00 	cmp.w	r8, #0
 8004912:	d005      	beq.n	8004920 <_dtoa_r+0x980>
 8004914:	45b8      	cmp	r8, r7
 8004916:	d003      	beq.n	8004920 <_dtoa_r+0x980>
 8004918:	4641      	mov	r1, r8
 800491a:	4620      	mov	r0, r4
 800491c:	f000 fa72 	bl	8004e04 <_Bfree>
 8004920:	4639      	mov	r1, r7
 8004922:	4620      	mov	r0, r4
 8004924:	f000 fa6e 	bl	8004e04 <_Bfree>
 8004928:	e69c      	b.n	8004664 <_dtoa_r+0x6c4>
 800492a:	2600      	movs	r6, #0
 800492c:	4637      	mov	r7, r6
 800492e:	e7e1      	b.n	80048f4 <_dtoa_r+0x954>
 8004930:	46bb      	mov	fp, r7
 8004932:	4637      	mov	r7, r6
 8004934:	e599      	b.n	800446a <_dtoa_r+0x4ca>
 8004936:	bf00      	nop
 8004938:	40240000 	.word	0x40240000
 800493c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 80c8 	beq.w	8004ad4 <_dtoa_r+0xb34>
 8004944:	9b04      	ldr	r3, [sp, #16]
 8004946:	9301      	str	r3, [sp, #4]
 8004948:	2d00      	cmp	r5, #0
 800494a:	dd05      	ble.n	8004958 <_dtoa_r+0x9b8>
 800494c:	4639      	mov	r1, r7
 800494e:	462a      	mov	r2, r5
 8004950:	4620      	mov	r0, r4
 8004952:	f000 fc27 	bl	80051a4 <__lshift>
 8004956:	4607      	mov	r7, r0
 8004958:	f1b8 0f00 	cmp.w	r8, #0
 800495c:	d05b      	beq.n	8004a16 <_dtoa_r+0xa76>
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	4620      	mov	r0, r4
 8004962:	f000 fa0f 	bl	8004d84 <_Balloc>
 8004966:	4605      	mov	r5, r0
 8004968:	b928      	cbnz	r0, 8004976 <_dtoa_r+0x9d6>
 800496a:	4b83      	ldr	r3, [pc, #524]	; (8004b78 <_dtoa_r+0xbd8>)
 800496c:	4602      	mov	r2, r0
 800496e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004972:	f7ff bb2e 	b.w	8003fd2 <_dtoa_r+0x32>
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	3202      	adds	r2, #2
 800497a:	0092      	lsls	r2, r2, #2
 800497c:	f107 010c 	add.w	r1, r7, #12
 8004980:	300c      	adds	r0, #12
 8004982:	f000 ffab 	bl	80058dc <memcpy>
 8004986:	2201      	movs	r2, #1
 8004988:	4629      	mov	r1, r5
 800498a:	4620      	mov	r0, r4
 800498c:	f000 fc0a 	bl	80051a4 <__lshift>
 8004990:	9b00      	ldr	r3, [sp, #0]
 8004992:	3301      	adds	r3, #1
 8004994:	9304      	str	r3, [sp, #16]
 8004996:	e9dd 2300 	ldrd	r2, r3, [sp]
 800499a:	4413      	add	r3, r2
 800499c:	9308      	str	r3, [sp, #32]
 800499e:	9b02      	ldr	r3, [sp, #8]
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	46b8      	mov	r8, r7
 80049a6:	9306      	str	r3, [sp, #24]
 80049a8:	4607      	mov	r7, r0
 80049aa:	9b04      	ldr	r3, [sp, #16]
 80049ac:	4631      	mov	r1, r6
 80049ae:	3b01      	subs	r3, #1
 80049b0:	4650      	mov	r0, sl
 80049b2:	9301      	str	r3, [sp, #4]
 80049b4:	f7ff fa6b 	bl	8003e8e <quorem>
 80049b8:	4641      	mov	r1, r8
 80049ba:	9002      	str	r0, [sp, #8]
 80049bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80049c0:	4650      	mov	r0, sl
 80049c2:	f000 fc5b 	bl	800527c <__mcmp>
 80049c6:	463a      	mov	r2, r7
 80049c8:	9005      	str	r0, [sp, #20]
 80049ca:	4631      	mov	r1, r6
 80049cc:	4620      	mov	r0, r4
 80049ce:	f000 fc71 	bl	80052b4 <__mdiff>
 80049d2:	68c2      	ldr	r2, [r0, #12]
 80049d4:	4605      	mov	r5, r0
 80049d6:	bb02      	cbnz	r2, 8004a1a <_dtoa_r+0xa7a>
 80049d8:	4601      	mov	r1, r0
 80049da:	4650      	mov	r0, sl
 80049dc:	f000 fc4e 	bl	800527c <__mcmp>
 80049e0:	4602      	mov	r2, r0
 80049e2:	4629      	mov	r1, r5
 80049e4:	4620      	mov	r0, r4
 80049e6:	9209      	str	r2, [sp, #36]	; 0x24
 80049e8:	f000 fa0c 	bl	8004e04 <_Bfree>
 80049ec:	9b07      	ldr	r3, [sp, #28]
 80049ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049f0:	9d04      	ldr	r5, [sp, #16]
 80049f2:	ea43 0102 	orr.w	r1, r3, r2
 80049f6:	9b06      	ldr	r3, [sp, #24]
 80049f8:	4319      	orrs	r1, r3
 80049fa:	d110      	bne.n	8004a1e <_dtoa_r+0xa7e>
 80049fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004a00:	d029      	beq.n	8004a56 <_dtoa_r+0xab6>
 8004a02:	9b05      	ldr	r3, [sp, #20]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	dd02      	ble.n	8004a0e <_dtoa_r+0xa6e>
 8004a08:	9b02      	ldr	r3, [sp, #8]
 8004a0a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004a0e:	9b01      	ldr	r3, [sp, #4]
 8004a10:	f883 9000 	strb.w	r9, [r3]
 8004a14:	e774      	b.n	8004900 <_dtoa_r+0x960>
 8004a16:	4638      	mov	r0, r7
 8004a18:	e7ba      	b.n	8004990 <_dtoa_r+0x9f0>
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	e7e1      	b.n	80049e2 <_dtoa_r+0xa42>
 8004a1e:	9b05      	ldr	r3, [sp, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	db04      	blt.n	8004a2e <_dtoa_r+0xa8e>
 8004a24:	9907      	ldr	r1, [sp, #28]
 8004a26:	430b      	orrs	r3, r1
 8004a28:	9906      	ldr	r1, [sp, #24]
 8004a2a:	430b      	orrs	r3, r1
 8004a2c:	d120      	bne.n	8004a70 <_dtoa_r+0xad0>
 8004a2e:	2a00      	cmp	r2, #0
 8004a30:	dded      	ble.n	8004a0e <_dtoa_r+0xa6e>
 8004a32:	4651      	mov	r1, sl
 8004a34:	2201      	movs	r2, #1
 8004a36:	4620      	mov	r0, r4
 8004a38:	f000 fbb4 	bl	80051a4 <__lshift>
 8004a3c:	4631      	mov	r1, r6
 8004a3e:	4682      	mov	sl, r0
 8004a40:	f000 fc1c 	bl	800527c <__mcmp>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	dc03      	bgt.n	8004a50 <_dtoa_r+0xab0>
 8004a48:	d1e1      	bne.n	8004a0e <_dtoa_r+0xa6e>
 8004a4a:	f019 0f01 	tst.w	r9, #1
 8004a4e:	d0de      	beq.n	8004a0e <_dtoa_r+0xa6e>
 8004a50:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004a54:	d1d8      	bne.n	8004a08 <_dtoa_r+0xa68>
 8004a56:	9a01      	ldr	r2, [sp, #4]
 8004a58:	2339      	movs	r3, #57	; 0x39
 8004a5a:	7013      	strb	r3, [r2, #0]
 8004a5c:	462b      	mov	r3, r5
 8004a5e:	461d      	mov	r5, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004a66:	2a39      	cmp	r2, #57	; 0x39
 8004a68:	d06c      	beq.n	8004b44 <_dtoa_r+0xba4>
 8004a6a:	3201      	adds	r2, #1
 8004a6c:	701a      	strb	r2, [r3, #0]
 8004a6e:	e747      	b.n	8004900 <_dtoa_r+0x960>
 8004a70:	2a00      	cmp	r2, #0
 8004a72:	dd07      	ble.n	8004a84 <_dtoa_r+0xae4>
 8004a74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004a78:	d0ed      	beq.n	8004a56 <_dtoa_r+0xab6>
 8004a7a:	9a01      	ldr	r2, [sp, #4]
 8004a7c:	f109 0301 	add.w	r3, r9, #1
 8004a80:	7013      	strb	r3, [r2, #0]
 8004a82:	e73d      	b.n	8004900 <_dtoa_r+0x960>
 8004a84:	9b04      	ldr	r3, [sp, #16]
 8004a86:	9a08      	ldr	r2, [sp, #32]
 8004a88:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d043      	beq.n	8004b18 <_dtoa_r+0xb78>
 8004a90:	4651      	mov	r1, sl
 8004a92:	2300      	movs	r3, #0
 8004a94:	220a      	movs	r2, #10
 8004a96:	4620      	mov	r0, r4
 8004a98:	f000 f9d6 	bl	8004e48 <__multadd>
 8004a9c:	45b8      	cmp	r8, r7
 8004a9e:	4682      	mov	sl, r0
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	f04f 020a 	mov.w	r2, #10
 8004aa8:	4641      	mov	r1, r8
 8004aaa:	4620      	mov	r0, r4
 8004aac:	d107      	bne.n	8004abe <_dtoa_r+0xb1e>
 8004aae:	f000 f9cb 	bl	8004e48 <__multadd>
 8004ab2:	4680      	mov	r8, r0
 8004ab4:	4607      	mov	r7, r0
 8004ab6:	9b04      	ldr	r3, [sp, #16]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	9304      	str	r3, [sp, #16]
 8004abc:	e775      	b.n	80049aa <_dtoa_r+0xa0a>
 8004abe:	f000 f9c3 	bl	8004e48 <__multadd>
 8004ac2:	4639      	mov	r1, r7
 8004ac4:	4680      	mov	r8, r0
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	220a      	movs	r2, #10
 8004aca:	4620      	mov	r0, r4
 8004acc:	f000 f9bc 	bl	8004e48 <__multadd>
 8004ad0:	4607      	mov	r7, r0
 8004ad2:	e7f0      	b.n	8004ab6 <_dtoa_r+0xb16>
 8004ad4:	9b04      	ldr	r3, [sp, #16]
 8004ad6:	9301      	str	r3, [sp, #4]
 8004ad8:	9d00      	ldr	r5, [sp, #0]
 8004ada:	4631      	mov	r1, r6
 8004adc:	4650      	mov	r0, sl
 8004ade:	f7ff f9d6 	bl	8003e8e <quorem>
 8004ae2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004ae6:	9b00      	ldr	r3, [sp, #0]
 8004ae8:	f805 9b01 	strb.w	r9, [r5], #1
 8004aec:	1aea      	subs	r2, r5, r3
 8004aee:	9b01      	ldr	r3, [sp, #4]
 8004af0:	4293      	cmp	r3, r2
 8004af2:	dd07      	ble.n	8004b04 <_dtoa_r+0xb64>
 8004af4:	4651      	mov	r1, sl
 8004af6:	2300      	movs	r3, #0
 8004af8:	220a      	movs	r2, #10
 8004afa:	4620      	mov	r0, r4
 8004afc:	f000 f9a4 	bl	8004e48 <__multadd>
 8004b00:	4682      	mov	sl, r0
 8004b02:	e7ea      	b.n	8004ada <_dtoa_r+0xb3a>
 8004b04:	9b01      	ldr	r3, [sp, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	bfc8      	it	gt
 8004b0a:	461d      	movgt	r5, r3
 8004b0c:	9b00      	ldr	r3, [sp, #0]
 8004b0e:	bfd8      	it	le
 8004b10:	2501      	movle	r5, #1
 8004b12:	441d      	add	r5, r3
 8004b14:	f04f 0800 	mov.w	r8, #0
 8004b18:	4651      	mov	r1, sl
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	4620      	mov	r0, r4
 8004b1e:	f000 fb41 	bl	80051a4 <__lshift>
 8004b22:	4631      	mov	r1, r6
 8004b24:	4682      	mov	sl, r0
 8004b26:	f000 fba9 	bl	800527c <__mcmp>
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	dc96      	bgt.n	8004a5c <_dtoa_r+0xabc>
 8004b2e:	d102      	bne.n	8004b36 <_dtoa_r+0xb96>
 8004b30:	f019 0f01 	tst.w	r9, #1
 8004b34:	d192      	bne.n	8004a5c <_dtoa_r+0xabc>
 8004b36:	462b      	mov	r3, r5
 8004b38:	461d      	mov	r5, r3
 8004b3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b3e:	2a30      	cmp	r2, #48	; 0x30
 8004b40:	d0fa      	beq.n	8004b38 <_dtoa_r+0xb98>
 8004b42:	e6dd      	b.n	8004900 <_dtoa_r+0x960>
 8004b44:	9a00      	ldr	r2, [sp, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d189      	bne.n	8004a5e <_dtoa_r+0xabe>
 8004b4a:	f10b 0b01 	add.w	fp, fp, #1
 8004b4e:	2331      	movs	r3, #49	; 0x31
 8004b50:	e796      	b.n	8004a80 <_dtoa_r+0xae0>
 8004b52:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <_dtoa_r+0xbdc>)
 8004b54:	f7ff ba99 	b.w	800408a <_dtoa_r+0xea>
 8004b58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f47f aa6d 	bne.w	800403a <_dtoa_r+0x9a>
 8004b60:	4b07      	ldr	r3, [pc, #28]	; (8004b80 <_dtoa_r+0xbe0>)
 8004b62:	f7ff ba92 	b.w	800408a <_dtoa_r+0xea>
 8004b66:	9b01      	ldr	r3, [sp, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	dcb5      	bgt.n	8004ad8 <_dtoa_r+0xb38>
 8004b6c:	9b07      	ldr	r3, [sp, #28]
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	f73f aeb1 	bgt.w	80048d6 <_dtoa_r+0x936>
 8004b74:	e7b0      	b.n	8004ad8 <_dtoa_r+0xb38>
 8004b76:	bf00      	nop
 8004b78:	08006834 	.word	0x08006834
 8004b7c:	08006794 	.word	0x08006794
 8004b80:	080067b8 	.word	0x080067b8

08004b84 <_free_r>:
 8004b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b86:	2900      	cmp	r1, #0
 8004b88:	d044      	beq.n	8004c14 <_free_r+0x90>
 8004b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b8e:	9001      	str	r0, [sp, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f1a1 0404 	sub.w	r4, r1, #4
 8004b96:	bfb8      	it	lt
 8004b98:	18e4      	addlt	r4, r4, r3
 8004b9a:	f000 f8e7 	bl	8004d6c <__malloc_lock>
 8004b9e:	4a1e      	ldr	r2, [pc, #120]	; (8004c18 <_free_r+0x94>)
 8004ba0:	9801      	ldr	r0, [sp, #4]
 8004ba2:	6813      	ldr	r3, [r2, #0]
 8004ba4:	b933      	cbnz	r3, 8004bb4 <_free_r+0x30>
 8004ba6:	6063      	str	r3, [r4, #4]
 8004ba8:	6014      	str	r4, [r2, #0]
 8004baa:	b003      	add	sp, #12
 8004bac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bb0:	f000 b8e2 	b.w	8004d78 <__malloc_unlock>
 8004bb4:	42a3      	cmp	r3, r4
 8004bb6:	d908      	bls.n	8004bca <_free_r+0x46>
 8004bb8:	6825      	ldr	r5, [r4, #0]
 8004bba:	1961      	adds	r1, r4, r5
 8004bbc:	428b      	cmp	r3, r1
 8004bbe:	bf01      	itttt	eq
 8004bc0:	6819      	ldreq	r1, [r3, #0]
 8004bc2:	685b      	ldreq	r3, [r3, #4]
 8004bc4:	1949      	addeq	r1, r1, r5
 8004bc6:	6021      	streq	r1, [r4, #0]
 8004bc8:	e7ed      	b.n	8004ba6 <_free_r+0x22>
 8004bca:	461a      	mov	r2, r3
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	b10b      	cbz	r3, 8004bd4 <_free_r+0x50>
 8004bd0:	42a3      	cmp	r3, r4
 8004bd2:	d9fa      	bls.n	8004bca <_free_r+0x46>
 8004bd4:	6811      	ldr	r1, [r2, #0]
 8004bd6:	1855      	adds	r5, r2, r1
 8004bd8:	42a5      	cmp	r5, r4
 8004bda:	d10b      	bne.n	8004bf4 <_free_r+0x70>
 8004bdc:	6824      	ldr	r4, [r4, #0]
 8004bde:	4421      	add	r1, r4
 8004be0:	1854      	adds	r4, r2, r1
 8004be2:	42a3      	cmp	r3, r4
 8004be4:	6011      	str	r1, [r2, #0]
 8004be6:	d1e0      	bne.n	8004baa <_free_r+0x26>
 8004be8:	681c      	ldr	r4, [r3, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	6053      	str	r3, [r2, #4]
 8004bee:	440c      	add	r4, r1
 8004bf0:	6014      	str	r4, [r2, #0]
 8004bf2:	e7da      	b.n	8004baa <_free_r+0x26>
 8004bf4:	d902      	bls.n	8004bfc <_free_r+0x78>
 8004bf6:	230c      	movs	r3, #12
 8004bf8:	6003      	str	r3, [r0, #0]
 8004bfa:	e7d6      	b.n	8004baa <_free_r+0x26>
 8004bfc:	6825      	ldr	r5, [r4, #0]
 8004bfe:	1961      	adds	r1, r4, r5
 8004c00:	428b      	cmp	r3, r1
 8004c02:	bf04      	itt	eq
 8004c04:	6819      	ldreq	r1, [r3, #0]
 8004c06:	685b      	ldreq	r3, [r3, #4]
 8004c08:	6063      	str	r3, [r4, #4]
 8004c0a:	bf04      	itt	eq
 8004c0c:	1949      	addeq	r1, r1, r5
 8004c0e:	6021      	streq	r1, [r4, #0]
 8004c10:	6054      	str	r4, [r2, #4]
 8004c12:	e7ca      	b.n	8004baa <_free_r+0x26>
 8004c14:	b003      	add	sp, #12
 8004c16:	bd30      	pop	{r4, r5, pc}
 8004c18:	20000444 	.word	0x20000444

08004c1c <malloc>:
 8004c1c:	4b02      	ldr	r3, [pc, #8]	; (8004c28 <malloc+0xc>)
 8004c1e:	4601      	mov	r1, r0
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	f000 b823 	b.w	8004c6c <_malloc_r>
 8004c26:	bf00      	nop
 8004c28:	2000007c 	.word	0x2000007c

08004c2c <sbrk_aligned>:
 8004c2c:	b570      	push	{r4, r5, r6, lr}
 8004c2e:	4e0e      	ldr	r6, [pc, #56]	; (8004c68 <sbrk_aligned+0x3c>)
 8004c30:	460c      	mov	r4, r1
 8004c32:	6831      	ldr	r1, [r6, #0]
 8004c34:	4605      	mov	r5, r0
 8004c36:	b911      	cbnz	r1, 8004c3e <sbrk_aligned+0x12>
 8004c38:	f000 fe40 	bl	80058bc <_sbrk_r>
 8004c3c:	6030      	str	r0, [r6, #0]
 8004c3e:	4621      	mov	r1, r4
 8004c40:	4628      	mov	r0, r5
 8004c42:	f000 fe3b 	bl	80058bc <_sbrk_r>
 8004c46:	1c43      	adds	r3, r0, #1
 8004c48:	d00a      	beq.n	8004c60 <sbrk_aligned+0x34>
 8004c4a:	1cc4      	adds	r4, r0, #3
 8004c4c:	f024 0403 	bic.w	r4, r4, #3
 8004c50:	42a0      	cmp	r0, r4
 8004c52:	d007      	beq.n	8004c64 <sbrk_aligned+0x38>
 8004c54:	1a21      	subs	r1, r4, r0
 8004c56:	4628      	mov	r0, r5
 8004c58:	f000 fe30 	bl	80058bc <_sbrk_r>
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	d101      	bne.n	8004c64 <sbrk_aligned+0x38>
 8004c60:	f04f 34ff 	mov.w	r4, #4294967295
 8004c64:	4620      	mov	r0, r4
 8004c66:	bd70      	pop	{r4, r5, r6, pc}
 8004c68:	20000448 	.word	0x20000448

08004c6c <_malloc_r>:
 8004c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c70:	1ccd      	adds	r5, r1, #3
 8004c72:	f025 0503 	bic.w	r5, r5, #3
 8004c76:	3508      	adds	r5, #8
 8004c78:	2d0c      	cmp	r5, #12
 8004c7a:	bf38      	it	cc
 8004c7c:	250c      	movcc	r5, #12
 8004c7e:	2d00      	cmp	r5, #0
 8004c80:	4607      	mov	r7, r0
 8004c82:	db01      	blt.n	8004c88 <_malloc_r+0x1c>
 8004c84:	42a9      	cmp	r1, r5
 8004c86:	d905      	bls.n	8004c94 <_malloc_r+0x28>
 8004c88:	230c      	movs	r3, #12
 8004c8a:	603b      	str	r3, [r7, #0]
 8004c8c:	2600      	movs	r6, #0
 8004c8e:	4630      	mov	r0, r6
 8004c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004d68 <_malloc_r+0xfc>
 8004c98:	f000 f868 	bl	8004d6c <__malloc_lock>
 8004c9c:	f8d8 3000 	ldr.w	r3, [r8]
 8004ca0:	461c      	mov	r4, r3
 8004ca2:	bb5c      	cbnz	r4, 8004cfc <_malloc_r+0x90>
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	4638      	mov	r0, r7
 8004ca8:	f7ff ffc0 	bl	8004c2c <sbrk_aligned>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	4604      	mov	r4, r0
 8004cb0:	d155      	bne.n	8004d5e <_malloc_r+0xf2>
 8004cb2:	f8d8 4000 	ldr.w	r4, [r8]
 8004cb6:	4626      	mov	r6, r4
 8004cb8:	2e00      	cmp	r6, #0
 8004cba:	d145      	bne.n	8004d48 <_malloc_r+0xdc>
 8004cbc:	2c00      	cmp	r4, #0
 8004cbe:	d048      	beq.n	8004d52 <_malloc_r+0xe6>
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	4631      	mov	r1, r6
 8004cc4:	4638      	mov	r0, r7
 8004cc6:	eb04 0903 	add.w	r9, r4, r3
 8004cca:	f000 fdf7 	bl	80058bc <_sbrk_r>
 8004cce:	4581      	cmp	r9, r0
 8004cd0:	d13f      	bne.n	8004d52 <_malloc_r+0xe6>
 8004cd2:	6821      	ldr	r1, [r4, #0]
 8004cd4:	1a6d      	subs	r5, r5, r1
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	4638      	mov	r0, r7
 8004cda:	f7ff ffa7 	bl	8004c2c <sbrk_aligned>
 8004cde:	3001      	adds	r0, #1
 8004ce0:	d037      	beq.n	8004d52 <_malloc_r+0xe6>
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	442b      	add	r3, r5
 8004ce6:	6023      	str	r3, [r4, #0]
 8004ce8:	f8d8 3000 	ldr.w	r3, [r8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d038      	beq.n	8004d62 <_malloc_r+0xf6>
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	42a2      	cmp	r2, r4
 8004cf4:	d12b      	bne.n	8004d4e <_malloc_r+0xe2>
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	605a      	str	r2, [r3, #4]
 8004cfa:	e00f      	b.n	8004d1c <_malloc_r+0xb0>
 8004cfc:	6822      	ldr	r2, [r4, #0]
 8004cfe:	1b52      	subs	r2, r2, r5
 8004d00:	d41f      	bmi.n	8004d42 <_malloc_r+0xd6>
 8004d02:	2a0b      	cmp	r2, #11
 8004d04:	d917      	bls.n	8004d36 <_malloc_r+0xca>
 8004d06:	1961      	adds	r1, r4, r5
 8004d08:	42a3      	cmp	r3, r4
 8004d0a:	6025      	str	r5, [r4, #0]
 8004d0c:	bf18      	it	ne
 8004d0e:	6059      	strne	r1, [r3, #4]
 8004d10:	6863      	ldr	r3, [r4, #4]
 8004d12:	bf08      	it	eq
 8004d14:	f8c8 1000 	streq.w	r1, [r8]
 8004d18:	5162      	str	r2, [r4, r5]
 8004d1a:	604b      	str	r3, [r1, #4]
 8004d1c:	4638      	mov	r0, r7
 8004d1e:	f104 060b 	add.w	r6, r4, #11
 8004d22:	f000 f829 	bl	8004d78 <__malloc_unlock>
 8004d26:	f026 0607 	bic.w	r6, r6, #7
 8004d2a:	1d23      	adds	r3, r4, #4
 8004d2c:	1af2      	subs	r2, r6, r3
 8004d2e:	d0ae      	beq.n	8004c8e <_malloc_r+0x22>
 8004d30:	1b9b      	subs	r3, r3, r6
 8004d32:	50a3      	str	r3, [r4, r2]
 8004d34:	e7ab      	b.n	8004c8e <_malloc_r+0x22>
 8004d36:	42a3      	cmp	r3, r4
 8004d38:	6862      	ldr	r2, [r4, #4]
 8004d3a:	d1dd      	bne.n	8004cf8 <_malloc_r+0x8c>
 8004d3c:	f8c8 2000 	str.w	r2, [r8]
 8004d40:	e7ec      	b.n	8004d1c <_malloc_r+0xb0>
 8004d42:	4623      	mov	r3, r4
 8004d44:	6864      	ldr	r4, [r4, #4]
 8004d46:	e7ac      	b.n	8004ca2 <_malloc_r+0x36>
 8004d48:	4634      	mov	r4, r6
 8004d4a:	6876      	ldr	r6, [r6, #4]
 8004d4c:	e7b4      	b.n	8004cb8 <_malloc_r+0x4c>
 8004d4e:	4613      	mov	r3, r2
 8004d50:	e7cc      	b.n	8004cec <_malloc_r+0x80>
 8004d52:	230c      	movs	r3, #12
 8004d54:	603b      	str	r3, [r7, #0]
 8004d56:	4638      	mov	r0, r7
 8004d58:	f000 f80e 	bl	8004d78 <__malloc_unlock>
 8004d5c:	e797      	b.n	8004c8e <_malloc_r+0x22>
 8004d5e:	6025      	str	r5, [r4, #0]
 8004d60:	e7dc      	b.n	8004d1c <_malloc_r+0xb0>
 8004d62:	605b      	str	r3, [r3, #4]
 8004d64:	deff      	udf	#255	; 0xff
 8004d66:	bf00      	nop
 8004d68:	20000444 	.word	0x20000444

08004d6c <__malloc_lock>:
 8004d6c:	4801      	ldr	r0, [pc, #4]	; (8004d74 <__malloc_lock+0x8>)
 8004d6e:	f7ff b88c 	b.w	8003e8a <__retarget_lock_acquire_recursive>
 8004d72:	bf00      	nop
 8004d74:	20000440 	.word	0x20000440

08004d78 <__malloc_unlock>:
 8004d78:	4801      	ldr	r0, [pc, #4]	; (8004d80 <__malloc_unlock+0x8>)
 8004d7a:	f7ff b887 	b.w	8003e8c <__retarget_lock_release_recursive>
 8004d7e:	bf00      	nop
 8004d80:	20000440 	.word	0x20000440

08004d84 <_Balloc>:
 8004d84:	b570      	push	{r4, r5, r6, lr}
 8004d86:	69c6      	ldr	r6, [r0, #28]
 8004d88:	4604      	mov	r4, r0
 8004d8a:	460d      	mov	r5, r1
 8004d8c:	b976      	cbnz	r6, 8004dac <_Balloc+0x28>
 8004d8e:	2010      	movs	r0, #16
 8004d90:	f7ff ff44 	bl	8004c1c <malloc>
 8004d94:	4602      	mov	r2, r0
 8004d96:	61e0      	str	r0, [r4, #28]
 8004d98:	b920      	cbnz	r0, 8004da4 <_Balloc+0x20>
 8004d9a:	4b18      	ldr	r3, [pc, #96]	; (8004dfc <_Balloc+0x78>)
 8004d9c:	4818      	ldr	r0, [pc, #96]	; (8004e00 <_Balloc+0x7c>)
 8004d9e:	216b      	movs	r1, #107	; 0x6b
 8004da0:	f000 fdaa 	bl	80058f8 <__assert_func>
 8004da4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004da8:	6006      	str	r6, [r0, #0]
 8004daa:	60c6      	str	r6, [r0, #12]
 8004dac:	69e6      	ldr	r6, [r4, #28]
 8004dae:	68f3      	ldr	r3, [r6, #12]
 8004db0:	b183      	cbz	r3, 8004dd4 <_Balloc+0x50>
 8004db2:	69e3      	ldr	r3, [r4, #28]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004dba:	b9b8      	cbnz	r0, 8004dec <_Balloc+0x68>
 8004dbc:	2101      	movs	r1, #1
 8004dbe:	fa01 f605 	lsl.w	r6, r1, r5
 8004dc2:	1d72      	adds	r2, r6, #5
 8004dc4:	0092      	lsls	r2, r2, #2
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	f000 fdb4 	bl	8005934 <_calloc_r>
 8004dcc:	b160      	cbz	r0, 8004de8 <_Balloc+0x64>
 8004dce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004dd2:	e00e      	b.n	8004df2 <_Balloc+0x6e>
 8004dd4:	2221      	movs	r2, #33	; 0x21
 8004dd6:	2104      	movs	r1, #4
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f000 fdab 	bl	8005934 <_calloc_r>
 8004dde:	69e3      	ldr	r3, [r4, #28]
 8004de0:	60f0      	str	r0, [r6, #12]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e4      	bne.n	8004db2 <_Balloc+0x2e>
 8004de8:	2000      	movs	r0, #0
 8004dea:	bd70      	pop	{r4, r5, r6, pc}
 8004dec:	6802      	ldr	r2, [r0, #0]
 8004dee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004df2:	2300      	movs	r3, #0
 8004df4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004df8:	e7f7      	b.n	8004dea <_Balloc+0x66>
 8004dfa:	bf00      	nop
 8004dfc:	080067c5 	.word	0x080067c5
 8004e00:	08006845 	.word	0x08006845

08004e04 <_Bfree>:
 8004e04:	b570      	push	{r4, r5, r6, lr}
 8004e06:	69c6      	ldr	r6, [r0, #28]
 8004e08:	4605      	mov	r5, r0
 8004e0a:	460c      	mov	r4, r1
 8004e0c:	b976      	cbnz	r6, 8004e2c <_Bfree+0x28>
 8004e0e:	2010      	movs	r0, #16
 8004e10:	f7ff ff04 	bl	8004c1c <malloc>
 8004e14:	4602      	mov	r2, r0
 8004e16:	61e8      	str	r0, [r5, #28]
 8004e18:	b920      	cbnz	r0, 8004e24 <_Bfree+0x20>
 8004e1a:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <_Bfree+0x3c>)
 8004e1c:	4809      	ldr	r0, [pc, #36]	; (8004e44 <_Bfree+0x40>)
 8004e1e:	218f      	movs	r1, #143	; 0x8f
 8004e20:	f000 fd6a 	bl	80058f8 <__assert_func>
 8004e24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e28:	6006      	str	r6, [r0, #0]
 8004e2a:	60c6      	str	r6, [r0, #12]
 8004e2c:	b13c      	cbz	r4, 8004e3e <_Bfree+0x3a>
 8004e2e:	69eb      	ldr	r3, [r5, #28]
 8004e30:	6862      	ldr	r2, [r4, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e38:	6021      	str	r1, [r4, #0]
 8004e3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004e3e:	bd70      	pop	{r4, r5, r6, pc}
 8004e40:	080067c5 	.word	0x080067c5
 8004e44:	08006845 	.word	0x08006845

08004e48 <__multadd>:
 8004e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e4c:	690d      	ldr	r5, [r1, #16]
 8004e4e:	4607      	mov	r7, r0
 8004e50:	460c      	mov	r4, r1
 8004e52:	461e      	mov	r6, r3
 8004e54:	f101 0c14 	add.w	ip, r1, #20
 8004e58:	2000      	movs	r0, #0
 8004e5a:	f8dc 3000 	ldr.w	r3, [ip]
 8004e5e:	b299      	uxth	r1, r3
 8004e60:	fb02 6101 	mla	r1, r2, r1, r6
 8004e64:	0c1e      	lsrs	r6, r3, #16
 8004e66:	0c0b      	lsrs	r3, r1, #16
 8004e68:	fb02 3306 	mla	r3, r2, r6, r3
 8004e6c:	b289      	uxth	r1, r1
 8004e6e:	3001      	adds	r0, #1
 8004e70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004e74:	4285      	cmp	r5, r0
 8004e76:	f84c 1b04 	str.w	r1, [ip], #4
 8004e7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004e7e:	dcec      	bgt.n	8004e5a <__multadd+0x12>
 8004e80:	b30e      	cbz	r6, 8004ec6 <__multadd+0x7e>
 8004e82:	68a3      	ldr	r3, [r4, #8]
 8004e84:	42ab      	cmp	r3, r5
 8004e86:	dc19      	bgt.n	8004ebc <__multadd+0x74>
 8004e88:	6861      	ldr	r1, [r4, #4]
 8004e8a:	4638      	mov	r0, r7
 8004e8c:	3101      	adds	r1, #1
 8004e8e:	f7ff ff79 	bl	8004d84 <_Balloc>
 8004e92:	4680      	mov	r8, r0
 8004e94:	b928      	cbnz	r0, 8004ea2 <__multadd+0x5a>
 8004e96:	4602      	mov	r2, r0
 8004e98:	4b0c      	ldr	r3, [pc, #48]	; (8004ecc <__multadd+0x84>)
 8004e9a:	480d      	ldr	r0, [pc, #52]	; (8004ed0 <__multadd+0x88>)
 8004e9c:	21ba      	movs	r1, #186	; 0xba
 8004e9e:	f000 fd2b 	bl	80058f8 <__assert_func>
 8004ea2:	6922      	ldr	r2, [r4, #16]
 8004ea4:	3202      	adds	r2, #2
 8004ea6:	f104 010c 	add.w	r1, r4, #12
 8004eaa:	0092      	lsls	r2, r2, #2
 8004eac:	300c      	adds	r0, #12
 8004eae:	f000 fd15 	bl	80058dc <memcpy>
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	4638      	mov	r0, r7
 8004eb6:	f7ff ffa5 	bl	8004e04 <_Bfree>
 8004eba:	4644      	mov	r4, r8
 8004ebc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004ec0:	3501      	adds	r5, #1
 8004ec2:	615e      	str	r6, [r3, #20]
 8004ec4:	6125      	str	r5, [r4, #16]
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ecc:	08006834 	.word	0x08006834
 8004ed0:	08006845 	.word	0x08006845

08004ed4 <__hi0bits>:
 8004ed4:	0c03      	lsrs	r3, r0, #16
 8004ed6:	041b      	lsls	r3, r3, #16
 8004ed8:	b9d3      	cbnz	r3, 8004f10 <__hi0bits+0x3c>
 8004eda:	0400      	lsls	r0, r0, #16
 8004edc:	2310      	movs	r3, #16
 8004ede:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004ee2:	bf04      	itt	eq
 8004ee4:	0200      	lsleq	r0, r0, #8
 8004ee6:	3308      	addeq	r3, #8
 8004ee8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004eec:	bf04      	itt	eq
 8004eee:	0100      	lsleq	r0, r0, #4
 8004ef0:	3304      	addeq	r3, #4
 8004ef2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004ef6:	bf04      	itt	eq
 8004ef8:	0080      	lsleq	r0, r0, #2
 8004efa:	3302      	addeq	r3, #2
 8004efc:	2800      	cmp	r0, #0
 8004efe:	db05      	blt.n	8004f0c <__hi0bits+0x38>
 8004f00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004f04:	f103 0301 	add.w	r3, r3, #1
 8004f08:	bf08      	it	eq
 8004f0a:	2320      	moveq	r3, #32
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	4770      	bx	lr
 8004f10:	2300      	movs	r3, #0
 8004f12:	e7e4      	b.n	8004ede <__hi0bits+0xa>

08004f14 <__lo0bits>:
 8004f14:	6803      	ldr	r3, [r0, #0]
 8004f16:	f013 0207 	ands.w	r2, r3, #7
 8004f1a:	d00c      	beq.n	8004f36 <__lo0bits+0x22>
 8004f1c:	07d9      	lsls	r1, r3, #31
 8004f1e:	d422      	bmi.n	8004f66 <__lo0bits+0x52>
 8004f20:	079a      	lsls	r2, r3, #30
 8004f22:	bf49      	itett	mi
 8004f24:	085b      	lsrmi	r3, r3, #1
 8004f26:	089b      	lsrpl	r3, r3, #2
 8004f28:	6003      	strmi	r3, [r0, #0]
 8004f2a:	2201      	movmi	r2, #1
 8004f2c:	bf5c      	itt	pl
 8004f2e:	6003      	strpl	r3, [r0, #0]
 8004f30:	2202      	movpl	r2, #2
 8004f32:	4610      	mov	r0, r2
 8004f34:	4770      	bx	lr
 8004f36:	b299      	uxth	r1, r3
 8004f38:	b909      	cbnz	r1, 8004f3e <__lo0bits+0x2a>
 8004f3a:	0c1b      	lsrs	r3, r3, #16
 8004f3c:	2210      	movs	r2, #16
 8004f3e:	b2d9      	uxtb	r1, r3
 8004f40:	b909      	cbnz	r1, 8004f46 <__lo0bits+0x32>
 8004f42:	3208      	adds	r2, #8
 8004f44:	0a1b      	lsrs	r3, r3, #8
 8004f46:	0719      	lsls	r1, r3, #28
 8004f48:	bf04      	itt	eq
 8004f4a:	091b      	lsreq	r3, r3, #4
 8004f4c:	3204      	addeq	r2, #4
 8004f4e:	0799      	lsls	r1, r3, #30
 8004f50:	bf04      	itt	eq
 8004f52:	089b      	lsreq	r3, r3, #2
 8004f54:	3202      	addeq	r2, #2
 8004f56:	07d9      	lsls	r1, r3, #31
 8004f58:	d403      	bmi.n	8004f62 <__lo0bits+0x4e>
 8004f5a:	085b      	lsrs	r3, r3, #1
 8004f5c:	f102 0201 	add.w	r2, r2, #1
 8004f60:	d003      	beq.n	8004f6a <__lo0bits+0x56>
 8004f62:	6003      	str	r3, [r0, #0]
 8004f64:	e7e5      	b.n	8004f32 <__lo0bits+0x1e>
 8004f66:	2200      	movs	r2, #0
 8004f68:	e7e3      	b.n	8004f32 <__lo0bits+0x1e>
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	e7e1      	b.n	8004f32 <__lo0bits+0x1e>
	...

08004f70 <__i2b>:
 8004f70:	b510      	push	{r4, lr}
 8004f72:	460c      	mov	r4, r1
 8004f74:	2101      	movs	r1, #1
 8004f76:	f7ff ff05 	bl	8004d84 <_Balloc>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	b928      	cbnz	r0, 8004f8a <__i2b+0x1a>
 8004f7e:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <__i2b+0x24>)
 8004f80:	4805      	ldr	r0, [pc, #20]	; (8004f98 <__i2b+0x28>)
 8004f82:	f240 1145 	movw	r1, #325	; 0x145
 8004f86:	f000 fcb7 	bl	80058f8 <__assert_func>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	6144      	str	r4, [r0, #20]
 8004f8e:	6103      	str	r3, [r0, #16]
 8004f90:	bd10      	pop	{r4, pc}
 8004f92:	bf00      	nop
 8004f94:	08006834 	.word	0x08006834
 8004f98:	08006845 	.word	0x08006845

08004f9c <__multiply>:
 8004f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa0:	4691      	mov	r9, r2
 8004fa2:	690a      	ldr	r2, [r1, #16]
 8004fa4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	bfb8      	it	lt
 8004fac:	460b      	movlt	r3, r1
 8004fae:	460c      	mov	r4, r1
 8004fb0:	bfbc      	itt	lt
 8004fb2:	464c      	movlt	r4, r9
 8004fb4:	4699      	movlt	r9, r3
 8004fb6:	6927      	ldr	r7, [r4, #16]
 8004fb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004fbc:	68a3      	ldr	r3, [r4, #8]
 8004fbe:	6861      	ldr	r1, [r4, #4]
 8004fc0:	eb07 060a 	add.w	r6, r7, sl
 8004fc4:	42b3      	cmp	r3, r6
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	bfb8      	it	lt
 8004fca:	3101      	addlt	r1, #1
 8004fcc:	f7ff feda 	bl	8004d84 <_Balloc>
 8004fd0:	b930      	cbnz	r0, 8004fe0 <__multiply+0x44>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	4b44      	ldr	r3, [pc, #272]	; (80050e8 <__multiply+0x14c>)
 8004fd6:	4845      	ldr	r0, [pc, #276]	; (80050ec <__multiply+0x150>)
 8004fd8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004fdc:	f000 fc8c 	bl	80058f8 <__assert_func>
 8004fe0:	f100 0514 	add.w	r5, r0, #20
 8004fe4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004fe8:	462b      	mov	r3, r5
 8004fea:	2200      	movs	r2, #0
 8004fec:	4543      	cmp	r3, r8
 8004fee:	d321      	bcc.n	8005034 <__multiply+0x98>
 8004ff0:	f104 0314 	add.w	r3, r4, #20
 8004ff4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004ff8:	f109 0314 	add.w	r3, r9, #20
 8004ffc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005000:	9202      	str	r2, [sp, #8]
 8005002:	1b3a      	subs	r2, r7, r4
 8005004:	3a15      	subs	r2, #21
 8005006:	f022 0203 	bic.w	r2, r2, #3
 800500a:	3204      	adds	r2, #4
 800500c:	f104 0115 	add.w	r1, r4, #21
 8005010:	428f      	cmp	r7, r1
 8005012:	bf38      	it	cc
 8005014:	2204      	movcc	r2, #4
 8005016:	9201      	str	r2, [sp, #4]
 8005018:	9a02      	ldr	r2, [sp, #8]
 800501a:	9303      	str	r3, [sp, #12]
 800501c:	429a      	cmp	r2, r3
 800501e:	d80c      	bhi.n	800503a <__multiply+0x9e>
 8005020:	2e00      	cmp	r6, #0
 8005022:	dd03      	ble.n	800502c <__multiply+0x90>
 8005024:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005028:	2b00      	cmp	r3, #0
 800502a:	d05b      	beq.n	80050e4 <__multiply+0x148>
 800502c:	6106      	str	r6, [r0, #16]
 800502e:	b005      	add	sp, #20
 8005030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005034:	f843 2b04 	str.w	r2, [r3], #4
 8005038:	e7d8      	b.n	8004fec <__multiply+0x50>
 800503a:	f8b3 a000 	ldrh.w	sl, [r3]
 800503e:	f1ba 0f00 	cmp.w	sl, #0
 8005042:	d024      	beq.n	800508e <__multiply+0xf2>
 8005044:	f104 0e14 	add.w	lr, r4, #20
 8005048:	46a9      	mov	r9, r5
 800504a:	f04f 0c00 	mov.w	ip, #0
 800504e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005052:	f8d9 1000 	ldr.w	r1, [r9]
 8005056:	fa1f fb82 	uxth.w	fp, r2
 800505a:	b289      	uxth	r1, r1
 800505c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005060:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005064:	f8d9 2000 	ldr.w	r2, [r9]
 8005068:	4461      	add	r1, ip
 800506a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800506e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005072:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005076:	b289      	uxth	r1, r1
 8005078:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800507c:	4577      	cmp	r7, lr
 800507e:	f849 1b04 	str.w	r1, [r9], #4
 8005082:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005086:	d8e2      	bhi.n	800504e <__multiply+0xb2>
 8005088:	9a01      	ldr	r2, [sp, #4]
 800508a:	f845 c002 	str.w	ip, [r5, r2]
 800508e:	9a03      	ldr	r2, [sp, #12]
 8005090:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005094:	3304      	adds	r3, #4
 8005096:	f1b9 0f00 	cmp.w	r9, #0
 800509a:	d021      	beq.n	80050e0 <__multiply+0x144>
 800509c:	6829      	ldr	r1, [r5, #0]
 800509e:	f104 0c14 	add.w	ip, r4, #20
 80050a2:	46ae      	mov	lr, r5
 80050a4:	f04f 0a00 	mov.w	sl, #0
 80050a8:	f8bc b000 	ldrh.w	fp, [ip]
 80050ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80050b0:	fb09 220b 	mla	r2, r9, fp, r2
 80050b4:	4452      	add	r2, sl
 80050b6:	b289      	uxth	r1, r1
 80050b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80050bc:	f84e 1b04 	str.w	r1, [lr], #4
 80050c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80050c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80050c8:	f8be 1000 	ldrh.w	r1, [lr]
 80050cc:	fb09 110a 	mla	r1, r9, sl, r1
 80050d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80050d4:	4567      	cmp	r7, ip
 80050d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80050da:	d8e5      	bhi.n	80050a8 <__multiply+0x10c>
 80050dc:	9a01      	ldr	r2, [sp, #4]
 80050de:	50a9      	str	r1, [r5, r2]
 80050e0:	3504      	adds	r5, #4
 80050e2:	e799      	b.n	8005018 <__multiply+0x7c>
 80050e4:	3e01      	subs	r6, #1
 80050e6:	e79b      	b.n	8005020 <__multiply+0x84>
 80050e8:	08006834 	.word	0x08006834
 80050ec:	08006845 	.word	0x08006845

080050f0 <__pow5mult>:
 80050f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050f4:	4615      	mov	r5, r2
 80050f6:	f012 0203 	ands.w	r2, r2, #3
 80050fa:	4606      	mov	r6, r0
 80050fc:	460f      	mov	r7, r1
 80050fe:	d007      	beq.n	8005110 <__pow5mult+0x20>
 8005100:	4c25      	ldr	r4, [pc, #148]	; (8005198 <__pow5mult+0xa8>)
 8005102:	3a01      	subs	r2, #1
 8005104:	2300      	movs	r3, #0
 8005106:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800510a:	f7ff fe9d 	bl	8004e48 <__multadd>
 800510e:	4607      	mov	r7, r0
 8005110:	10ad      	asrs	r5, r5, #2
 8005112:	d03d      	beq.n	8005190 <__pow5mult+0xa0>
 8005114:	69f4      	ldr	r4, [r6, #28]
 8005116:	b97c      	cbnz	r4, 8005138 <__pow5mult+0x48>
 8005118:	2010      	movs	r0, #16
 800511a:	f7ff fd7f 	bl	8004c1c <malloc>
 800511e:	4602      	mov	r2, r0
 8005120:	61f0      	str	r0, [r6, #28]
 8005122:	b928      	cbnz	r0, 8005130 <__pow5mult+0x40>
 8005124:	4b1d      	ldr	r3, [pc, #116]	; (800519c <__pow5mult+0xac>)
 8005126:	481e      	ldr	r0, [pc, #120]	; (80051a0 <__pow5mult+0xb0>)
 8005128:	f240 11b3 	movw	r1, #435	; 0x1b3
 800512c:	f000 fbe4 	bl	80058f8 <__assert_func>
 8005130:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005134:	6004      	str	r4, [r0, #0]
 8005136:	60c4      	str	r4, [r0, #12]
 8005138:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800513c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005140:	b94c      	cbnz	r4, 8005156 <__pow5mult+0x66>
 8005142:	f240 2171 	movw	r1, #625	; 0x271
 8005146:	4630      	mov	r0, r6
 8005148:	f7ff ff12 	bl	8004f70 <__i2b>
 800514c:	2300      	movs	r3, #0
 800514e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005152:	4604      	mov	r4, r0
 8005154:	6003      	str	r3, [r0, #0]
 8005156:	f04f 0900 	mov.w	r9, #0
 800515a:	07eb      	lsls	r3, r5, #31
 800515c:	d50a      	bpl.n	8005174 <__pow5mult+0x84>
 800515e:	4639      	mov	r1, r7
 8005160:	4622      	mov	r2, r4
 8005162:	4630      	mov	r0, r6
 8005164:	f7ff ff1a 	bl	8004f9c <__multiply>
 8005168:	4639      	mov	r1, r7
 800516a:	4680      	mov	r8, r0
 800516c:	4630      	mov	r0, r6
 800516e:	f7ff fe49 	bl	8004e04 <_Bfree>
 8005172:	4647      	mov	r7, r8
 8005174:	106d      	asrs	r5, r5, #1
 8005176:	d00b      	beq.n	8005190 <__pow5mult+0xa0>
 8005178:	6820      	ldr	r0, [r4, #0]
 800517a:	b938      	cbnz	r0, 800518c <__pow5mult+0x9c>
 800517c:	4622      	mov	r2, r4
 800517e:	4621      	mov	r1, r4
 8005180:	4630      	mov	r0, r6
 8005182:	f7ff ff0b 	bl	8004f9c <__multiply>
 8005186:	6020      	str	r0, [r4, #0]
 8005188:	f8c0 9000 	str.w	r9, [r0]
 800518c:	4604      	mov	r4, r0
 800518e:	e7e4      	b.n	800515a <__pow5mult+0x6a>
 8005190:	4638      	mov	r0, r7
 8005192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005196:	bf00      	nop
 8005198:	08006990 	.word	0x08006990
 800519c:	080067c5 	.word	0x080067c5
 80051a0:	08006845 	.word	0x08006845

080051a4 <__lshift>:
 80051a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051a8:	460c      	mov	r4, r1
 80051aa:	6849      	ldr	r1, [r1, #4]
 80051ac:	6923      	ldr	r3, [r4, #16]
 80051ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80051b2:	68a3      	ldr	r3, [r4, #8]
 80051b4:	4607      	mov	r7, r0
 80051b6:	4691      	mov	r9, r2
 80051b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80051bc:	f108 0601 	add.w	r6, r8, #1
 80051c0:	42b3      	cmp	r3, r6
 80051c2:	db0b      	blt.n	80051dc <__lshift+0x38>
 80051c4:	4638      	mov	r0, r7
 80051c6:	f7ff fddd 	bl	8004d84 <_Balloc>
 80051ca:	4605      	mov	r5, r0
 80051cc:	b948      	cbnz	r0, 80051e2 <__lshift+0x3e>
 80051ce:	4602      	mov	r2, r0
 80051d0:	4b28      	ldr	r3, [pc, #160]	; (8005274 <__lshift+0xd0>)
 80051d2:	4829      	ldr	r0, [pc, #164]	; (8005278 <__lshift+0xd4>)
 80051d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80051d8:	f000 fb8e 	bl	80058f8 <__assert_func>
 80051dc:	3101      	adds	r1, #1
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	e7ee      	b.n	80051c0 <__lshift+0x1c>
 80051e2:	2300      	movs	r3, #0
 80051e4:	f100 0114 	add.w	r1, r0, #20
 80051e8:	f100 0210 	add.w	r2, r0, #16
 80051ec:	4618      	mov	r0, r3
 80051ee:	4553      	cmp	r3, sl
 80051f0:	db33      	blt.n	800525a <__lshift+0xb6>
 80051f2:	6920      	ldr	r0, [r4, #16]
 80051f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80051f8:	f104 0314 	add.w	r3, r4, #20
 80051fc:	f019 091f 	ands.w	r9, r9, #31
 8005200:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005204:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005208:	d02b      	beq.n	8005262 <__lshift+0xbe>
 800520a:	f1c9 0e20 	rsb	lr, r9, #32
 800520e:	468a      	mov	sl, r1
 8005210:	2200      	movs	r2, #0
 8005212:	6818      	ldr	r0, [r3, #0]
 8005214:	fa00 f009 	lsl.w	r0, r0, r9
 8005218:	4310      	orrs	r0, r2
 800521a:	f84a 0b04 	str.w	r0, [sl], #4
 800521e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005222:	459c      	cmp	ip, r3
 8005224:	fa22 f20e 	lsr.w	r2, r2, lr
 8005228:	d8f3      	bhi.n	8005212 <__lshift+0x6e>
 800522a:	ebac 0304 	sub.w	r3, ip, r4
 800522e:	3b15      	subs	r3, #21
 8005230:	f023 0303 	bic.w	r3, r3, #3
 8005234:	3304      	adds	r3, #4
 8005236:	f104 0015 	add.w	r0, r4, #21
 800523a:	4584      	cmp	ip, r0
 800523c:	bf38      	it	cc
 800523e:	2304      	movcc	r3, #4
 8005240:	50ca      	str	r2, [r1, r3]
 8005242:	b10a      	cbz	r2, 8005248 <__lshift+0xa4>
 8005244:	f108 0602 	add.w	r6, r8, #2
 8005248:	3e01      	subs	r6, #1
 800524a:	4638      	mov	r0, r7
 800524c:	612e      	str	r6, [r5, #16]
 800524e:	4621      	mov	r1, r4
 8005250:	f7ff fdd8 	bl	8004e04 <_Bfree>
 8005254:	4628      	mov	r0, r5
 8005256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800525a:	f842 0f04 	str.w	r0, [r2, #4]!
 800525e:	3301      	adds	r3, #1
 8005260:	e7c5      	b.n	80051ee <__lshift+0x4a>
 8005262:	3904      	subs	r1, #4
 8005264:	f853 2b04 	ldr.w	r2, [r3], #4
 8005268:	f841 2f04 	str.w	r2, [r1, #4]!
 800526c:	459c      	cmp	ip, r3
 800526e:	d8f9      	bhi.n	8005264 <__lshift+0xc0>
 8005270:	e7ea      	b.n	8005248 <__lshift+0xa4>
 8005272:	bf00      	nop
 8005274:	08006834 	.word	0x08006834
 8005278:	08006845 	.word	0x08006845

0800527c <__mcmp>:
 800527c:	b530      	push	{r4, r5, lr}
 800527e:	6902      	ldr	r2, [r0, #16]
 8005280:	690c      	ldr	r4, [r1, #16]
 8005282:	1b12      	subs	r2, r2, r4
 8005284:	d10e      	bne.n	80052a4 <__mcmp+0x28>
 8005286:	f100 0314 	add.w	r3, r0, #20
 800528a:	3114      	adds	r1, #20
 800528c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005290:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005294:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005298:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800529c:	42a5      	cmp	r5, r4
 800529e:	d003      	beq.n	80052a8 <__mcmp+0x2c>
 80052a0:	d305      	bcc.n	80052ae <__mcmp+0x32>
 80052a2:	2201      	movs	r2, #1
 80052a4:	4610      	mov	r0, r2
 80052a6:	bd30      	pop	{r4, r5, pc}
 80052a8:	4283      	cmp	r3, r0
 80052aa:	d3f3      	bcc.n	8005294 <__mcmp+0x18>
 80052ac:	e7fa      	b.n	80052a4 <__mcmp+0x28>
 80052ae:	f04f 32ff 	mov.w	r2, #4294967295
 80052b2:	e7f7      	b.n	80052a4 <__mcmp+0x28>

080052b4 <__mdiff>:
 80052b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b8:	460c      	mov	r4, r1
 80052ba:	4606      	mov	r6, r0
 80052bc:	4611      	mov	r1, r2
 80052be:	4620      	mov	r0, r4
 80052c0:	4690      	mov	r8, r2
 80052c2:	f7ff ffdb 	bl	800527c <__mcmp>
 80052c6:	1e05      	subs	r5, r0, #0
 80052c8:	d110      	bne.n	80052ec <__mdiff+0x38>
 80052ca:	4629      	mov	r1, r5
 80052cc:	4630      	mov	r0, r6
 80052ce:	f7ff fd59 	bl	8004d84 <_Balloc>
 80052d2:	b930      	cbnz	r0, 80052e2 <__mdiff+0x2e>
 80052d4:	4b3a      	ldr	r3, [pc, #232]	; (80053c0 <__mdiff+0x10c>)
 80052d6:	4602      	mov	r2, r0
 80052d8:	f240 2137 	movw	r1, #567	; 0x237
 80052dc:	4839      	ldr	r0, [pc, #228]	; (80053c4 <__mdiff+0x110>)
 80052de:	f000 fb0b 	bl	80058f8 <__assert_func>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80052e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ec:	bfa4      	itt	ge
 80052ee:	4643      	movge	r3, r8
 80052f0:	46a0      	movge	r8, r4
 80052f2:	4630      	mov	r0, r6
 80052f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80052f8:	bfa6      	itte	ge
 80052fa:	461c      	movge	r4, r3
 80052fc:	2500      	movge	r5, #0
 80052fe:	2501      	movlt	r5, #1
 8005300:	f7ff fd40 	bl	8004d84 <_Balloc>
 8005304:	b920      	cbnz	r0, 8005310 <__mdiff+0x5c>
 8005306:	4b2e      	ldr	r3, [pc, #184]	; (80053c0 <__mdiff+0x10c>)
 8005308:	4602      	mov	r2, r0
 800530a:	f240 2145 	movw	r1, #581	; 0x245
 800530e:	e7e5      	b.n	80052dc <__mdiff+0x28>
 8005310:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005314:	6926      	ldr	r6, [r4, #16]
 8005316:	60c5      	str	r5, [r0, #12]
 8005318:	f104 0914 	add.w	r9, r4, #20
 800531c:	f108 0514 	add.w	r5, r8, #20
 8005320:	f100 0e14 	add.w	lr, r0, #20
 8005324:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005328:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800532c:	f108 0210 	add.w	r2, r8, #16
 8005330:	46f2      	mov	sl, lr
 8005332:	2100      	movs	r1, #0
 8005334:	f859 3b04 	ldr.w	r3, [r9], #4
 8005338:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800533c:	fa11 f88b 	uxtah	r8, r1, fp
 8005340:	b299      	uxth	r1, r3
 8005342:	0c1b      	lsrs	r3, r3, #16
 8005344:	eba8 0801 	sub.w	r8, r8, r1
 8005348:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800534c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005350:	fa1f f888 	uxth.w	r8, r8
 8005354:	1419      	asrs	r1, r3, #16
 8005356:	454e      	cmp	r6, r9
 8005358:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800535c:	f84a 3b04 	str.w	r3, [sl], #4
 8005360:	d8e8      	bhi.n	8005334 <__mdiff+0x80>
 8005362:	1b33      	subs	r3, r6, r4
 8005364:	3b15      	subs	r3, #21
 8005366:	f023 0303 	bic.w	r3, r3, #3
 800536a:	3304      	adds	r3, #4
 800536c:	3415      	adds	r4, #21
 800536e:	42a6      	cmp	r6, r4
 8005370:	bf38      	it	cc
 8005372:	2304      	movcc	r3, #4
 8005374:	441d      	add	r5, r3
 8005376:	4473      	add	r3, lr
 8005378:	469e      	mov	lr, r3
 800537a:	462e      	mov	r6, r5
 800537c:	4566      	cmp	r6, ip
 800537e:	d30e      	bcc.n	800539e <__mdiff+0xea>
 8005380:	f10c 0203 	add.w	r2, ip, #3
 8005384:	1b52      	subs	r2, r2, r5
 8005386:	f022 0203 	bic.w	r2, r2, #3
 800538a:	3d03      	subs	r5, #3
 800538c:	45ac      	cmp	ip, r5
 800538e:	bf38      	it	cc
 8005390:	2200      	movcc	r2, #0
 8005392:	4413      	add	r3, r2
 8005394:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005398:	b17a      	cbz	r2, 80053ba <__mdiff+0x106>
 800539a:	6107      	str	r7, [r0, #16]
 800539c:	e7a4      	b.n	80052e8 <__mdiff+0x34>
 800539e:	f856 8b04 	ldr.w	r8, [r6], #4
 80053a2:	fa11 f288 	uxtah	r2, r1, r8
 80053a6:	1414      	asrs	r4, r2, #16
 80053a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80053ac:	b292      	uxth	r2, r2
 80053ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80053b2:	f84e 2b04 	str.w	r2, [lr], #4
 80053b6:	1421      	asrs	r1, r4, #16
 80053b8:	e7e0      	b.n	800537c <__mdiff+0xc8>
 80053ba:	3f01      	subs	r7, #1
 80053bc:	e7ea      	b.n	8005394 <__mdiff+0xe0>
 80053be:	bf00      	nop
 80053c0:	08006834 	.word	0x08006834
 80053c4:	08006845 	.word	0x08006845

080053c8 <__d2b>:
 80053c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80053cc:	460f      	mov	r7, r1
 80053ce:	2101      	movs	r1, #1
 80053d0:	ec59 8b10 	vmov	r8, r9, d0
 80053d4:	4616      	mov	r6, r2
 80053d6:	f7ff fcd5 	bl	8004d84 <_Balloc>
 80053da:	4604      	mov	r4, r0
 80053dc:	b930      	cbnz	r0, 80053ec <__d2b+0x24>
 80053de:	4602      	mov	r2, r0
 80053e0:	4b24      	ldr	r3, [pc, #144]	; (8005474 <__d2b+0xac>)
 80053e2:	4825      	ldr	r0, [pc, #148]	; (8005478 <__d2b+0xb0>)
 80053e4:	f240 310f 	movw	r1, #783	; 0x30f
 80053e8:	f000 fa86 	bl	80058f8 <__assert_func>
 80053ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80053f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80053f4:	bb2d      	cbnz	r5, 8005442 <__d2b+0x7a>
 80053f6:	9301      	str	r3, [sp, #4]
 80053f8:	f1b8 0300 	subs.w	r3, r8, #0
 80053fc:	d026      	beq.n	800544c <__d2b+0x84>
 80053fe:	4668      	mov	r0, sp
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	f7ff fd87 	bl	8004f14 <__lo0bits>
 8005406:	e9dd 1200 	ldrd	r1, r2, [sp]
 800540a:	b1e8      	cbz	r0, 8005448 <__d2b+0x80>
 800540c:	f1c0 0320 	rsb	r3, r0, #32
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	430b      	orrs	r3, r1
 8005416:	40c2      	lsrs	r2, r0
 8005418:	6163      	str	r3, [r4, #20]
 800541a:	9201      	str	r2, [sp, #4]
 800541c:	9b01      	ldr	r3, [sp, #4]
 800541e:	61a3      	str	r3, [r4, #24]
 8005420:	2b00      	cmp	r3, #0
 8005422:	bf14      	ite	ne
 8005424:	2202      	movne	r2, #2
 8005426:	2201      	moveq	r2, #1
 8005428:	6122      	str	r2, [r4, #16]
 800542a:	b1bd      	cbz	r5, 800545c <__d2b+0x94>
 800542c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005430:	4405      	add	r5, r0
 8005432:	603d      	str	r5, [r7, #0]
 8005434:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005438:	6030      	str	r0, [r6, #0]
 800543a:	4620      	mov	r0, r4
 800543c:	b003      	add	sp, #12
 800543e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005446:	e7d6      	b.n	80053f6 <__d2b+0x2e>
 8005448:	6161      	str	r1, [r4, #20]
 800544a:	e7e7      	b.n	800541c <__d2b+0x54>
 800544c:	a801      	add	r0, sp, #4
 800544e:	f7ff fd61 	bl	8004f14 <__lo0bits>
 8005452:	9b01      	ldr	r3, [sp, #4]
 8005454:	6163      	str	r3, [r4, #20]
 8005456:	3020      	adds	r0, #32
 8005458:	2201      	movs	r2, #1
 800545a:	e7e5      	b.n	8005428 <__d2b+0x60>
 800545c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005460:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005464:	6038      	str	r0, [r7, #0]
 8005466:	6918      	ldr	r0, [r3, #16]
 8005468:	f7ff fd34 	bl	8004ed4 <__hi0bits>
 800546c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005470:	e7e2      	b.n	8005438 <__d2b+0x70>
 8005472:	bf00      	nop
 8005474:	08006834 	.word	0x08006834
 8005478:	08006845 	.word	0x08006845

0800547c <__ssputs_r>:
 800547c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005480:	688e      	ldr	r6, [r1, #8]
 8005482:	461f      	mov	r7, r3
 8005484:	42be      	cmp	r6, r7
 8005486:	680b      	ldr	r3, [r1, #0]
 8005488:	4682      	mov	sl, r0
 800548a:	460c      	mov	r4, r1
 800548c:	4690      	mov	r8, r2
 800548e:	d82c      	bhi.n	80054ea <__ssputs_r+0x6e>
 8005490:	898a      	ldrh	r2, [r1, #12]
 8005492:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005496:	d026      	beq.n	80054e6 <__ssputs_r+0x6a>
 8005498:	6965      	ldr	r5, [r4, #20]
 800549a:	6909      	ldr	r1, [r1, #16]
 800549c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054a0:	eba3 0901 	sub.w	r9, r3, r1
 80054a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054a8:	1c7b      	adds	r3, r7, #1
 80054aa:	444b      	add	r3, r9
 80054ac:	106d      	asrs	r5, r5, #1
 80054ae:	429d      	cmp	r5, r3
 80054b0:	bf38      	it	cc
 80054b2:	461d      	movcc	r5, r3
 80054b4:	0553      	lsls	r3, r2, #21
 80054b6:	d527      	bpl.n	8005508 <__ssputs_r+0x8c>
 80054b8:	4629      	mov	r1, r5
 80054ba:	f7ff fbd7 	bl	8004c6c <_malloc_r>
 80054be:	4606      	mov	r6, r0
 80054c0:	b360      	cbz	r0, 800551c <__ssputs_r+0xa0>
 80054c2:	6921      	ldr	r1, [r4, #16]
 80054c4:	464a      	mov	r2, r9
 80054c6:	f000 fa09 	bl	80058dc <memcpy>
 80054ca:	89a3      	ldrh	r3, [r4, #12]
 80054cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d4:	81a3      	strh	r3, [r4, #12]
 80054d6:	6126      	str	r6, [r4, #16]
 80054d8:	6165      	str	r5, [r4, #20]
 80054da:	444e      	add	r6, r9
 80054dc:	eba5 0509 	sub.w	r5, r5, r9
 80054e0:	6026      	str	r6, [r4, #0]
 80054e2:	60a5      	str	r5, [r4, #8]
 80054e4:	463e      	mov	r6, r7
 80054e6:	42be      	cmp	r6, r7
 80054e8:	d900      	bls.n	80054ec <__ssputs_r+0x70>
 80054ea:	463e      	mov	r6, r7
 80054ec:	6820      	ldr	r0, [r4, #0]
 80054ee:	4632      	mov	r2, r6
 80054f0:	4641      	mov	r1, r8
 80054f2:	f000 f9c9 	bl	8005888 <memmove>
 80054f6:	68a3      	ldr	r3, [r4, #8]
 80054f8:	1b9b      	subs	r3, r3, r6
 80054fa:	60a3      	str	r3, [r4, #8]
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	4433      	add	r3, r6
 8005500:	6023      	str	r3, [r4, #0]
 8005502:	2000      	movs	r0, #0
 8005504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005508:	462a      	mov	r2, r5
 800550a:	f000 fa3b 	bl	8005984 <_realloc_r>
 800550e:	4606      	mov	r6, r0
 8005510:	2800      	cmp	r0, #0
 8005512:	d1e0      	bne.n	80054d6 <__ssputs_r+0x5a>
 8005514:	6921      	ldr	r1, [r4, #16]
 8005516:	4650      	mov	r0, sl
 8005518:	f7ff fb34 	bl	8004b84 <_free_r>
 800551c:	230c      	movs	r3, #12
 800551e:	f8ca 3000 	str.w	r3, [sl]
 8005522:	89a3      	ldrh	r3, [r4, #12]
 8005524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005528:	81a3      	strh	r3, [r4, #12]
 800552a:	f04f 30ff 	mov.w	r0, #4294967295
 800552e:	e7e9      	b.n	8005504 <__ssputs_r+0x88>

08005530 <_svfiprintf_r>:
 8005530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005534:	4698      	mov	r8, r3
 8005536:	898b      	ldrh	r3, [r1, #12]
 8005538:	061b      	lsls	r3, r3, #24
 800553a:	b09d      	sub	sp, #116	; 0x74
 800553c:	4607      	mov	r7, r0
 800553e:	460d      	mov	r5, r1
 8005540:	4614      	mov	r4, r2
 8005542:	d50e      	bpl.n	8005562 <_svfiprintf_r+0x32>
 8005544:	690b      	ldr	r3, [r1, #16]
 8005546:	b963      	cbnz	r3, 8005562 <_svfiprintf_r+0x32>
 8005548:	2140      	movs	r1, #64	; 0x40
 800554a:	f7ff fb8f 	bl	8004c6c <_malloc_r>
 800554e:	6028      	str	r0, [r5, #0]
 8005550:	6128      	str	r0, [r5, #16]
 8005552:	b920      	cbnz	r0, 800555e <_svfiprintf_r+0x2e>
 8005554:	230c      	movs	r3, #12
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	f04f 30ff 	mov.w	r0, #4294967295
 800555c:	e0d0      	b.n	8005700 <_svfiprintf_r+0x1d0>
 800555e:	2340      	movs	r3, #64	; 0x40
 8005560:	616b      	str	r3, [r5, #20]
 8005562:	2300      	movs	r3, #0
 8005564:	9309      	str	r3, [sp, #36]	; 0x24
 8005566:	2320      	movs	r3, #32
 8005568:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800556c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005570:	2330      	movs	r3, #48	; 0x30
 8005572:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005718 <_svfiprintf_r+0x1e8>
 8005576:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800557a:	f04f 0901 	mov.w	r9, #1
 800557e:	4623      	mov	r3, r4
 8005580:	469a      	mov	sl, r3
 8005582:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005586:	b10a      	cbz	r2, 800558c <_svfiprintf_r+0x5c>
 8005588:	2a25      	cmp	r2, #37	; 0x25
 800558a:	d1f9      	bne.n	8005580 <_svfiprintf_r+0x50>
 800558c:	ebba 0b04 	subs.w	fp, sl, r4
 8005590:	d00b      	beq.n	80055aa <_svfiprintf_r+0x7a>
 8005592:	465b      	mov	r3, fp
 8005594:	4622      	mov	r2, r4
 8005596:	4629      	mov	r1, r5
 8005598:	4638      	mov	r0, r7
 800559a:	f7ff ff6f 	bl	800547c <__ssputs_r>
 800559e:	3001      	adds	r0, #1
 80055a0:	f000 80a9 	beq.w	80056f6 <_svfiprintf_r+0x1c6>
 80055a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055a6:	445a      	add	r2, fp
 80055a8:	9209      	str	r2, [sp, #36]	; 0x24
 80055aa:	f89a 3000 	ldrb.w	r3, [sl]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 80a1 	beq.w	80056f6 <_svfiprintf_r+0x1c6>
 80055b4:	2300      	movs	r3, #0
 80055b6:	f04f 32ff 	mov.w	r2, #4294967295
 80055ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055be:	f10a 0a01 	add.w	sl, sl, #1
 80055c2:	9304      	str	r3, [sp, #16]
 80055c4:	9307      	str	r3, [sp, #28]
 80055c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055ca:	931a      	str	r3, [sp, #104]	; 0x68
 80055cc:	4654      	mov	r4, sl
 80055ce:	2205      	movs	r2, #5
 80055d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055d4:	4850      	ldr	r0, [pc, #320]	; (8005718 <_svfiprintf_r+0x1e8>)
 80055d6:	f7fa fe03 	bl	80001e0 <memchr>
 80055da:	9a04      	ldr	r2, [sp, #16]
 80055dc:	b9d8      	cbnz	r0, 8005616 <_svfiprintf_r+0xe6>
 80055de:	06d0      	lsls	r0, r2, #27
 80055e0:	bf44      	itt	mi
 80055e2:	2320      	movmi	r3, #32
 80055e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055e8:	0711      	lsls	r1, r2, #28
 80055ea:	bf44      	itt	mi
 80055ec:	232b      	movmi	r3, #43	; 0x2b
 80055ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055f2:	f89a 3000 	ldrb.w	r3, [sl]
 80055f6:	2b2a      	cmp	r3, #42	; 0x2a
 80055f8:	d015      	beq.n	8005626 <_svfiprintf_r+0xf6>
 80055fa:	9a07      	ldr	r2, [sp, #28]
 80055fc:	4654      	mov	r4, sl
 80055fe:	2000      	movs	r0, #0
 8005600:	f04f 0c0a 	mov.w	ip, #10
 8005604:	4621      	mov	r1, r4
 8005606:	f811 3b01 	ldrb.w	r3, [r1], #1
 800560a:	3b30      	subs	r3, #48	; 0x30
 800560c:	2b09      	cmp	r3, #9
 800560e:	d94d      	bls.n	80056ac <_svfiprintf_r+0x17c>
 8005610:	b1b0      	cbz	r0, 8005640 <_svfiprintf_r+0x110>
 8005612:	9207      	str	r2, [sp, #28]
 8005614:	e014      	b.n	8005640 <_svfiprintf_r+0x110>
 8005616:	eba0 0308 	sub.w	r3, r0, r8
 800561a:	fa09 f303 	lsl.w	r3, r9, r3
 800561e:	4313      	orrs	r3, r2
 8005620:	9304      	str	r3, [sp, #16]
 8005622:	46a2      	mov	sl, r4
 8005624:	e7d2      	b.n	80055cc <_svfiprintf_r+0x9c>
 8005626:	9b03      	ldr	r3, [sp, #12]
 8005628:	1d19      	adds	r1, r3, #4
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	9103      	str	r1, [sp, #12]
 800562e:	2b00      	cmp	r3, #0
 8005630:	bfbb      	ittet	lt
 8005632:	425b      	neglt	r3, r3
 8005634:	f042 0202 	orrlt.w	r2, r2, #2
 8005638:	9307      	strge	r3, [sp, #28]
 800563a:	9307      	strlt	r3, [sp, #28]
 800563c:	bfb8      	it	lt
 800563e:	9204      	strlt	r2, [sp, #16]
 8005640:	7823      	ldrb	r3, [r4, #0]
 8005642:	2b2e      	cmp	r3, #46	; 0x2e
 8005644:	d10c      	bne.n	8005660 <_svfiprintf_r+0x130>
 8005646:	7863      	ldrb	r3, [r4, #1]
 8005648:	2b2a      	cmp	r3, #42	; 0x2a
 800564a:	d134      	bne.n	80056b6 <_svfiprintf_r+0x186>
 800564c:	9b03      	ldr	r3, [sp, #12]
 800564e:	1d1a      	adds	r2, r3, #4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	9203      	str	r2, [sp, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	bfb8      	it	lt
 8005658:	f04f 33ff 	movlt.w	r3, #4294967295
 800565c:	3402      	adds	r4, #2
 800565e:	9305      	str	r3, [sp, #20]
 8005660:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005728 <_svfiprintf_r+0x1f8>
 8005664:	7821      	ldrb	r1, [r4, #0]
 8005666:	2203      	movs	r2, #3
 8005668:	4650      	mov	r0, sl
 800566a:	f7fa fdb9 	bl	80001e0 <memchr>
 800566e:	b138      	cbz	r0, 8005680 <_svfiprintf_r+0x150>
 8005670:	9b04      	ldr	r3, [sp, #16]
 8005672:	eba0 000a 	sub.w	r0, r0, sl
 8005676:	2240      	movs	r2, #64	; 0x40
 8005678:	4082      	lsls	r2, r0
 800567a:	4313      	orrs	r3, r2
 800567c:	3401      	adds	r4, #1
 800567e:	9304      	str	r3, [sp, #16]
 8005680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005684:	4825      	ldr	r0, [pc, #148]	; (800571c <_svfiprintf_r+0x1ec>)
 8005686:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800568a:	2206      	movs	r2, #6
 800568c:	f7fa fda8 	bl	80001e0 <memchr>
 8005690:	2800      	cmp	r0, #0
 8005692:	d038      	beq.n	8005706 <_svfiprintf_r+0x1d6>
 8005694:	4b22      	ldr	r3, [pc, #136]	; (8005720 <_svfiprintf_r+0x1f0>)
 8005696:	bb1b      	cbnz	r3, 80056e0 <_svfiprintf_r+0x1b0>
 8005698:	9b03      	ldr	r3, [sp, #12]
 800569a:	3307      	adds	r3, #7
 800569c:	f023 0307 	bic.w	r3, r3, #7
 80056a0:	3308      	adds	r3, #8
 80056a2:	9303      	str	r3, [sp, #12]
 80056a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056a6:	4433      	add	r3, r6
 80056a8:	9309      	str	r3, [sp, #36]	; 0x24
 80056aa:	e768      	b.n	800557e <_svfiprintf_r+0x4e>
 80056ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80056b0:	460c      	mov	r4, r1
 80056b2:	2001      	movs	r0, #1
 80056b4:	e7a6      	b.n	8005604 <_svfiprintf_r+0xd4>
 80056b6:	2300      	movs	r3, #0
 80056b8:	3401      	adds	r4, #1
 80056ba:	9305      	str	r3, [sp, #20]
 80056bc:	4619      	mov	r1, r3
 80056be:	f04f 0c0a 	mov.w	ip, #10
 80056c2:	4620      	mov	r0, r4
 80056c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056c8:	3a30      	subs	r2, #48	; 0x30
 80056ca:	2a09      	cmp	r2, #9
 80056cc:	d903      	bls.n	80056d6 <_svfiprintf_r+0x1a6>
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0c6      	beq.n	8005660 <_svfiprintf_r+0x130>
 80056d2:	9105      	str	r1, [sp, #20]
 80056d4:	e7c4      	b.n	8005660 <_svfiprintf_r+0x130>
 80056d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80056da:	4604      	mov	r4, r0
 80056dc:	2301      	movs	r3, #1
 80056de:	e7f0      	b.n	80056c2 <_svfiprintf_r+0x192>
 80056e0:	ab03      	add	r3, sp, #12
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	462a      	mov	r2, r5
 80056e6:	4b0f      	ldr	r3, [pc, #60]	; (8005724 <_svfiprintf_r+0x1f4>)
 80056e8:	a904      	add	r1, sp, #16
 80056ea:	4638      	mov	r0, r7
 80056ec:	f7fd fe64 	bl	80033b8 <_printf_float>
 80056f0:	1c42      	adds	r2, r0, #1
 80056f2:	4606      	mov	r6, r0
 80056f4:	d1d6      	bne.n	80056a4 <_svfiprintf_r+0x174>
 80056f6:	89ab      	ldrh	r3, [r5, #12]
 80056f8:	065b      	lsls	r3, r3, #25
 80056fa:	f53f af2d 	bmi.w	8005558 <_svfiprintf_r+0x28>
 80056fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005700:	b01d      	add	sp, #116	; 0x74
 8005702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005706:	ab03      	add	r3, sp, #12
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	462a      	mov	r2, r5
 800570c:	4b05      	ldr	r3, [pc, #20]	; (8005724 <_svfiprintf_r+0x1f4>)
 800570e:	a904      	add	r1, sp, #16
 8005710:	4638      	mov	r0, r7
 8005712:	f7fe f8f5 	bl	8003900 <_printf_i>
 8005716:	e7eb      	b.n	80056f0 <_svfiprintf_r+0x1c0>
 8005718:	0800699c 	.word	0x0800699c
 800571c:	080069a6 	.word	0x080069a6
 8005720:	080033b9 	.word	0x080033b9
 8005724:	0800547d 	.word	0x0800547d
 8005728:	080069a2 	.word	0x080069a2

0800572c <__sflush_r>:
 800572c:	898a      	ldrh	r2, [r1, #12]
 800572e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005732:	4605      	mov	r5, r0
 8005734:	0710      	lsls	r0, r2, #28
 8005736:	460c      	mov	r4, r1
 8005738:	d458      	bmi.n	80057ec <__sflush_r+0xc0>
 800573a:	684b      	ldr	r3, [r1, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	dc05      	bgt.n	800574c <__sflush_r+0x20>
 8005740:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	dc02      	bgt.n	800574c <__sflush_r+0x20>
 8005746:	2000      	movs	r0, #0
 8005748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800574c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800574e:	2e00      	cmp	r6, #0
 8005750:	d0f9      	beq.n	8005746 <__sflush_r+0x1a>
 8005752:	2300      	movs	r3, #0
 8005754:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005758:	682f      	ldr	r7, [r5, #0]
 800575a:	6a21      	ldr	r1, [r4, #32]
 800575c:	602b      	str	r3, [r5, #0]
 800575e:	d032      	beq.n	80057c6 <__sflush_r+0x9a>
 8005760:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005762:	89a3      	ldrh	r3, [r4, #12]
 8005764:	075a      	lsls	r2, r3, #29
 8005766:	d505      	bpl.n	8005774 <__sflush_r+0x48>
 8005768:	6863      	ldr	r3, [r4, #4]
 800576a:	1ac0      	subs	r0, r0, r3
 800576c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800576e:	b10b      	cbz	r3, 8005774 <__sflush_r+0x48>
 8005770:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005772:	1ac0      	subs	r0, r0, r3
 8005774:	2300      	movs	r3, #0
 8005776:	4602      	mov	r2, r0
 8005778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800577a:	6a21      	ldr	r1, [r4, #32]
 800577c:	4628      	mov	r0, r5
 800577e:	47b0      	blx	r6
 8005780:	1c43      	adds	r3, r0, #1
 8005782:	89a3      	ldrh	r3, [r4, #12]
 8005784:	d106      	bne.n	8005794 <__sflush_r+0x68>
 8005786:	6829      	ldr	r1, [r5, #0]
 8005788:	291d      	cmp	r1, #29
 800578a:	d82b      	bhi.n	80057e4 <__sflush_r+0xb8>
 800578c:	4a29      	ldr	r2, [pc, #164]	; (8005834 <__sflush_r+0x108>)
 800578e:	410a      	asrs	r2, r1
 8005790:	07d6      	lsls	r6, r2, #31
 8005792:	d427      	bmi.n	80057e4 <__sflush_r+0xb8>
 8005794:	2200      	movs	r2, #0
 8005796:	6062      	str	r2, [r4, #4]
 8005798:	04d9      	lsls	r1, r3, #19
 800579a:	6922      	ldr	r2, [r4, #16]
 800579c:	6022      	str	r2, [r4, #0]
 800579e:	d504      	bpl.n	80057aa <__sflush_r+0x7e>
 80057a0:	1c42      	adds	r2, r0, #1
 80057a2:	d101      	bne.n	80057a8 <__sflush_r+0x7c>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	b903      	cbnz	r3, 80057aa <__sflush_r+0x7e>
 80057a8:	6560      	str	r0, [r4, #84]	; 0x54
 80057aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057ac:	602f      	str	r7, [r5, #0]
 80057ae:	2900      	cmp	r1, #0
 80057b0:	d0c9      	beq.n	8005746 <__sflush_r+0x1a>
 80057b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057b6:	4299      	cmp	r1, r3
 80057b8:	d002      	beq.n	80057c0 <__sflush_r+0x94>
 80057ba:	4628      	mov	r0, r5
 80057bc:	f7ff f9e2 	bl	8004b84 <_free_r>
 80057c0:	2000      	movs	r0, #0
 80057c2:	6360      	str	r0, [r4, #52]	; 0x34
 80057c4:	e7c0      	b.n	8005748 <__sflush_r+0x1c>
 80057c6:	2301      	movs	r3, #1
 80057c8:	4628      	mov	r0, r5
 80057ca:	47b0      	blx	r6
 80057cc:	1c41      	adds	r1, r0, #1
 80057ce:	d1c8      	bne.n	8005762 <__sflush_r+0x36>
 80057d0:	682b      	ldr	r3, [r5, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0c5      	beq.n	8005762 <__sflush_r+0x36>
 80057d6:	2b1d      	cmp	r3, #29
 80057d8:	d001      	beq.n	80057de <__sflush_r+0xb2>
 80057da:	2b16      	cmp	r3, #22
 80057dc:	d101      	bne.n	80057e2 <__sflush_r+0xb6>
 80057de:	602f      	str	r7, [r5, #0]
 80057e0:	e7b1      	b.n	8005746 <__sflush_r+0x1a>
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057e8:	81a3      	strh	r3, [r4, #12]
 80057ea:	e7ad      	b.n	8005748 <__sflush_r+0x1c>
 80057ec:	690f      	ldr	r7, [r1, #16]
 80057ee:	2f00      	cmp	r7, #0
 80057f0:	d0a9      	beq.n	8005746 <__sflush_r+0x1a>
 80057f2:	0793      	lsls	r3, r2, #30
 80057f4:	680e      	ldr	r6, [r1, #0]
 80057f6:	bf08      	it	eq
 80057f8:	694b      	ldreq	r3, [r1, #20]
 80057fa:	600f      	str	r7, [r1, #0]
 80057fc:	bf18      	it	ne
 80057fe:	2300      	movne	r3, #0
 8005800:	eba6 0807 	sub.w	r8, r6, r7
 8005804:	608b      	str	r3, [r1, #8]
 8005806:	f1b8 0f00 	cmp.w	r8, #0
 800580a:	dd9c      	ble.n	8005746 <__sflush_r+0x1a>
 800580c:	6a21      	ldr	r1, [r4, #32]
 800580e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005810:	4643      	mov	r3, r8
 8005812:	463a      	mov	r2, r7
 8005814:	4628      	mov	r0, r5
 8005816:	47b0      	blx	r6
 8005818:	2800      	cmp	r0, #0
 800581a:	dc06      	bgt.n	800582a <__sflush_r+0xfe>
 800581c:	89a3      	ldrh	r3, [r4, #12]
 800581e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005822:	81a3      	strh	r3, [r4, #12]
 8005824:	f04f 30ff 	mov.w	r0, #4294967295
 8005828:	e78e      	b.n	8005748 <__sflush_r+0x1c>
 800582a:	4407      	add	r7, r0
 800582c:	eba8 0800 	sub.w	r8, r8, r0
 8005830:	e7e9      	b.n	8005806 <__sflush_r+0xda>
 8005832:	bf00      	nop
 8005834:	dfbffffe 	.word	0xdfbffffe

08005838 <_fflush_r>:
 8005838:	b538      	push	{r3, r4, r5, lr}
 800583a:	690b      	ldr	r3, [r1, #16]
 800583c:	4605      	mov	r5, r0
 800583e:	460c      	mov	r4, r1
 8005840:	b913      	cbnz	r3, 8005848 <_fflush_r+0x10>
 8005842:	2500      	movs	r5, #0
 8005844:	4628      	mov	r0, r5
 8005846:	bd38      	pop	{r3, r4, r5, pc}
 8005848:	b118      	cbz	r0, 8005852 <_fflush_r+0x1a>
 800584a:	6a03      	ldr	r3, [r0, #32]
 800584c:	b90b      	cbnz	r3, 8005852 <_fflush_r+0x1a>
 800584e:	f7fe fa05 	bl	8003c5c <__sinit>
 8005852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0f3      	beq.n	8005842 <_fflush_r+0xa>
 800585a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800585c:	07d0      	lsls	r0, r2, #31
 800585e:	d404      	bmi.n	800586a <_fflush_r+0x32>
 8005860:	0599      	lsls	r1, r3, #22
 8005862:	d402      	bmi.n	800586a <_fflush_r+0x32>
 8005864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005866:	f7fe fb10 	bl	8003e8a <__retarget_lock_acquire_recursive>
 800586a:	4628      	mov	r0, r5
 800586c:	4621      	mov	r1, r4
 800586e:	f7ff ff5d 	bl	800572c <__sflush_r>
 8005872:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005874:	07da      	lsls	r2, r3, #31
 8005876:	4605      	mov	r5, r0
 8005878:	d4e4      	bmi.n	8005844 <_fflush_r+0xc>
 800587a:	89a3      	ldrh	r3, [r4, #12]
 800587c:	059b      	lsls	r3, r3, #22
 800587e:	d4e1      	bmi.n	8005844 <_fflush_r+0xc>
 8005880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005882:	f7fe fb03 	bl	8003e8c <__retarget_lock_release_recursive>
 8005886:	e7dd      	b.n	8005844 <_fflush_r+0xc>

08005888 <memmove>:
 8005888:	4288      	cmp	r0, r1
 800588a:	b510      	push	{r4, lr}
 800588c:	eb01 0402 	add.w	r4, r1, r2
 8005890:	d902      	bls.n	8005898 <memmove+0x10>
 8005892:	4284      	cmp	r4, r0
 8005894:	4623      	mov	r3, r4
 8005896:	d807      	bhi.n	80058a8 <memmove+0x20>
 8005898:	1e43      	subs	r3, r0, #1
 800589a:	42a1      	cmp	r1, r4
 800589c:	d008      	beq.n	80058b0 <memmove+0x28>
 800589e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058a6:	e7f8      	b.n	800589a <memmove+0x12>
 80058a8:	4402      	add	r2, r0
 80058aa:	4601      	mov	r1, r0
 80058ac:	428a      	cmp	r2, r1
 80058ae:	d100      	bne.n	80058b2 <memmove+0x2a>
 80058b0:	bd10      	pop	{r4, pc}
 80058b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058ba:	e7f7      	b.n	80058ac <memmove+0x24>

080058bc <_sbrk_r>:
 80058bc:	b538      	push	{r3, r4, r5, lr}
 80058be:	4d06      	ldr	r5, [pc, #24]	; (80058d8 <_sbrk_r+0x1c>)
 80058c0:	2300      	movs	r3, #0
 80058c2:	4604      	mov	r4, r0
 80058c4:	4608      	mov	r0, r1
 80058c6:	602b      	str	r3, [r5, #0]
 80058c8:	f7fc f982 	bl	8001bd0 <_sbrk>
 80058cc:	1c43      	adds	r3, r0, #1
 80058ce:	d102      	bne.n	80058d6 <_sbrk_r+0x1a>
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	b103      	cbz	r3, 80058d6 <_sbrk_r+0x1a>
 80058d4:	6023      	str	r3, [r4, #0]
 80058d6:	bd38      	pop	{r3, r4, r5, pc}
 80058d8:	2000043c 	.word	0x2000043c

080058dc <memcpy>:
 80058dc:	440a      	add	r2, r1
 80058de:	4291      	cmp	r1, r2
 80058e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80058e4:	d100      	bne.n	80058e8 <memcpy+0xc>
 80058e6:	4770      	bx	lr
 80058e8:	b510      	push	{r4, lr}
 80058ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058f2:	4291      	cmp	r1, r2
 80058f4:	d1f9      	bne.n	80058ea <memcpy+0xe>
 80058f6:	bd10      	pop	{r4, pc}

080058f8 <__assert_func>:
 80058f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80058fa:	4614      	mov	r4, r2
 80058fc:	461a      	mov	r2, r3
 80058fe:	4b09      	ldr	r3, [pc, #36]	; (8005924 <__assert_func+0x2c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4605      	mov	r5, r0
 8005904:	68d8      	ldr	r0, [r3, #12]
 8005906:	b14c      	cbz	r4, 800591c <__assert_func+0x24>
 8005908:	4b07      	ldr	r3, [pc, #28]	; (8005928 <__assert_func+0x30>)
 800590a:	9100      	str	r1, [sp, #0]
 800590c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005910:	4906      	ldr	r1, [pc, #24]	; (800592c <__assert_func+0x34>)
 8005912:	462b      	mov	r3, r5
 8005914:	f000 f872 	bl	80059fc <fiprintf>
 8005918:	f000 f882 	bl	8005a20 <abort>
 800591c:	4b04      	ldr	r3, [pc, #16]	; (8005930 <__assert_func+0x38>)
 800591e:	461c      	mov	r4, r3
 8005920:	e7f3      	b.n	800590a <__assert_func+0x12>
 8005922:	bf00      	nop
 8005924:	2000007c 	.word	0x2000007c
 8005928:	080069b7 	.word	0x080069b7
 800592c:	080069c4 	.word	0x080069c4
 8005930:	080069f2 	.word	0x080069f2

08005934 <_calloc_r>:
 8005934:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005936:	fba1 2402 	umull	r2, r4, r1, r2
 800593a:	b94c      	cbnz	r4, 8005950 <_calloc_r+0x1c>
 800593c:	4611      	mov	r1, r2
 800593e:	9201      	str	r2, [sp, #4]
 8005940:	f7ff f994 	bl	8004c6c <_malloc_r>
 8005944:	9a01      	ldr	r2, [sp, #4]
 8005946:	4605      	mov	r5, r0
 8005948:	b930      	cbnz	r0, 8005958 <_calloc_r+0x24>
 800594a:	4628      	mov	r0, r5
 800594c:	b003      	add	sp, #12
 800594e:	bd30      	pop	{r4, r5, pc}
 8005950:	220c      	movs	r2, #12
 8005952:	6002      	str	r2, [r0, #0]
 8005954:	2500      	movs	r5, #0
 8005956:	e7f8      	b.n	800594a <_calloc_r+0x16>
 8005958:	4621      	mov	r1, r4
 800595a:	f7fe fa18 	bl	8003d8e <memset>
 800595e:	e7f4      	b.n	800594a <_calloc_r+0x16>

08005960 <__ascii_mbtowc>:
 8005960:	b082      	sub	sp, #8
 8005962:	b901      	cbnz	r1, 8005966 <__ascii_mbtowc+0x6>
 8005964:	a901      	add	r1, sp, #4
 8005966:	b142      	cbz	r2, 800597a <__ascii_mbtowc+0x1a>
 8005968:	b14b      	cbz	r3, 800597e <__ascii_mbtowc+0x1e>
 800596a:	7813      	ldrb	r3, [r2, #0]
 800596c:	600b      	str	r3, [r1, #0]
 800596e:	7812      	ldrb	r2, [r2, #0]
 8005970:	1e10      	subs	r0, r2, #0
 8005972:	bf18      	it	ne
 8005974:	2001      	movne	r0, #1
 8005976:	b002      	add	sp, #8
 8005978:	4770      	bx	lr
 800597a:	4610      	mov	r0, r2
 800597c:	e7fb      	b.n	8005976 <__ascii_mbtowc+0x16>
 800597e:	f06f 0001 	mvn.w	r0, #1
 8005982:	e7f8      	b.n	8005976 <__ascii_mbtowc+0x16>

08005984 <_realloc_r>:
 8005984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005988:	4680      	mov	r8, r0
 800598a:	4614      	mov	r4, r2
 800598c:	460e      	mov	r6, r1
 800598e:	b921      	cbnz	r1, 800599a <_realloc_r+0x16>
 8005990:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005994:	4611      	mov	r1, r2
 8005996:	f7ff b969 	b.w	8004c6c <_malloc_r>
 800599a:	b92a      	cbnz	r2, 80059a8 <_realloc_r+0x24>
 800599c:	f7ff f8f2 	bl	8004b84 <_free_r>
 80059a0:	4625      	mov	r5, r4
 80059a2:	4628      	mov	r0, r5
 80059a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059a8:	f000 f841 	bl	8005a2e <_malloc_usable_size_r>
 80059ac:	4284      	cmp	r4, r0
 80059ae:	4607      	mov	r7, r0
 80059b0:	d802      	bhi.n	80059b8 <_realloc_r+0x34>
 80059b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80059b6:	d812      	bhi.n	80059de <_realloc_r+0x5a>
 80059b8:	4621      	mov	r1, r4
 80059ba:	4640      	mov	r0, r8
 80059bc:	f7ff f956 	bl	8004c6c <_malloc_r>
 80059c0:	4605      	mov	r5, r0
 80059c2:	2800      	cmp	r0, #0
 80059c4:	d0ed      	beq.n	80059a2 <_realloc_r+0x1e>
 80059c6:	42bc      	cmp	r4, r7
 80059c8:	4622      	mov	r2, r4
 80059ca:	4631      	mov	r1, r6
 80059cc:	bf28      	it	cs
 80059ce:	463a      	movcs	r2, r7
 80059d0:	f7ff ff84 	bl	80058dc <memcpy>
 80059d4:	4631      	mov	r1, r6
 80059d6:	4640      	mov	r0, r8
 80059d8:	f7ff f8d4 	bl	8004b84 <_free_r>
 80059dc:	e7e1      	b.n	80059a2 <_realloc_r+0x1e>
 80059de:	4635      	mov	r5, r6
 80059e0:	e7df      	b.n	80059a2 <_realloc_r+0x1e>

080059e2 <__ascii_wctomb>:
 80059e2:	b149      	cbz	r1, 80059f8 <__ascii_wctomb+0x16>
 80059e4:	2aff      	cmp	r2, #255	; 0xff
 80059e6:	bf85      	ittet	hi
 80059e8:	238a      	movhi	r3, #138	; 0x8a
 80059ea:	6003      	strhi	r3, [r0, #0]
 80059ec:	700a      	strbls	r2, [r1, #0]
 80059ee:	f04f 30ff 	movhi.w	r0, #4294967295
 80059f2:	bf98      	it	ls
 80059f4:	2001      	movls	r0, #1
 80059f6:	4770      	bx	lr
 80059f8:	4608      	mov	r0, r1
 80059fa:	4770      	bx	lr

080059fc <fiprintf>:
 80059fc:	b40e      	push	{r1, r2, r3}
 80059fe:	b503      	push	{r0, r1, lr}
 8005a00:	4601      	mov	r1, r0
 8005a02:	ab03      	add	r3, sp, #12
 8005a04:	4805      	ldr	r0, [pc, #20]	; (8005a1c <fiprintf+0x20>)
 8005a06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a0a:	6800      	ldr	r0, [r0, #0]
 8005a0c:	9301      	str	r3, [sp, #4]
 8005a0e:	f000 f83f 	bl	8005a90 <_vfiprintf_r>
 8005a12:	b002      	add	sp, #8
 8005a14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a18:	b003      	add	sp, #12
 8005a1a:	4770      	bx	lr
 8005a1c:	2000007c 	.word	0x2000007c

08005a20 <abort>:
 8005a20:	b508      	push	{r3, lr}
 8005a22:	2006      	movs	r0, #6
 8005a24:	f000 fa0c 	bl	8005e40 <raise>
 8005a28:	2001      	movs	r0, #1
 8005a2a:	f7fc f859 	bl	8001ae0 <_exit>

08005a2e <_malloc_usable_size_r>:
 8005a2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a32:	1f18      	subs	r0, r3, #4
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	bfbc      	itt	lt
 8005a38:	580b      	ldrlt	r3, [r1, r0]
 8005a3a:	18c0      	addlt	r0, r0, r3
 8005a3c:	4770      	bx	lr

08005a3e <__sfputc_r>:
 8005a3e:	6893      	ldr	r3, [r2, #8]
 8005a40:	3b01      	subs	r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	b410      	push	{r4}
 8005a46:	6093      	str	r3, [r2, #8]
 8005a48:	da08      	bge.n	8005a5c <__sfputc_r+0x1e>
 8005a4a:	6994      	ldr	r4, [r2, #24]
 8005a4c:	42a3      	cmp	r3, r4
 8005a4e:	db01      	blt.n	8005a54 <__sfputc_r+0x16>
 8005a50:	290a      	cmp	r1, #10
 8005a52:	d103      	bne.n	8005a5c <__sfputc_r+0x1e>
 8005a54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a58:	f000 b934 	b.w	8005cc4 <__swbuf_r>
 8005a5c:	6813      	ldr	r3, [r2, #0]
 8005a5e:	1c58      	adds	r0, r3, #1
 8005a60:	6010      	str	r0, [r2, #0]
 8005a62:	7019      	strb	r1, [r3, #0]
 8005a64:	4608      	mov	r0, r1
 8005a66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <__sfputs_r>:
 8005a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6e:	4606      	mov	r6, r0
 8005a70:	460f      	mov	r7, r1
 8005a72:	4614      	mov	r4, r2
 8005a74:	18d5      	adds	r5, r2, r3
 8005a76:	42ac      	cmp	r4, r5
 8005a78:	d101      	bne.n	8005a7e <__sfputs_r+0x12>
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	e007      	b.n	8005a8e <__sfputs_r+0x22>
 8005a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a82:	463a      	mov	r2, r7
 8005a84:	4630      	mov	r0, r6
 8005a86:	f7ff ffda 	bl	8005a3e <__sfputc_r>
 8005a8a:	1c43      	adds	r3, r0, #1
 8005a8c:	d1f3      	bne.n	8005a76 <__sfputs_r+0xa>
 8005a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a90 <_vfiprintf_r>:
 8005a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a94:	460d      	mov	r5, r1
 8005a96:	b09d      	sub	sp, #116	; 0x74
 8005a98:	4614      	mov	r4, r2
 8005a9a:	4698      	mov	r8, r3
 8005a9c:	4606      	mov	r6, r0
 8005a9e:	b118      	cbz	r0, 8005aa8 <_vfiprintf_r+0x18>
 8005aa0:	6a03      	ldr	r3, [r0, #32]
 8005aa2:	b90b      	cbnz	r3, 8005aa8 <_vfiprintf_r+0x18>
 8005aa4:	f7fe f8da 	bl	8003c5c <__sinit>
 8005aa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005aaa:	07d9      	lsls	r1, r3, #31
 8005aac:	d405      	bmi.n	8005aba <_vfiprintf_r+0x2a>
 8005aae:	89ab      	ldrh	r3, [r5, #12]
 8005ab0:	059a      	lsls	r2, r3, #22
 8005ab2:	d402      	bmi.n	8005aba <_vfiprintf_r+0x2a>
 8005ab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ab6:	f7fe f9e8 	bl	8003e8a <__retarget_lock_acquire_recursive>
 8005aba:	89ab      	ldrh	r3, [r5, #12]
 8005abc:	071b      	lsls	r3, r3, #28
 8005abe:	d501      	bpl.n	8005ac4 <_vfiprintf_r+0x34>
 8005ac0:	692b      	ldr	r3, [r5, #16]
 8005ac2:	b99b      	cbnz	r3, 8005aec <_vfiprintf_r+0x5c>
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	4630      	mov	r0, r6
 8005ac8:	f000 f93a 	bl	8005d40 <__swsetup_r>
 8005acc:	b170      	cbz	r0, 8005aec <_vfiprintf_r+0x5c>
 8005ace:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ad0:	07dc      	lsls	r4, r3, #31
 8005ad2:	d504      	bpl.n	8005ade <_vfiprintf_r+0x4e>
 8005ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad8:	b01d      	add	sp, #116	; 0x74
 8005ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ade:	89ab      	ldrh	r3, [r5, #12]
 8005ae0:	0598      	lsls	r0, r3, #22
 8005ae2:	d4f7      	bmi.n	8005ad4 <_vfiprintf_r+0x44>
 8005ae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ae6:	f7fe f9d1 	bl	8003e8c <__retarget_lock_release_recursive>
 8005aea:	e7f3      	b.n	8005ad4 <_vfiprintf_r+0x44>
 8005aec:	2300      	movs	r3, #0
 8005aee:	9309      	str	r3, [sp, #36]	; 0x24
 8005af0:	2320      	movs	r3, #32
 8005af2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005afa:	2330      	movs	r3, #48	; 0x30
 8005afc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005cb0 <_vfiprintf_r+0x220>
 8005b00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b04:	f04f 0901 	mov.w	r9, #1
 8005b08:	4623      	mov	r3, r4
 8005b0a:	469a      	mov	sl, r3
 8005b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b10:	b10a      	cbz	r2, 8005b16 <_vfiprintf_r+0x86>
 8005b12:	2a25      	cmp	r2, #37	; 0x25
 8005b14:	d1f9      	bne.n	8005b0a <_vfiprintf_r+0x7a>
 8005b16:	ebba 0b04 	subs.w	fp, sl, r4
 8005b1a:	d00b      	beq.n	8005b34 <_vfiprintf_r+0xa4>
 8005b1c:	465b      	mov	r3, fp
 8005b1e:	4622      	mov	r2, r4
 8005b20:	4629      	mov	r1, r5
 8005b22:	4630      	mov	r0, r6
 8005b24:	f7ff ffa2 	bl	8005a6c <__sfputs_r>
 8005b28:	3001      	adds	r0, #1
 8005b2a:	f000 80a9 	beq.w	8005c80 <_vfiprintf_r+0x1f0>
 8005b2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b30:	445a      	add	r2, fp
 8005b32:	9209      	str	r2, [sp, #36]	; 0x24
 8005b34:	f89a 3000 	ldrb.w	r3, [sl]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 80a1 	beq.w	8005c80 <_vfiprintf_r+0x1f0>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f04f 32ff 	mov.w	r2, #4294967295
 8005b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b48:	f10a 0a01 	add.w	sl, sl, #1
 8005b4c:	9304      	str	r3, [sp, #16]
 8005b4e:	9307      	str	r3, [sp, #28]
 8005b50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b54:	931a      	str	r3, [sp, #104]	; 0x68
 8005b56:	4654      	mov	r4, sl
 8005b58:	2205      	movs	r2, #5
 8005b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b5e:	4854      	ldr	r0, [pc, #336]	; (8005cb0 <_vfiprintf_r+0x220>)
 8005b60:	f7fa fb3e 	bl	80001e0 <memchr>
 8005b64:	9a04      	ldr	r2, [sp, #16]
 8005b66:	b9d8      	cbnz	r0, 8005ba0 <_vfiprintf_r+0x110>
 8005b68:	06d1      	lsls	r1, r2, #27
 8005b6a:	bf44      	itt	mi
 8005b6c:	2320      	movmi	r3, #32
 8005b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b72:	0713      	lsls	r3, r2, #28
 8005b74:	bf44      	itt	mi
 8005b76:	232b      	movmi	r3, #43	; 0x2b
 8005b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b80:	2b2a      	cmp	r3, #42	; 0x2a
 8005b82:	d015      	beq.n	8005bb0 <_vfiprintf_r+0x120>
 8005b84:	9a07      	ldr	r2, [sp, #28]
 8005b86:	4654      	mov	r4, sl
 8005b88:	2000      	movs	r0, #0
 8005b8a:	f04f 0c0a 	mov.w	ip, #10
 8005b8e:	4621      	mov	r1, r4
 8005b90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b94:	3b30      	subs	r3, #48	; 0x30
 8005b96:	2b09      	cmp	r3, #9
 8005b98:	d94d      	bls.n	8005c36 <_vfiprintf_r+0x1a6>
 8005b9a:	b1b0      	cbz	r0, 8005bca <_vfiprintf_r+0x13a>
 8005b9c:	9207      	str	r2, [sp, #28]
 8005b9e:	e014      	b.n	8005bca <_vfiprintf_r+0x13a>
 8005ba0:	eba0 0308 	sub.w	r3, r0, r8
 8005ba4:	fa09 f303 	lsl.w	r3, r9, r3
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	9304      	str	r3, [sp, #16]
 8005bac:	46a2      	mov	sl, r4
 8005bae:	e7d2      	b.n	8005b56 <_vfiprintf_r+0xc6>
 8005bb0:	9b03      	ldr	r3, [sp, #12]
 8005bb2:	1d19      	adds	r1, r3, #4
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	9103      	str	r1, [sp, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	bfbb      	ittet	lt
 8005bbc:	425b      	neglt	r3, r3
 8005bbe:	f042 0202 	orrlt.w	r2, r2, #2
 8005bc2:	9307      	strge	r3, [sp, #28]
 8005bc4:	9307      	strlt	r3, [sp, #28]
 8005bc6:	bfb8      	it	lt
 8005bc8:	9204      	strlt	r2, [sp, #16]
 8005bca:	7823      	ldrb	r3, [r4, #0]
 8005bcc:	2b2e      	cmp	r3, #46	; 0x2e
 8005bce:	d10c      	bne.n	8005bea <_vfiprintf_r+0x15a>
 8005bd0:	7863      	ldrb	r3, [r4, #1]
 8005bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8005bd4:	d134      	bne.n	8005c40 <_vfiprintf_r+0x1b0>
 8005bd6:	9b03      	ldr	r3, [sp, #12]
 8005bd8:	1d1a      	adds	r2, r3, #4
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	9203      	str	r2, [sp, #12]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	bfb8      	it	lt
 8005be2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005be6:	3402      	adds	r4, #2
 8005be8:	9305      	str	r3, [sp, #20]
 8005bea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005cc0 <_vfiprintf_r+0x230>
 8005bee:	7821      	ldrb	r1, [r4, #0]
 8005bf0:	2203      	movs	r2, #3
 8005bf2:	4650      	mov	r0, sl
 8005bf4:	f7fa faf4 	bl	80001e0 <memchr>
 8005bf8:	b138      	cbz	r0, 8005c0a <_vfiprintf_r+0x17a>
 8005bfa:	9b04      	ldr	r3, [sp, #16]
 8005bfc:	eba0 000a 	sub.w	r0, r0, sl
 8005c00:	2240      	movs	r2, #64	; 0x40
 8005c02:	4082      	lsls	r2, r0
 8005c04:	4313      	orrs	r3, r2
 8005c06:	3401      	adds	r4, #1
 8005c08:	9304      	str	r3, [sp, #16]
 8005c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c0e:	4829      	ldr	r0, [pc, #164]	; (8005cb4 <_vfiprintf_r+0x224>)
 8005c10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c14:	2206      	movs	r2, #6
 8005c16:	f7fa fae3 	bl	80001e0 <memchr>
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	d03f      	beq.n	8005c9e <_vfiprintf_r+0x20e>
 8005c1e:	4b26      	ldr	r3, [pc, #152]	; (8005cb8 <_vfiprintf_r+0x228>)
 8005c20:	bb1b      	cbnz	r3, 8005c6a <_vfiprintf_r+0x1da>
 8005c22:	9b03      	ldr	r3, [sp, #12]
 8005c24:	3307      	adds	r3, #7
 8005c26:	f023 0307 	bic.w	r3, r3, #7
 8005c2a:	3308      	adds	r3, #8
 8005c2c:	9303      	str	r3, [sp, #12]
 8005c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c30:	443b      	add	r3, r7
 8005c32:	9309      	str	r3, [sp, #36]	; 0x24
 8005c34:	e768      	b.n	8005b08 <_vfiprintf_r+0x78>
 8005c36:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	2001      	movs	r0, #1
 8005c3e:	e7a6      	b.n	8005b8e <_vfiprintf_r+0xfe>
 8005c40:	2300      	movs	r3, #0
 8005c42:	3401      	adds	r4, #1
 8005c44:	9305      	str	r3, [sp, #20]
 8005c46:	4619      	mov	r1, r3
 8005c48:	f04f 0c0a 	mov.w	ip, #10
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c52:	3a30      	subs	r2, #48	; 0x30
 8005c54:	2a09      	cmp	r2, #9
 8005c56:	d903      	bls.n	8005c60 <_vfiprintf_r+0x1d0>
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d0c6      	beq.n	8005bea <_vfiprintf_r+0x15a>
 8005c5c:	9105      	str	r1, [sp, #20]
 8005c5e:	e7c4      	b.n	8005bea <_vfiprintf_r+0x15a>
 8005c60:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c64:	4604      	mov	r4, r0
 8005c66:	2301      	movs	r3, #1
 8005c68:	e7f0      	b.n	8005c4c <_vfiprintf_r+0x1bc>
 8005c6a:	ab03      	add	r3, sp, #12
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	462a      	mov	r2, r5
 8005c70:	4b12      	ldr	r3, [pc, #72]	; (8005cbc <_vfiprintf_r+0x22c>)
 8005c72:	a904      	add	r1, sp, #16
 8005c74:	4630      	mov	r0, r6
 8005c76:	f7fd fb9f 	bl	80033b8 <_printf_float>
 8005c7a:	4607      	mov	r7, r0
 8005c7c:	1c78      	adds	r0, r7, #1
 8005c7e:	d1d6      	bne.n	8005c2e <_vfiprintf_r+0x19e>
 8005c80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c82:	07d9      	lsls	r1, r3, #31
 8005c84:	d405      	bmi.n	8005c92 <_vfiprintf_r+0x202>
 8005c86:	89ab      	ldrh	r3, [r5, #12]
 8005c88:	059a      	lsls	r2, r3, #22
 8005c8a:	d402      	bmi.n	8005c92 <_vfiprintf_r+0x202>
 8005c8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c8e:	f7fe f8fd 	bl	8003e8c <__retarget_lock_release_recursive>
 8005c92:	89ab      	ldrh	r3, [r5, #12]
 8005c94:	065b      	lsls	r3, r3, #25
 8005c96:	f53f af1d 	bmi.w	8005ad4 <_vfiprintf_r+0x44>
 8005c9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c9c:	e71c      	b.n	8005ad8 <_vfiprintf_r+0x48>
 8005c9e:	ab03      	add	r3, sp, #12
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	462a      	mov	r2, r5
 8005ca4:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <_vfiprintf_r+0x22c>)
 8005ca6:	a904      	add	r1, sp, #16
 8005ca8:	4630      	mov	r0, r6
 8005caa:	f7fd fe29 	bl	8003900 <_printf_i>
 8005cae:	e7e4      	b.n	8005c7a <_vfiprintf_r+0x1ea>
 8005cb0:	0800699c 	.word	0x0800699c
 8005cb4:	080069a6 	.word	0x080069a6
 8005cb8:	080033b9 	.word	0x080033b9
 8005cbc:	08005a6d 	.word	0x08005a6d
 8005cc0:	080069a2 	.word	0x080069a2

08005cc4 <__swbuf_r>:
 8005cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc6:	460e      	mov	r6, r1
 8005cc8:	4614      	mov	r4, r2
 8005cca:	4605      	mov	r5, r0
 8005ccc:	b118      	cbz	r0, 8005cd6 <__swbuf_r+0x12>
 8005cce:	6a03      	ldr	r3, [r0, #32]
 8005cd0:	b90b      	cbnz	r3, 8005cd6 <__swbuf_r+0x12>
 8005cd2:	f7fd ffc3 	bl	8003c5c <__sinit>
 8005cd6:	69a3      	ldr	r3, [r4, #24]
 8005cd8:	60a3      	str	r3, [r4, #8]
 8005cda:	89a3      	ldrh	r3, [r4, #12]
 8005cdc:	071a      	lsls	r2, r3, #28
 8005cde:	d525      	bpl.n	8005d2c <__swbuf_r+0x68>
 8005ce0:	6923      	ldr	r3, [r4, #16]
 8005ce2:	b31b      	cbz	r3, 8005d2c <__swbuf_r+0x68>
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	6922      	ldr	r2, [r4, #16]
 8005ce8:	1a98      	subs	r0, r3, r2
 8005cea:	6963      	ldr	r3, [r4, #20]
 8005cec:	b2f6      	uxtb	r6, r6
 8005cee:	4283      	cmp	r3, r0
 8005cf0:	4637      	mov	r7, r6
 8005cf2:	dc04      	bgt.n	8005cfe <__swbuf_r+0x3a>
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f7ff fd9e 	bl	8005838 <_fflush_r>
 8005cfc:	b9e0      	cbnz	r0, 8005d38 <__swbuf_r+0x74>
 8005cfe:	68a3      	ldr	r3, [r4, #8]
 8005d00:	3b01      	subs	r3, #1
 8005d02:	60a3      	str	r3, [r4, #8]
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	6022      	str	r2, [r4, #0]
 8005d0a:	701e      	strb	r6, [r3, #0]
 8005d0c:	6962      	ldr	r2, [r4, #20]
 8005d0e:	1c43      	adds	r3, r0, #1
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d004      	beq.n	8005d1e <__swbuf_r+0x5a>
 8005d14:	89a3      	ldrh	r3, [r4, #12]
 8005d16:	07db      	lsls	r3, r3, #31
 8005d18:	d506      	bpl.n	8005d28 <__swbuf_r+0x64>
 8005d1a:	2e0a      	cmp	r6, #10
 8005d1c:	d104      	bne.n	8005d28 <__swbuf_r+0x64>
 8005d1e:	4621      	mov	r1, r4
 8005d20:	4628      	mov	r0, r5
 8005d22:	f7ff fd89 	bl	8005838 <_fflush_r>
 8005d26:	b938      	cbnz	r0, 8005d38 <__swbuf_r+0x74>
 8005d28:	4638      	mov	r0, r7
 8005d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d2c:	4621      	mov	r1, r4
 8005d2e:	4628      	mov	r0, r5
 8005d30:	f000 f806 	bl	8005d40 <__swsetup_r>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	d0d5      	beq.n	8005ce4 <__swbuf_r+0x20>
 8005d38:	f04f 37ff 	mov.w	r7, #4294967295
 8005d3c:	e7f4      	b.n	8005d28 <__swbuf_r+0x64>
	...

08005d40 <__swsetup_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	4b2a      	ldr	r3, [pc, #168]	; (8005dec <__swsetup_r+0xac>)
 8005d44:	4605      	mov	r5, r0
 8005d46:	6818      	ldr	r0, [r3, #0]
 8005d48:	460c      	mov	r4, r1
 8005d4a:	b118      	cbz	r0, 8005d54 <__swsetup_r+0x14>
 8005d4c:	6a03      	ldr	r3, [r0, #32]
 8005d4e:	b90b      	cbnz	r3, 8005d54 <__swsetup_r+0x14>
 8005d50:	f7fd ff84 	bl	8003c5c <__sinit>
 8005d54:	89a3      	ldrh	r3, [r4, #12]
 8005d56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d5a:	0718      	lsls	r0, r3, #28
 8005d5c:	d422      	bmi.n	8005da4 <__swsetup_r+0x64>
 8005d5e:	06d9      	lsls	r1, r3, #27
 8005d60:	d407      	bmi.n	8005d72 <__swsetup_r+0x32>
 8005d62:	2309      	movs	r3, #9
 8005d64:	602b      	str	r3, [r5, #0]
 8005d66:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d6a:	81a3      	strh	r3, [r4, #12]
 8005d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d70:	e034      	b.n	8005ddc <__swsetup_r+0x9c>
 8005d72:	0758      	lsls	r0, r3, #29
 8005d74:	d512      	bpl.n	8005d9c <__swsetup_r+0x5c>
 8005d76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d78:	b141      	cbz	r1, 8005d8c <__swsetup_r+0x4c>
 8005d7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d7e:	4299      	cmp	r1, r3
 8005d80:	d002      	beq.n	8005d88 <__swsetup_r+0x48>
 8005d82:	4628      	mov	r0, r5
 8005d84:	f7fe fefe 	bl	8004b84 <_free_r>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	6363      	str	r3, [r4, #52]	; 0x34
 8005d8c:	89a3      	ldrh	r3, [r4, #12]
 8005d8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d92:	81a3      	strh	r3, [r4, #12]
 8005d94:	2300      	movs	r3, #0
 8005d96:	6063      	str	r3, [r4, #4]
 8005d98:	6923      	ldr	r3, [r4, #16]
 8005d9a:	6023      	str	r3, [r4, #0]
 8005d9c:	89a3      	ldrh	r3, [r4, #12]
 8005d9e:	f043 0308 	orr.w	r3, r3, #8
 8005da2:	81a3      	strh	r3, [r4, #12]
 8005da4:	6923      	ldr	r3, [r4, #16]
 8005da6:	b94b      	cbnz	r3, 8005dbc <__swsetup_r+0x7c>
 8005da8:	89a3      	ldrh	r3, [r4, #12]
 8005daa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db2:	d003      	beq.n	8005dbc <__swsetup_r+0x7c>
 8005db4:	4621      	mov	r1, r4
 8005db6:	4628      	mov	r0, r5
 8005db8:	f000 f884 	bl	8005ec4 <__smakebuf_r>
 8005dbc:	89a0      	ldrh	r0, [r4, #12]
 8005dbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005dc2:	f010 0301 	ands.w	r3, r0, #1
 8005dc6:	d00a      	beq.n	8005dde <__swsetup_r+0x9e>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60a3      	str	r3, [r4, #8]
 8005dcc:	6963      	ldr	r3, [r4, #20]
 8005dce:	425b      	negs	r3, r3
 8005dd0:	61a3      	str	r3, [r4, #24]
 8005dd2:	6923      	ldr	r3, [r4, #16]
 8005dd4:	b943      	cbnz	r3, 8005de8 <__swsetup_r+0xa8>
 8005dd6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005dda:	d1c4      	bne.n	8005d66 <__swsetup_r+0x26>
 8005ddc:	bd38      	pop	{r3, r4, r5, pc}
 8005dde:	0781      	lsls	r1, r0, #30
 8005de0:	bf58      	it	pl
 8005de2:	6963      	ldrpl	r3, [r4, #20]
 8005de4:	60a3      	str	r3, [r4, #8]
 8005de6:	e7f4      	b.n	8005dd2 <__swsetup_r+0x92>
 8005de8:	2000      	movs	r0, #0
 8005dea:	e7f7      	b.n	8005ddc <__swsetup_r+0x9c>
 8005dec:	2000007c 	.word	0x2000007c

08005df0 <_raise_r>:
 8005df0:	291f      	cmp	r1, #31
 8005df2:	b538      	push	{r3, r4, r5, lr}
 8005df4:	4604      	mov	r4, r0
 8005df6:	460d      	mov	r5, r1
 8005df8:	d904      	bls.n	8005e04 <_raise_r+0x14>
 8005dfa:	2316      	movs	r3, #22
 8005dfc:	6003      	str	r3, [r0, #0]
 8005dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8005e02:	bd38      	pop	{r3, r4, r5, pc}
 8005e04:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005e06:	b112      	cbz	r2, 8005e0e <_raise_r+0x1e>
 8005e08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005e0c:	b94b      	cbnz	r3, 8005e22 <_raise_r+0x32>
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f000 f830 	bl	8005e74 <_getpid_r>
 8005e14:	462a      	mov	r2, r5
 8005e16:	4601      	mov	r1, r0
 8005e18:	4620      	mov	r0, r4
 8005e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e1e:	f000 b817 	b.w	8005e50 <_kill_r>
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d00a      	beq.n	8005e3c <_raise_r+0x4c>
 8005e26:	1c59      	adds	r1, r3, #1
 8005e28:	d103      	bne.n	8005e32 <_raise_r+0x42>
 8005e2a:	2316      	movs	r3, #22
 8005e2c:	6003      	str	r3, [r0, #0]
 8005e2e:	2001      	movs	r0, #1
 8005e30:	e7e7      	b.n	8005e02 <_raise_r+0x12>
 8005e32:	2400      	movs	r4, #0
 8005e34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005e38:	4628      	mov	r0, r5
 8005e3a:	4798      	blx	r3
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	e7e0      	b.n	8005e02 <_raise_r+0x12>

08005e40 <raise>:
 8005e40:	4b02      	ldr	r3, [pc, #8]	; (8005e4c <raise+0xc>)
 8005e42:	4601      	mov	r1, r0
 8005e44:	6818      	ldr	r0, [r3, #0]
 8005e46:	f7ff bfd3 	b.w	8005df0 <_raise_r>
 8005e4a:	bf00      	nop
 8005e4c:	2000007c 	.word	0x2000007c

08005e50 <_kill_r>:
 8005e50:	b538      	push	{r3, r4, r5, lr}
 8005e52:	4d07      	ldr	r5, [pc, #28]	; (8005e70 <_kill_r+0x20>)
 8005e54:	2300      	movs	r3, #0
 8005e56:	4604      	mov	r4, r0
 8005e58:	4608      	mov	r0, r1
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	602b      	str	r3, [r5, #0]
 8005e5e:	f7fb fe2f 	bl	8001ac0 <_kill>
 8005e62:	1c43      	adds	r3, r0, #1
 8005e64:	d102      	bne.n	8005e6c <_kill_r+0x1c>
 8005e66:	682b      	ldr	r3, [r5, #0]
 8005e68:	b103      	cbz	r3, 8005e6c <_kill_r+0x1c>
 8005e6a:	6023      	str	r3, [r4, #0]
 8005e6c:	bd38      	pop	{r3, r4, r5, pc}
 8005e6e:	bf00      	nop
 8005e70:	2000043c 	.word	0x2000043c

08005e74 <_getpid_r>:
 8005e74:	f7fb be1c 	b.w	8001ab0 <_getpid>

08005e78 <__swhatbuf_r>:
 8005e78:	b570      	push	{r4, r5, r6, lr}
 8005e7a:	460c      	mov	r4, r1
 8005e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e80:	2900      	cmp	r1, #0
 8005e82:	b096      	sub	sp, #88	; 0x58
 8005e84:	4615      	mov	r5, r2
 8005e86:	461e      	mov	r6, r3
 8005e88:	da0d      	bge.n	8005ea6 <__swhatbuf_r+0x2e>
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005e90:	f04f 0100 	mov.w	r1, #0
 8005e94:	bf0c      	ite	eq
 8005e96:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005e9a:	2340      	movne	r3, #64	; 0x40
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	6031      	str	r1, [r6, #0]
 8005ea0:	602b      	str	r3, [r5, #0]
 8005ea2:	b016      	add	sp, #88	; 0x58
 8005ea4:	bd70      	pop	{r4, r5, r6, pc}
 8005ea6:	466a      	mov	r2, sp
 8005ea8:	f000 f848 	bl	8005f3c <_fstat_r>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	dbec      	blt.n	8005e8a <__swhatbuf_r+0x12>
 8005eb0:	9901      	ldr	r1, [sp, #4]
 8005eb2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005eb6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005eba:	4259      	negs	r1, r3
 8005ebc:	4159      	adcs	r1, r3
 8005ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ec2:	e7eb      	b.n	8005e9c <__swhatbuf_r+0x24>

08005ec4 <__smakebuf_r>:
 8005ec4:	898b      	ldrh	r3, [r1, #12]
 8005ec6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ec8:	079d      	lsls	r5, r3, #30
 8005eca:	4606      	mov	r6, r0
 8005ecc:	460c      	mov	r4, r1
 8005ece:	d507      	bpl.n	8005ee0 <__smakebuf_r+0x1c>
 8005ed0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	6123      	str	r3, [r4, #16]
 8005ed8:	2301      	movs	r3, #1
 8005eda:	6163      	str	r3, [r4, #20]
 8005edc:	b002      	add	sp, #8
 8005ede:	bd70      	pop	{r4, r5, r6, pc}
 8005ee0:	ab01      	add	r3, sp, #4
 8005ee2:	466a      	mov	r2, sp
 8005ee4:	f7ff ffc8 	bl	8005e78 <__swhatbuf_r>
 8005ee8:	9900      	ldr	r1, [sp, #0]
 8005eea:	4605      	mov	r5, r0
 8005eec:	4630      	mov	r0, r6
 8005eee:	f7fe febd 	bl	8004c6c <_malloc_r>
 8005ef2:	b948      	cbnz	r0, 8005f08 <__smakebuf_r+0x44>
 8005ef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ef8:	059a      	lsls	r2, r3, #22
 8005efa:	d4ef      	bmi.n	8005edc <__smakebuf_r+0x18>
 8005efc:	f023 0303 	bic.w	r3, r3, #3
 8005f00:	f043 0302 	orr.w	r3, r3, #2
 8005f04:	81a3      	strh	r3, [r4, #12]
 8005f06:	e7e3      	b.n	8005ed0 <__smakebuf_r+0xc>
 8005f08:	89a3      	ldrh	r3, [r4, #12]
 8005f0a:	6020      	str	r0, [r4, #0]
 8005f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f10:	81a3      	strh	r3, [r4, #12]
 8005f12:	9b00      	ldr	r3, [sp, #0]
 8005f14:	6163      	str	r3, [r4, #20]
 8005f16:	9b01      	ldr	r3, [sp, #4]
 8005f18:	6120      	str	r0, [r4, #16]
 8005f1a:	b15b      	cbz	r3, 8005f34 <__smakebuf_r+0x70>
 8005f1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f20:	4630      	mov	r0, r6
 8005f22:	f000 f81d 	bl	8005f60 <_isatty_r>
 8005f26:	b128      	cbz	r0, 8005f34 <__smakebuf_r+0x70>
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	f023 0303 	bic.w	r3, r3, #3
 8005f2e:	f043 0301 	orr.w	r3, r3, #1
 8005f32:	81a3      	strh	r3, [r4, #12]
 8005f34:	89a3      	ldrh	r3, [r4, #12]
 8005f36:	431d      	orrs	r5, r3
 8005f38:	81a5      	strh	r5, [r4, #12]
 8005f3a:	e7cf      	b.n	8005edc <__smakebuf_r+0x18>

08005f3c <_fstat_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	4d07      	ldr	r5, [pc, #28]	; (8005f5c <_fstat_r+0x20>)
 8005f40:	2300      	movs	r3, #0
 8005f42:	4604      	mov	r4, r0
 8005f44:	4608      	mov	r0, r1
 8005f46:	4611      	mov	r1, r2
 8005f48:	602b      	str	r3, [r5, #0]
 8005f4a:	f7fb fe18 	bl	8001b7e <_fstat>
 8005f4e:	1c43      	adds	r3, r0, #1
 8005f50:	d102      	bne.n	8005f58 <_fstat_r+0x1c>
 8005f52:	682b      	ldr	r3, [r5, #0]
 8005f54:	b103      	cbz	r3, 8005f58 <_fstat_r+0x1c>
 8005f56:	6023      	str	r3, [r4, #0]
 8005f58:	bd38      	pop	{r3, r4, r5, pc}
 8005f5a:	bf00      	nop
 8005f5c:	2000043c 	.word	0x2000043c

08005f60 <_isatty_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	4d06      	ldr	r5, [pc, #24]	; (8005f7c <_isatty_r+0x1c>)
 8005f64:	2300      	movs	r3, #0
 8005f66:	4604      	mov	r4, r0
 8005f68:	4608      	mov	r0, r1
 8005f6a:	602b      	str	r3, [r5, #0]
 8005f6c:	f7fb fe17 	bl	8001b9e <_isatty>
 8005f70:	1c43      	adds	r3, r0, #1
 8005f72:	d102      	bne.n	8005f7a <_isatty_r+0x1a>
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	b103      	cbz	r3, 8005f7a <_isatty_r+0x1a>
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
 8005f7c:	2000043c 	.word	0x2000043c

08005f80 <powf>:
 8005f80:	b508      	push	{r3, lr}
 8005f82:	ed2d 8b04 	vpush	{d8-d9}
 8005f86:	eeb0 8a60 	vmov.f32	s16, s1
 8005f8a:	eeb0 9a40 	vmov.f32	s18, s0
 8005f8e:	f000 f85b 	bl	8006048 <__ieee754_powf>
 8005f92:	eeb4 8a48 	vcmp.f32	s16, s16
 8005f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f9a:	eef0 8a40 	vmov.f32	s17, s0
 8005f9e:	d63e      	bvs.n	800601e <powf+0x9e>
 8005fa0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8005fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa8:	d112      	bne.n	8005fd0 <powf+0x50>
 8005faa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb2:	d039      	beq.n	8006028 <powf+0xa8>
 8005fb4:	eeb0 0a48 	vmov.f32	s0, s16
 8005fb8:	f000 f839 	bl	800602e <finitef>
 8005fbc:	b378      	cbz	r0, 800601e <powf+0x9e>
 8005fbe:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fc6:	d52a      	bpl.n	800601e <powf+0x9e>
 8005fc8:	f7fd ff34 	bl	8003e34 <__errno>
 8005fcc:	2322      	movs	r3, #34	; 0x22
 8005fce:	e014      	b.n	8005ffa <powf+0x7a>
 8005fd0:	f000 f82d 	bl	800602e <finitef>
 8005fd4:	b998      	cbnz	r0, 8005ffe <powf+0x7e>
 8005fd6:	eeb0 0a49 	vmov.f32	s0, s18
 8005fda:	f000 f828 	bl	800602e <finitef>
 8005fde:	b170      	cbz	r0, 8005ffe <powf+0x7e>
 8005fe0:	eeb0 0a48 	vmov.f32	s0, s16
 8005fe4:	f000 f823 	bl	800602e <finitef>
 8005fe8:	b148      	cbz	r0, 8005ffe <powf+0x7e>
 8005fea:	eef4 8a68 	vcmp.f32	s17, s17
 8005fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ff2:	d7e9      	bvc.n	8005fc8 <powf+0x48>
 8005ff4:	f7fd ff1e 	bl	8003e34 <__errno>
 8005ff8:	2321      	movs	r3, #33	; 0x21
 8005ffa:	6003      	str	r3, [r0, #0]
 8005ffc:	e00f      	b.n	800601e <powf+0x9e>
 8005ffe:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006006:	d10a      	bne.n	800601e <powf+0x9e>
 8006008:	eeb0 0a49 	vmov.f32	s0, s18
 800600c:	f000 f80f 	bl	800602e <finitef>
 8006010:	b128      	cbz	r0, 800601e <powf+0x9e>
 8006012:	eeb0 0a48 	vmov.f32	s0, s16
 8006016:	f000 f80a 	bl	800602e <finitef>
 800601a:	2800      	cmp	r0, #0
 800601c:	d1d4      	bne.n	8005fc8 <powf+0x48>
 800601e:	eeb0 0a68 	vmov.f32	s0, s17
 8006022:	ecbd 8b04 	vpop	{d8-d9}
 8006026:	bd08      	pop	{r3, pc}
 8006028:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800602c:	e7f7      	b.n	800601e <powf+0x9e>

0800602e <finitef>:
 800602e:	b082      	sub	sp, #8
 8006030:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006034:	9801      	ldr	r0, [sp, #4]
 8006036:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800603a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800603e:	bfac      	ite	ge
 8006040:	2000      	movge	r0, #0
 8006042:	2001      	movlt	r0, #1
 8006044:	b002      	add	sp, #8
 8006046:	4770      	bx	lr

08006048 <__ieee754_powf>:
 8006048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800604c:	ee10 4a90 	vmov	r4, s1
 8006050:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8006054:	ed2d 8b02 	vpush	{d8}
 8006058:	ee10 7a10 	vmov	r7, s0
 800605c:	eeb0 8a40 	vmov.f32	s16, s0
 8006060:	eef0 8a60 	vmov.f32	s17, s1
 8006064:	d10c      	bne.n	8006080 <__ieee754_powf+0x38>
 8006066:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 800606a:	007f      	lsls	r7, r7, #1
 800606c:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 8006070:	f240 8292 	bls.w	8006598 <__ieee754_powf+0x550>
 8006074:	ee38 0a28 	vadd.f32	s0, s16, s17
 8006078:	ecbd 8b02 	vpop	{d8}
 800607c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006080:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8006084:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8006088:	dcf4      	bgt.n	8006074 <__ieee754_powf+0x2c>
 800608a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800608e:	dd08      	ble.n	80060a2 <__ieee754_powf+0x5a>
 8006090:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006094:	d1ee      	bne.n	8006074 <__ieee754_powf+0x2c>
 8006096:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800609a:	0064      	lsls	r4, r4, #1
 800609c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80060a0:	e7e6      	b.n	8006070 <__ieee754_powf+0x28>
 80060a2:	2f00      	cmp	r7, #0
 80060a4:	da20      	bge.n	80060e8 <__ieee754_powf+0xa0>
 80060a6:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 80060aa:	da2d      	bge.n	8006108 <__ieee754_powf+0xc0>
 80060ac:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80060b0:	f2c0 827b 	blt.w	80065aa <__ieee754_powf+0x562>
 80060b4:	ea4f 53e8 	mov.w	r3, r8, asr #23
 80060b8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80060bc:	fa48 f603 	asr.w	r6, r8, r3
 80060c0:	fa06 f303 	lsl.w	r3, r6, r3
 80060c4:	4543      	cmp	r3, r8
 80060c6:	f040 8270 	bne.w	80065aa <__ieee754_powf+0x562>
 80060ca:	f006 0601 	and.w	r6, r6, #1
 80060ce:	f1c6 0602 	rsb	r6, r6, #2
 80060d2:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80060d6:	d11f      	bne.n	8006118 <__ieee754_powf+0xd0>
 80060d8:	2c00      	cmp	r4, #0
 80060da:	f280 8263 	bge.w	80065a4 <__ieee754_powf+0x55c>
 80060de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80060e2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80060e6:	e7c7      	b.n	8006078 <__ieee754_powf+0x30>
 80060e8:	2600      	movs	r6, #0
 80060ea:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80060ee:	d1f0      	bne.n	80060d2 <__ieee754_powf+0x8a>
 80060f0:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80060f4:	f000 8250 	beq.w	8006598 <__ieee754_powf+0x550>
 80060f8:	dd08      	ble.n	800610c <__ieee754_powf+0xc4>
 80060fa:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8006400 <__ieee754_powf+0x3b8>
 80060fe:	2c00      	cmp	r4, #0
 8006100:	bfa8      	it	ge
 8006102:	eeb0 0a68 	vmovge.f32	s0, s17
 8006106:	e7b7      	b.n	8006078 <__ieee754_powf+0x30>
 8006108:	2602      	movs	r6, #2
 800610a:	e7ee      	b.n	80060ea <__ieee754_powf+0xa2>
 800610c:	2c00      	cmp	r4, #0
 800610e:	f280 8246 	bge.w	800659e <__ieee754_powf+0x556>
 8006112:	eeb1 0a68 	vneg.f32	s0, s17
 8006116:	e7af      	b.n	8006078 <__ieee754_powf+0x30>
 8006118:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800611c:	d102      	bne.n	8006124 <__ieee754_powf+0xdc>
 800611e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8006122:	e7a9      	b.n	8006078 <__ieee754_powf+0x30>
 8006124:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006128:	eeb0 0a48 	vmov.f32	s0, s16
 800612c:	d107      	bne.n	800613e <__ieee754_powf+0xf6>
 800612e:	2f00      	cmp	r7, #0
 8006130:	db05      	blt.n	800613e <__ieee754_powf+0xf6>
 8006132:	ecbd 8b02 	vpop	{d8}
 8006136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800613a:	f000 badf 	b.w	80066fc <__ieee754_sqrtf>
 800613e:	f000 fa4d 	bl	80065dc <fabsf>
 8006142:	b125      	cbz	r5, 800614e <__ieee754_powf+0x106>
 8006144:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8006148:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800614c:	d115      	bne.n	800617a <__ieee754_powf+0x132>
 800614e:	2c00      	cmp	r4, #0
 8006150:	bfbc      	itt	lt
 8006152:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8006156:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800615a:	2f00      	cmp	r7, #0
 800615c:	da8c      	bge.n	8006078 <__ieee754_powf+0x30>
 800615e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8006162:	4335      	orrs	r5, r6
 8006164:	d104      	bne.n	8006170 <__ieee754_powf+0x128>
 8006166:	ee70 7a40 	vsub.f32	s15, s0, s0
 800616a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800616e:	e783      	b.n	8006078 <__ieee754_powf+0x30>
 8006170:	2e01      	cmp	r6, #1
 8006172:	d181      	bne.n	8006078 <__ieee754_powf+0x30>
 8006174:	eeb1 0a40 	vneg.f32	s0, s0
 8006178:	e77e      	b.n	8006078 <__ieee754_powf+0x30>
 800617a:	0ff8      	lsrs	r0, r7, #31
 800617c:	3801      	subs	r0, #1
 800617e:	ea56 0300 	orrs.w	r3, r6, r0
 8006182:	d104      	bne.n	800618e <__ieee754_powf+0x146>
 8006184:	ee38 8a48 	vsub.f32	s16, s16, s16
 8006188:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800618c:	e774      	b.n	8006078 <__ieee754_powf+0x30>
 800618e:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8006192:	dd73      	ble.n	800627c <__ieee754_powf+0x234>
 8006194:	4b9b      	ldr	r3, [pc, #620]	; (8006404 <__ieee754_powf+0x3bc>)
 8006196:	429d      	cmp	r5, r3
 8006198:	dc08      	bgt.n	80061ac <__ieee754_powf+0x164>
 800619a:	2c00      	cmp	r4, #0
 800619c:	da0b      	bge.n	80061b6 <__ieee754_powf+0x16e>
 800619e:	2000      	movs	r0, #0
 80061a0:	ecbd 8b02 	vpop	{d8}
 80061a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061a8:	f000 baa2 	b.w	80066f0 <__math_oflowf>
 80061ac:	4b96      	ldr	r3, [pc, #600]	; (8006408 <__ieee754_powf+0x3c0>)
 80061ae:	429d      	cmp	r5, r3
 80061b0:	dd08      	ble.n	80061c4 <__ieee754_powf+0x17c>
 80061b2:	2c00      	cmp	r4, #0
 80061b4:	dcf3      	bgt.n	800619e <__ieee754_powf+0x156>
 80061b6:	2000      	movs	r0, #0
 80061b8:	ecbd 8b02 	vpop	{d8}
 80061bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061c0:	f000 ba90 	b.w	80066e4 <__math_uflowf>
 80061c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80061c8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80061cc:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800640c <__ieee754_powf+0x3c4>
 80061d0:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80061d4:	eee0 6a67 	vfms.f32	s13, s0, s15
 80061d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80061dc:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80061e0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80061e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061e8:	eddf 7a89 	vldr	s15, [pc, #548]	; 8006410 <__ieee754_powf+0x3c8>
 80061ec:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80061f0:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8006414 <__ieee754_powf+0x3cc>
 80061f4:	eee0 7a07 	vfma.f32	s15, s0, s14
 80061f8:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8006418 <__ieee754_powf+0x3d0>
 80061fc:	eef0 6a67 	vmov.f32	s13, s15
 8006200:	eee0 6a07 	vfma.f32	s13, s0, s14
 8006204:	ee16 3a90 	vmov	r3, s13
 8006208:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800620c:	f023 030f 	bic.w	r3, r3, #15
 8006210:	ee06 3a90 	vmov	s13, r3
 8006214:	eee0 6a47 	vfms.f32	s13, s0, s14
 8006218:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800621c:	3e01      	subs	r6, #1
 800621e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8006222:	4306      	orrs	r6, r0
 8006224:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006228:	f024 040f 	bic.w	r4, r4, #15
 800622c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8006230:	bf08      	it	eq
 8006232:	eeb0 8a47 	vmoveq.f32	s16, s14
 8006236:	ee07 4a10 	vmov	s14, r4
 800623a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800623e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8006242:	ee07 3a90 	vmov	s15, r3
 8006246:	eee7 0a27 	vfma.f32	s1, s14, s15
 800624a:	ee07 4a10 	vmov	s14, r4
 800624e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006252:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8006256:	ee17 1a10 	vmov	r1, s14
 800625a:	2900      	cmp	r1, #0
 800625c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006260:	f340 817c 	ble.w	800655c <__ieee754_powf+0x514>
 8006264:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8006268:	f340 80f8 	ble.w	800645c <__ieee754_powf+0x414>
 800626c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006274:	bf4c      	ite	mi
 8006276:	2001      	movmi	r0, #1
 8006278:	2000      	movpl	r0, #0
 800627a:	e791      	b.n	80061a0 <__ieee754_powf+0x158>
 800627c:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 8006280:	bf01      	itttt	eq
 8006282:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800641c <__ieee754_powf+0x3d4>
 8006286:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800628a:	f06f 0317 	mvneq.w	r3, #23
 800628e:	ee17 5a90 	vmoveq	r5, s15
 8006292:	ea4f 52e5 	mov.w	r2, r5, asr #23
 8006296:	bf18      	it	ne
 8006298:	2300      	movne	r3, #0
 800629a:	3a7f      	subs	r2, #127	; 0x7f
 800629c:	441a      	add	r2, r3
 800629e:	4b60      	ldr	r3, [pc, #384]	; (8006420 <__ieee754_powf+0x3d8>)
 80062a0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 80062a4:	429d      	cmp	r5, r3
 80062a6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 80062aa:	dd06      	ble.n	80062ba <__ieee754_powf+0x272>
 80062ac:	4b5d      	ldr	r3, [pc, #372]	; (8006424 <__ieee754_powf+0x3dc>)
 80062ae:	429d      	cmp	r5, r3
 80062b0:	f340 80a4 	ble.w	80063fc <__ieee754_powf+0x3b4>
 80062b4:	3201      	adds	r2, #1
 80062b6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80062ba:	2500      	movs	r5, #0
 80062bc:	4b5a      	ldr	r3, [pc, #360]	; (8006428 <__ieee754_powf+0x3e0>)
 80062be:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80062c2:	ee07 1a10 	vmov	s14, r1
 80062c6:	edd3 5a00 	vldr	s11, [r3]
 80062ca:	4b58      	ldr	r3, [pc, #352]	; (800642c <__ieee754_powf+0x3e4>)
 80062cc:	ee75 7a87 	vadd.f32	s15, s11, s14
 80062d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062d4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80062d8:	1049      	asrs	r1, r1, #1
 80062da:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80062de:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80062e2:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80062e6:	ee37 6a65 	vsub.f32	s12, s14, s11
 80062ea:	ee07 1a90 	vmov	s15, r1
 80062ee:	ee26 5a24 	vmul.f32	s10, s12, s9
 80062f2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80062f6:	ee15 7a10 	vmov	r7, s10
 80062fa:	401f      	ands	r7, r3
 80062fc:	ee06 7a90 	vmov	s13, r7
 8006300:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8006304:	ee37 7a65 	vsub.f32	s14, s14, s11
 8006308:	ee65 7a05 	vmul.f32	s15, s10, s10
 800630c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8006310:	eddf 5a47 	vldr	s11, [pc, #284]	; 8006430 <__ieee754_powf+0x3e8>
 8006314:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8006434 <__ieee754_powf+0x3ec>
 8006318:	eee7 5a87 	vfma.f32	s11, s15, s14
 800631c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8006438 <__ieee754_powf+0x3f0>
 8006320:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006324:	eddf 5a39 	vldr	s11, [pc, #228]	; 800640c <__ieee754_powf+0x3c4>
 8006328:	eee7 5a27 	vfma.f32	s11, s14, s15
 800632c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800643c <__ieee754_powf+0x3f4>
 8006330:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006334:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006440 <__ieee754_powf+0x3f8>
 8006338:	ee26 6a24 	vmul.f32	s12, s12, s9
 800633c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8006340:	ee35 7a26 	vadd.f32	s14, s10, s13
 8006344:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8006348:	ee27 7a06 	vmul.f32	s14, s14, s12
 800634c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8006350:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8006354:	eef0 5a67 	vmov.f32	s11, s15
 8006358:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800635c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8006360:	ee15 1a90 	vmov	r1, s11
 8006364:	4019      	ands	r1, r3
 8006366:	ee05 1a90 	vmov	s11, r1
 800636a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800636e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8006372:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006376:	ee67 7a85 	vmul.f32	s15, s15, s10
 800637a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800637e:	eeb0 6a67 	vmov.f32	s12, s15
 8006382:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8006386:	ee16 1a10 	vmov	r1, s12
 800638a:	4019      	ands	r1, r3
 800638c:	ee07 1a10 	vmov	s14, r1
 8006390:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8006394:	ee06 1a10 	vmov	s12, r1
 8006398:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800639c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8006444 <__ieee754_powf+0x3fc>
 80063a0:	4929      	ldr	r1, [pc, #164]	; (8006448 <__ieee754_powf+0x400>)
 80063a2:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800644c <__ieee754_powf+0x404>
 80063a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063aa:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8006450 <__ieee754_powf+0x408>
 80063ae:	eee6 7a07 	vfma.f32	s15, s12, s14
 80063b2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80063b6:	ed91 7a00 	vldr	s14, [r1]
 80063ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063be:	ee07 2a10 	vmov	s14, r2
 80063c2:	eef0 6a67 	vmov.f32	s13, s15
 80063c6:	4a23      	ldr	r2, [pc, #140]	; (8006454 <__ieee754_powf+0x40c>)
 80063c8:	eee6 6a25 	vfma.f32	s13, s12, s11
 80063cc:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80063d0:	ed92 5a00 	vldr	s10, [r2]
 80063d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80063d8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80063dc:	ee76 6a87 	vadd.f32	s13, s13, s14
 80063e0:	ee16 2a90 	vmov	r2, s13
 80063e4:	4013      	ands	r3, r2
 80063e6:	ee06 3a90 	vmov	s13, r3
 80063ea:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80063ee:	ee37 7a45 	vsub.f32	s14, s14, s10
 80063f2:	eea6 7a65 	vfms.f32	s14, s12, s11
 80063f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80063fa:	e70f      	b.n	800621c <__ieee754_powf+0x1d4>
 80063fc:	2501      	movs	r5, #1
 80063fe:	e75d      	b.n	80062bc <__ieee754_powf+0x274>
 8006400:	00000000 	.word	0x00000000
 8006404:	3f7ffff3 	.word	0x3f7ffff3
 8006408:	3f800007 	.word	0x3f800007
 800640c:	3eaaaaab 	.word	0x3eaaaaab
 8006410:	3fb8aa3b 	.word	0x3fb8aa3b
 8006414:	36eca570 	.word	0x36eca570
 8006418:	3fb8aa00 	.word	0x3fb8aa00
 800641c:	4b800000 	.word	0x4b800000
 8006420:	001cc471 	.word	0x001cc471
 8006424:	005db3d6 	.word	0x005db3d6
 8006428:	08006af4 	.word	0x08006af4
 800642c:	fffff000 	.word	0xfffff000
 8006430:	3e6c3255 	.word	0x3e6c3255
 8006434:	3e53f142 	.word	0x3e53f142
 8006438:	3e8ba305 	.word	0x3e8ba305
 800643c:	3edb6db7 	.word	0x3edb6db7
 8006440:	3f19999a 	.word	0x3f19999a
 8006444:	3f76384f 	.word	0x3f76384f
 8006448:	08006b04 	.word	0x08006b04
 800644c:	3f763800 	.word	0x3f763800
 8006450:	369dc3a0 	.word	0x369dc3a0
 8006454:	08006afc 	.word	0x08006afc
 8006458:	3338aa3c 	.word	0x3338aa3c
 800645c:	f040 8093 	bne.w	8006586 <__ieee754_powf+0x53e>
 8006460:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8006458 <__ieee754_powf+0x410>
 8006464:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006468:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800646c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8006470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006474:	f73f aefa 	bgt.w	800626c <__ieee754_powf+0x224>
 8006478:	15db      	asrs	r3, r3, #23
 800647a:	3b7e      	subs	r3, #126	; 0x7e
 800647c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006480:	4118      	asrs	r0, r3
 8006482:	4408      	add	r0, r1
 8006484:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006488:	4a49      	ldr	r2, [pc, #292]	; (80065b0 <__ieee754_powf+0x568>)
 800648a:	3b7f      	subs	r3, #127	; 0x7f
 800648c:	411a      	asrs	r2, r3
 800648e:	4002      	ands	r2, r0
 8006490:	ee07 2a10 	vmov	s14, r2
 8006494:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8006498:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800649c:	f1c3 0317 	rsb	r3, r3, #23
 80064a0:	4118      	asrs	r0, r3
 80064a2:	2900      	cmp	r1, #0
 80064a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80064a8:	bfb8      	it	lt
 80064aa:	4240      	neglt	r0, r0
 80064ac:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80064b0:	eddf 6a40 	vldr	s13, [pc, #256]	; 80065b4 <__ieee754_powf+0x56c>
 80064b4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80065b8 <__ieee754_powf+0x570>
 80064b8:	ee17 3a10 	vmov	r3, s14
 80064bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80064c0:	f023 030f 	bic.w	r3, r3, #15
 80064c4:	ee07 3a10 	vmov	s14, r3
 80064c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80064d0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80064d4:	eddf 7a39 	vldr	s15, [pc, #228]	; 80065bc <__ieee754_powf+0x574>
 80064d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064dc:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80064e0:	eef0 6a67 	vmov.f32	s13, s15
 80064e4:	eee7 6a06 	vfma.f32	s13, s14, s12
 80064e8:	eef0 5a66 	vmov.f32	s11, s13
 80064ec:	eee7 5a46 	vfms.f32	s11, s14, s12
 80064f0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80064f4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80064f8:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80065c0 <__ieee754_powf+0x578>
 80064fc:	eddf 5a31 	vldr	s11, [pc, #196]	; 80065c4 <__ieee754_powf+0x57c>
 8006500:	eea7 6a25 	vfma.f32	s12, s14, s11
 8006504:	eddf 5a30 	vldr	s11, [pc, #192]	; 80065c8 <__ieee754_powf+0x580>
 8006508:	eee6 5a07 	vfma.f32	s11, s12, s14
 800650c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80065cc <__ieee754_powf+0x584>
 8006510:	eea5 6a87 	vfma.f32	s12, s11, s14
 8006514:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80065d0 <__ieee754_powf+0x588>
 8006518:	eee6 5a07 	vfma.f32	s11, s12, s14
 800651c:	eeb0 6a66 	vmov.f32	s12, s13
 8006520:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8006524:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006528:	ee66 5a86 	vmul.f32	s11, s13, s12
 800652c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8006530:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8006534:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8006538:	ee77 7a67 	vsub.f32	s15, s14, s15
 800653c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006540:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006544:	ee10 3a10 	vmov	r3, s0
 8006548:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800654c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006550:	da1f      	bge.n	8006592 <__ieee754_powf+0x54a>
 8006552:	f000 f84b 	bl	80065ec <scalbnf>
 8006556:	ee20 0a08 	vmul.f32	s0, s0, s16
 800655a:	e58d      	b.n	8006078 <__ieee754_powf+0x30>
 800655c:	4a1d      	ldr	r2, [pc, #116]	; (80065d4 <__ieee754_powf+0x58c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	dd07      	ble.n	8006572 <__ieee754_powf+0x52a>
 8006562:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800656a:	bf4c      	ite	mi
 800656c:	2001      	movmi	r0, #1
 800656e:	2000      	movpl	r0, #0
 8006570:	e622      	b.n	80061b8 <__ieee754_powf+0x170>
 8006572:	d108      	bne.n	8006586 <__ieee754_powf+0x53e>
 8006574:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006578:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800657c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006580:	f6ff af7a 	blt.w	8006478 <__ieee754_powf+0x430>
 8006584:	e7ed      	b.n	8006562 <__ieee754_powf+0x51a>
 8006586:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800658a:	f73f af75 	bgt.w	8006478 <__ieee754_powf+0x430>
 800658e:	2000      	movs	r0, #0
 8006590:	e78c      	b.n	80064ac <__ieee754_powf+0x464>
 8006592:	ee00 3a10 	vmov	s0, r3
 8006596:	e7de      	b.n	8006556 <__ieee754_powf+0x50e>
 8006598:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800659c:	e56c      	b.n	8006078 <__ieee754_powf+0x30>
 800659e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80065d8 <__ieee754_powf+0x590>
 80065a2:	e569      	b.n	8006078 <__ieee754_powf+0x30>
 80065a4:	eeb0 0a48 	vmov.f32	s0, s16
 80065a8:	e566      	b.n	8006078 <__ieee754_powf+0x30>
 80065aa:	2600      	movs	r6, #0
 80065ac:	e591      	b.n	80060d2 <__ieee754_powf+0x8a>
 80065ae:	bf00      	nop
 80065b0:	ff800000 	.word	0xff800000
 80065b4:	3f317218 	.word	0x3f317218
 80065b8:	3f317200 	.word	0x3f317200
 80065bc:	35bfbe8c 	.word	0x35bfbe8c
 80065c0:	b5ddea0e 	.word	0xb5ddea0e
 80065c4:	3331bb4c 	.word	0x3331bb4c
 80065c8:	388ab355 	.word	0x388ab355
 80065cc:	bb360b61 	.word	0xbb360b61
 80065d0:	3e2aaaab 	.word	0x3e2aaaab
 80065d4:	43160000 	.word	0x43160000
 80065d8:	00000000 	.word	0x00000000

080065dc <fabsf>:
 80065dc:	ee10 3a10 	vmov	r3, s0
 80065e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065e4:	ee00 3a10 	vmov	s0, r3
 80065e8:	4770      	bx	lr
	...

080065ec <scalbnf>:
 80065ec:	ee10 3a10 	vmov	r3, s0
 80065f0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80065f4:	d02b      	beq.n	800664e <scalbnf+0x62>
 80065f6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80065fa:	d302      	bcc.n	8006602 <scalbnf+0x16>
 80065fc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006600:	4770      	bx	lr
 8006602:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8006606:	d123      	bne.n	8006650 <scalbnf+0x64>
 8006608:	4b24      	ldr	r3, [pc, #144]	; (800669c <scalbnf+0xb0>)
 800660a:	eddf 7a25 	vldr	s15, [pc, #148]	; 80066a0 <scalbnf+0xb4>
 800660e:	4298      	cmp	r0, r3
 8006610:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006614:	db17      	blt.n	8006646 <scalbnf+0x5a>
 8006616:	ee10 3a10 	vmov	r3, s0
 800661a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800661e:	3a19      	subs	r2, #25
 8006620:	f24c 3150 	movw	r1, #50000	; 0xc350
 8006624:	4288      	cmp	r0, r1
 8006626:	dd15      	ble.n	8006654 <scalbnf+0x68>
 8006628:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80066a4 <scalbnf+0xb8>
 800662c:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80066a8 <scalbnf+0xbc>
 8006630:	ee10 3a10 	vmov	r3, s0
 8006634:	eeb0 7a67 	vmov.f32	s14, s15
 8006638:	2b00      	cmp	r3, #0
 800663a:	bfb8      	it	lt
 800663c:	eef0 7a66 	vmovlt.f32	s15, s13
 8006640:	ee27 0a87 	vmul.f32	s0, s15, s14
 8006644:	4770      	bx	lr
 8006646:	eddf 7a19 	vldr	s15, [pc, #100]	; 80066ac <scalbnf+0xc0>
 800664a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800664e:	4770      	bx	lr
 8006650:	0dd2      	lsrs	r2, r2, #23
 8006652:	e7e5      	b.n	8006620 <scalbnf+0x34>
 8006654:	4410      	add	r0, r2
 8006656:	28fe      	cmp	r0, #254	; 0xfe
 8006658:	dce6      	bgt.n	8006628 <scalbnf+0x3c>
 800665a:	2800      	cmp	r0, #0
 800665c:	dd06      	ble.n	800666c <scalbnf+0x80>
 800665e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006662:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006666:	ee00 3a10 	vmov	s0, r3
 800666a:	4770      	bx	lr
 800666c:	f110 0f16 	cmn.w	r0, #22
 8006670:	da09      	bge.n	8006686 <scalbnf+0x9a>
 8006672:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80066ac <scalbnf+0xc0>
 8006676:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80066b0 <scalbnf+0xc4>
 800667a:	ee10 3a10 	vmov	r3, s0
 800667e:	eeb0 7a67 	vmov.f32	s14, s15
 8006682:	2b00      	cmp	r3, #0
 8006684:	e7d9      	b.n	800663a <scalbnf+0x4e>
 8006686:	3019      	adds	r0, #25
 8006688:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800668c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006690:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80066b4 <scalbnf+0xc8>
 8006694:	ee07 3a90 	vmov	s15, r3
 8006698:	e7d7      	b.n	800664a <scalbnf+0x5e>
 800669a:	bf00      	nop
 800669c:	ffff3cb0 	.word	0xffff3cb0
 80066a0:	4c000000 	.word	0x4c000000
 80066a4:	7149f2ca 	.word	0x7149f2ca
 80066a8:	f149f2ca 	.word	0xf149f2ca
 80066ac:	0da24260 	.word	0x0da24260
 80066b0:	8da24260 	.word	0x8da24260
 80066b4:	33000000 	.word	0x33000000

080066b8 <with_errnof>:
 80066b8:	b513      	push	{r0, r1, r4, lr}
 80066ba:	4604      	mov	r4, r0
 80066bc:	ed8d 0a01 	vstr	s0, [sp, #4]
 80066c0:	f7fd fbb8 	bl	8003e34 <__errno>
 80066c4:	ed9d 0a01 	vldr	s0, [sp, #4]
 80066c8:	6004      	str	r4, [r0, #0]
 80066ca:	b002      	add	sp, #8
 80066cc:	bd10      	pop	{r4, pc}

080066ce <xflowf>:
 80066ce:	b130      	cbz	r0, 80066de <xflowf+0x10>
 80066d0:	eef1 7a40 	vneg.f32	s15, s0
 80066d4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80066d8:	2022      	movs	r0, #34	; 0x22
 80066da:	f7ff bfed 	b.w	80066b8 <with_errnof>
 80066de:	eef0 7a40 	vmov.f32	s15, s0
 80066e2:	e7f7      	b.n	80066d4 <xflowf+0x6>

080066e4 <__math_uflowf>:
 80066e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80066ec <__math_uflowf+0x8>
 80066e8:	f7ff bff1 	b.w	80066ce <xflowf>
 80066ec:	10000000 	.word	0x10000000

080066f0 <__math_oflowf>:
 80066f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80066f8 <__math_oflowf+0x8>
 80066f4:	f7ff bfeb 	b.w	80066ce <xflowf>
 80066f8:	70000000 	.word	0x70000000

080066fc <__ieee754_sqrtf>:
 80066fc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006700:	4770      	bx	lr
	...

08006704 <_init>:
 8006704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006706:	bf00      	nop
 8006708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800670a:	bc08      	pop	{r3}
 800670c:	469e      	mov	lr, r3
 800670e:	4770      	bx	lr

08006710 <_fini>:
 8006710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006712:	bf00      	nop
 8006714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006716:	bc08      	pop	{r3}
 8006718:	469e      	mov	lr, r3
 800671a:	4770      	bx	lr
